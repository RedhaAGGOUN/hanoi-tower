2025-07-06 10:27:53,009:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 10:27:53,009:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 10:27:53,009:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 10:27:53,009:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 10:39:42,440:INFO:PyCaret ClassificationExperiment
2025-07-06 10:39:42,441:INFO:Logging name: clf-default-name
2025-07-06 10:39:42,441:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-06 10:39:42,441:INFO:version 3.3.2
2025-07-06 10:39:42,441:INFO:Initializing setup()
2025-07-06 10:39:42,441:INFO:self.USI: 8810
2025-07-06 10:39:42,441:INFO:self._variable_keys: {'memory', 'fold_groups_param', 'y', 'X_train', 'X_test', 'fold_shuffle_param', 'gpu_param', 'fix_imbalance', '_available_plots', 'y_test', 'X', 'seed', 'fold_generator', '_ml_usecase', 'html_param', 'y_train', 'exp_id', 'n_jobs_param', 'is_multiclass', 'log_plots_param', 'idx', 'USI', 'data', 'gpu_n_jobs_param', 'exp_name_log', 'target_param', 'pipeline', 'logging_param'}
2025-07-06 10:39:42,441:INFO:Checking environment
2025-07-06 10:39:42,441:INFO:python_version: 3.10.18
2025-07-06 10:39:42,441:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-07-06 10:39:42,441:INFO:machine: AMD64
2025-07-06 10:39:42,441:INFO:platform: Windows-10-10.0.26100-SP0
2025-07-06 10:39:42,445:INFO:Memory: svmem(total=34083729408, available=18029703168, percent=47.1, used=16054026240, free=18029703168)
2025-07-06 10:39:42,446:INFO:Physical Core: 14
2025-07-06 10:39:42,446:INFO:Logical Core: 20
2025-07-06 10:39:42,446:INFO:Checking libraries
2025-07-06 10:39:42,446:INFO:System:
2025-07-06 10:39:42,446:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-07-06 10:39:42,446:INFO:executable: c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\python.exe
2025-07-06 10:39:42,446:INFO:   machine: Windows-10-10.0.26100-SP0
2025-07-06 10:39:42,446:INFO:PyCaret required dependencies:
2025-07-06 10:39:42,502:INFO:                 pip: 25.1
2025-07-06 10:39:42,502:INFO:          setuptools: 78.1.1
2025-07-06 10:39:42,502:INFO:             pycaret: 3.3.2
2025-07-06 10:39:42,502:INFO:             IPython: 8.37.0
2025-07-06 10:39:42,502:INFO:          ipywidgets: 8.1.7
2025-07-06 10:39:42,502:INFO:                tqdm: 4.67.1
2025-07-06 10:39:42,502:INFO:               numpy: 1.26.4
2025-07-06 10:39:42,502:INFO:              pandas: 2.1.4
2025-07-06 10:39:42,503:INFO:              jinja2: 3.1.6
2025-07-06 10:39:42,503:INFO:               scipy: 1.11.4
2025-07-06 10:39:42,503:INFO:              joblib: 1.3.2
2025-07-06 10:39:42,503:INFO:             sklearn: 1.4.2
2025-07-06 10:39:42,503:INFO:                pyod: 2.0.5
2025-07-06 10:39:42,503:INFO:            imblearn: 0.13.0
2025-07-06 10:39:42,503:INFO:   category_encoders: 2.7.0
2025-07-06 10:39:42,503:INFO:            lightgbm: 4.6.0
2025-07-06 10:39:42,503:INFO:               numba: 0.61.2
2025-07-06 10:39:42,503:INFO:            requests: 2.32.4
2025-07-06 10:39:42,503:INFO:          matplotlib: 3.7.5
2025-07-06 10:39:42,503:INFO:          scikitplot: 0.3.7
2025-07-06 10:39:42,503:INFO:         yellowbrick: 1.5
2025-07-06 10:39:42,503:INFO:              plotly: 5.24.1
2025-07-06 10:39:42,503:INFO:    plotly-resampler: Not installed
2025-07-06 10:39:42,503:INFO:             kaleido: 1.0.0
2025-07-06 10:39:42,503:INFO:           schemdraw: 0.15
2025-07-06 10:39:42,503:INFO:         statsmodels: 0.14.4
2025-07-06 10:39:42,503:INFO:              sktime: 0.26.0
2025-07-06 10:39:42,503:INFO:               tbats: 1.1.3
2025-07-06 10:39:42,503:INFO:            pmdarima: 2.0.4
2025-07-06 10:39:42,503:INFO:              psutil: 7.0.0
2025-07-06 10:39:42,503:INFO:          markupsafe: 3.0.2
2025-07-06 10:39:42,503:INFO:             pickle5: Not installed
2025-07-06 10:39:42,503:INFO:         cloudpickle: 3.1.1
2025-07-06 10:39:42,503:INFO:         deprecation: 2.1.0
2025-07-06 10:39:42,503:INFO:              xxhash: 3.5.0
2025-07-06 10:39:42,503:INFO:           wurlitzer: Not installed
2025-07-06 10:39:42,503:INFO:PyCaret optional dependencies:
2025-07-06 10:39:42,513:INFO:                shap: Not installed
2025-07-06 10:39:42,513:INFO:           interpret: Not installed
2025-07-06 10:39:42,513:INFO:                umap: Not installed
2025-07-06 10:39:42,513:INFO:     ydata_profiling: Not installed
2025-07-06 10:39:42,513:INFO:  explainerdashboard: Not installed
2025-07-06 10:39:42,513:INFO:             autoviz: Not installed
2025-07-06 10:39:42,513:INFO:           fairlearn: Not installed
2025-07-06 10:39:42,513:INFO:          deepchecks: Not installed
2025-07-06 10:39:42,513:INFO:             xgboost: Not installed
2025-07-06 10:39:42,513:INFO:            catboost: Not installed
2025-07-06 10:39:42,513:INFO:              kmodes: Not installed
2025-07-06 10:39:42,513:INFO:             mlxtend: Not installed
2025-07-06 10:39:42,513:INFO:       statsforecast: Not installed
2025-07-06 10:39:42,513:INFO:        tune_sklearn: Not installed
2025-07-06 10:39:42,513:INFO:                 ray: Not installed
2025-07-06 10:39:42,513:INFO:            hyperopt: Not installed
2025-07-06 10:39:42,513:INFO:              optuna: Not installed
2025-07-06 10:39:42,513:INFO:               skopt: Not installed
2025-07-06 10:39:42,513:INFO:              mlflow: Not installed
2025-07-06 10:39:42,513:INFO:              gradio: Not installed
2025-07-06 10:39:42,513:INFO:             fastapi: Not installed
2025-07-06 10:39:42,513:INFO:             uvicorn: Not installed
2025-07-06 10:39:42,513:INFO:              m2cgen: Not installed
2025-07-06 10:39:42,513:INFO:           evidently: Not installed
2025-07-06 10:39:42,513:INFO:               fugue: Not installed
2025-07-06 10:39:42,513:INFO:           streamlit: Not installed
2025-07-06 10:39:42,513:INFO:             prophet: Not installed
2025-07-06 10:39:42,513:INFO:None
2025-07-06 10:39:42,513:INFO:Set up data.
2025-07-06 10:39:42,553:INFO:Set up folding strategy.
2025-07-06 10:39:42,553:INFO:Set up train/test split.
2025-07-06 10:39:42,594:INFO:Set up index.
2025-07-06 10:39:42,595:INFO:Assigning column types.
2025-07-06 10:39:42,601:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-06 10:39:42,634:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 10:39:42,641:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 10:39:42,684:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,684:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,716:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 10:39:42,717:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 10:39:42,738:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,738:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,738:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-06 10:39:42,771:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 10:39:42,792:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,793:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,827:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 10:39:42,848:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,850:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,851:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-06 10:39:42,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,905:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,960:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,960:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:42,989:INFO:Preparing preprocessing pipeline...
2025-07-06 10:39:42,991:INFO:Set up label encoding.
2025-07-06 10:39:42,991:INFO:Set up simple imputation.
2025-07-06 10:39:43,000:INFO:Set up encoding of ordinal features.
2025-07-06 10:39:43,007:INFO:Set up encoding of categorical features.
2025-07-06 10:39:43,395:INFO:Finished creating preprocessing pipeline.
2025-07-06 10:39:43,421:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-06 10:39:43,421:INFO:Creating final display dataframe.
2025-07-06 10:39:44,102:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target                 y
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (45211, 17)
5        Transformed data shape       (45211, 49)
6   Transformed train set shape       (31647, 49)
7    Transformed test set shape       (13564, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              8810
2025-07-06 10:39:44,164:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:44,164:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:44,220:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:44,220:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 10:39:44,221:INFO:setup() successfully completed in 1.78s...............
2025-07-06 10:41:13,973:INFO:Initializing compare_models()
2025-07-06 10:41:13,973:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-06 10:41:13,973:INFO:Checking exceptions
2025-07-06 10:41:13,981:INFO:Preparing display monitor
2025-07-06 10:41:14,001:INFO:Initializing Logistic Regression
2025-07-06 10:41:14,001:INFO:Total runtime is 0.0 minutes
2025-07-06 10:41:14,004:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:14,005:INFO:Initializing create_model()
2025-07-06 10:41:14,005:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:14,005:INFO:Checking exceptions
2025-07-06 10:41:14,005:INFO:Importing libraries
2025-07-06 10:41:14,006:INFO:Copying training dataset
2025-07-06 10:41:14,018:INFO:Defining folds
2025-07-06 10:41:14,018:INFO:Declaring metric variables
2025-07-06 10:41:14,021:INFO:Importing untrained model
2025-07-06 10:41:14,024:INFO:Logistic Regression Imported successfully
2025-07-06 10:41:14,030:INFO:Starting cross validation
2025-07-06 10:41:14,033:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:25,723:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,728:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,731:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,831:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,848:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,863:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,866:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,869:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,885:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,885:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,891:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,907:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,920:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,921:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,927:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,944:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,955:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,960:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,977:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,986:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,995:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:25,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:41:25,999:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,028:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,098:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,139:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,139:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,150:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,150:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,150:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,160:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,161:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,173:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,178:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,185:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:26,228:INFO:Calculating mean and std
2025-07-06 10:41:26,231:INFO:Creating metrics dataframe
2025-07-06 10:41:26,234:INFO:Uploading results into container
2025-07-06 10:41:26,234:INFO:Uploading model into container now
2025-07-06 10:41:26,235:INFO:_master_model_container: 1
2025-07-06 10:41:26,235:INFO:_display_container: 2
2025-07-06 10:41:26,235:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-06 10:41:26,235:INFO:create_model() successfully completed......................................
2025-07-06 10:41:26,313:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:26,314:INFO:Creating metrics dataframe
2025-07-06 10:41:26,319:INFO:Initializing K Neighbors Classifier
2025-07-06 10:41:26,319:INFO:Total runtime is 0.2052869240442912 minutes
2025-07-06 10:41:26,322:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:26,322:INFO:Initializing create_model()
2025-07-06 10:41:26,322:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:26,322:INFO:Checking exceptions
2025-07-06 10:41:26,322:INFO:Importing libraries
2025-07-06 10:41:26,322:INFO:Copying training dataset
2025-07-06 10:41:26,334:INFO:Defining folds
2025-07-06 10:41:26,334:INFO:Declaring metric variables
2025-07-06 10:41:26,337:INFO:Importing untrained model
2025-07-06 10:41:26,339:INFO:K Neighbors Classifier Imported successfully
2025-07-06 10:41:26,345:INFO:Starting cross validation
2025-07-06 10:41:26,347:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:31,632:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,674:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,704:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,728:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,756:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,792:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,883:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,884:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,905:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,907:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,930:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,933:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,939:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,945:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,955:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,967:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,971:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,974:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,979:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,993:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:31,999:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,003:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,012:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,014:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,018:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,026:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,037:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,048:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,062:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:32,102:INFO:Calculating mean and std
2025-07-06 10:41:32,104:INFO:Creating metrics dataframe
2025-07-06 10:41:32,107:INFO:Uploading results into container
2025-07-06 10:41:32,108:INFO:Uploading model into container now
2025-07-06 10:41:32,108:INFO:_master_model_container: 2
2025-07-06 10:41:32,108:INFO:_display_container: 2
2025-07-06 10:41:32,109:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-06 10:41:32,109:INFO:create_model() successfully completed......................................
2025-07-06 10:41:32,172:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:32,172:INFO:Creating metrics dataframe
2025-07-06 10:41:32,178:INFO:Initializing Naive Bayes
2025-07-06 10:41:32,178:INFO:Total runtime is 0.30294557412465417 minutes
2025-07-06 10:41:32,181:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:32,181:INFO:Initializing create_model()
2025-07-06 10:41:32,182:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:32,182:INFO:Checking exceptions
2025-07-06 10:41:32,182:INFO:Importing libraries
2025-07-06 10:41:32,182:INFO:Copying training dataset
2025-07-06 10:41:32,192:INFO:Defining folds
2025-07-06 10:41:32,192:INFO:Declaring metric variables
2025-07-06 10:41:32,195:INFO:Importing untrained model
2025-07-06 10:41:32,198:INFO:Naive Bayes Imported successfully
2025-07-06 10:41:32,204:INFO:Starting cross validation
2025-07-06 10:41:32,206:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:33,173:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,174:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,182:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,184:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,187:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,191:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,205:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,208:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,209:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,211:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,212:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,214:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,216:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,219:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,221:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,237:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,242:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,242:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,244:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,244:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,248:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,249:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,252:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,255:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,259:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,269:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,270:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,277:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,300:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:33,330:INFO:Calculating mean and std
2025-07-06 10:41:33,331:INFO:Creating metrics dataframe
2025-07-06 10:41:33,333:INFO:Uploading results into container
2025-07-06 10:41:33,334:INFO:Uploading model into container now
2025-07-06 10:41:33,334:INFO:_master_model_container: 3
2025-07-06 10:41:33,334:INFO:_display_container: 2
2025-07-06 10:41:33,335:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-06 10:41:33,335:INFO:create_model() successfully completed......................................
2025-07-06 10:41:33,391:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:33,392:INFO:Creating metrics dataframe
2025-07-06 10:41:33,399:INFO:Initializing Decision Tree Classifier
2025-07-06 10:41:33,399:INFO:Total runtime is 0.323299777507782 minutes
2025-07-06 10:41:33,401:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:33,402:INFO:Initializing create_model()
2025-07-06 10:41:33,402:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:33,402:INFO:Checking exceptions
2025-07-06 10:41:33,402:INFO:Importing libraries
2025-07-06 10:41:33,402:INFO:Copying training dataset
2025-07-06 10:41:33,413:INFO:Defining folds
2025-07-06 10:41:33,413:INFO:Declaring metric variables
2025-07-06 10:41:33,415:INFO:Importing untrained model
2025-07-06 10:41:33,418:INFO:Decision Tree Classifier Imported successfully
2025-07-06 10:41:33,423:INFO:Starting cross validation
2025-07-06 10:41:33,425:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:34,780:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,781:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,800:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,806:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,810:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,810:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,812:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,815:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,818:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,825:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,832:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,834:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,834:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,839:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,848:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,848:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,852:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,853:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,858:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,862:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,866:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,868:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,879:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,890:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,892:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,894:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,900:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,904:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,919:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:34,965:INFO:Calculating mean and std
2025-07-06 10:41:34,966:INFO:Creating metrics dataframe
2025-07-06 10:41:34,969:INFO:Uploading results into container
2025-07-06 10:41:34,969:INFO:Uploading model into container now
2025-07-06 10:41:34,970:INFO:_master_model_container: 4
2025-07-06 10:41:34,970:INFO:_display_container: 2
2025-07-06 10:41:34,970:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-07-06 10:41:34,970:INFO:create_model() successfully completed......................................
2025-07-06 10:41:35,042:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:35,042:INFO:Creating metrics dataframe
2025-07-06 10:41:35,050:INFO:Initializing SVM - Linear Kernel
2025-07-06 10:41:35,051:INFO:Total runtime is 0.35081911087036133 minutes
2025-07-06 10:41:35,054:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:35,054:INFO:Initializing create_model()
2025-07-06 10:41:35,054:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:35,055:INFO:Checking exceptions
2025-07-06 10:41:35,055:INFO:Importing libraries
2025-07-06 10:41:35,055:INFO:Copying training dataset
2025-07-06 10:41:35,069:INFO:Defining folds
2025-07-06 10:41:35,070:INFO:Declaring metric variables
2025-07-06 10:41:35,073:INFO:Importing untrained model
2025-07-06 10:41:35,078:INFO:SVM - Linear Kernel Imported successfully
2025-07-06 10:41:35,085:INFO:Starting cross validation
2025-07-06 10:41:35,092:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:36,483:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,503:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,507:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,528:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,541:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,555:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,608:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,621:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,635:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,637:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,638:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,642:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,663:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,664:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,668:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,668:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,669:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,693:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,694:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,695:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,701:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,704:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,708:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,718:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,742:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,742:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,766:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,773:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,795:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,814:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:36,845:INFO:Calculating mean and std
2025-07-06 10:41:36,846:INFO:Creating metrics dataframe
2025-07-06 10:41:36,848:INFO:Uploading results into container
2025-07-06 10:41:36,848:INFO:Uploading model into container now
2025-07-06 10:41:36,849:INFO:_master_model_container: 5
2025-07-06 10:41:36,849:INFO:_display_container: 2
2025-07-06 10:41:36,849:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-06 10:41:36,849:INFO:create_model() successfully completed......................................
2025-07-06 10:41:36,910:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:36,910:INFO:Creating metrics dataframe
2025-07-06 10:41:36,917:INFO:Initializing Ridge Classifier
2025-07-06 10:41:36,917:INFO:Total runtime is 0.38192996978759763 minutes
2025-07-06 10:41:36,920:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:36,920:INFO:Initializing create_model()
2025-07-06 10:41:36,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:36,920:INFO:Checking exceptions
2025-07-06 10:41:36,920:INFO:Importing libraries
2025-07-06 10:41:36,921:INFO:Copying training dataset
2025-07-06 10:41:36,932:INFO:Defining folds
2025-07-06 10:41:36,932:INFO:Declaring metric variables
2025-07-06 10:41:36,935:INFO:Importing untrained model
2025-07-06 10:41:36,938:INFO:Ridge Classifier Imported successfully
2025-07-06 10:41:36,943:INFO:Starting cross validation
2025-07-06 10:41:36,947:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:37,859:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,880:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,894:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,900:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,901:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,907:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,909:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,924:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,926:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,933:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,934:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,939:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,940:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,942:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,942:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,944:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,947:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,959:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,959:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,964:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,969:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,971:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,976:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,980:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,984:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,998:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:37,999:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:38,002:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:38,043:INFO:Calculating mean and std
2025-07-06 10:41:38,044:INFO:Creating metrics dataframe
2025-07-06 10:41:38,046:INFO:Uploading results into container
2025-07-06 10:41:38,046:INFO:Uploading model into container now
2025-07-06 10:41:38,047:INFO:_master_model_container: 6
2025-07-06 10:41:38,047:INFO:_display_container: 2
2025-07-06 10:41:38,047:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-07-06 10:41:38,047:INFO:create_model() successfully completed......................................
2025-07-06 10:41:38,119:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:38,119:INFO:Creating metrics dataframe
2025-07-06 10:41:38,126:INFO:Initializing Random Forest Classifier
2025-07-06 10:41:38,126:INFO:Total runtime is 0.4020708322525024 minutes
2025-07-06 10:41:38,129:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:38,129:INFO:Initializing create_model()
2025-07-06 10:41:38,129:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:38,129:INFO:Checking exceptions
2025-07-06 10:41:38,130:INFO:Importing libraries
2025-07-06 10:41:38,130:INFO:Copying training dataset
2025-07-06 10:41:38,141:INFO:Defining folds
2025-07-06 10:41:38,141:INFO:Declaring metric variables
2025-07-06 10:41:38,144:INFO:Importing untrained model
2025-07-06 10:41:38,147:INFO:Random Forest Classifier Imported successfully
2025-07-06 10:41:38,153:INFO:Starting cross validation
2025-07-06 10:41:38,156:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:42,335:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,335:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,359:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,377:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,384:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,413:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,441:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,441:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,442:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,447:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,461:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,473:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,474:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,476:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,481:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,503:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,507:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,507:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,507:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,512:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,520:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,524:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,528:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,531:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,533:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,538:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,549:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,560:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,578:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:42,620:INFO:Calculating mean and std
2025-07-06 10:41:42,621:INFO:Creating metrics dataframe
2025-07-06 10:41:42,624:INFO:Uploading results into container
2025-07-06 10:41:42,624:INFO:Uploading model into container now
2025-07-06 10:41:42,625:INFO:_master_model_container: 7
2025-07-06 10:41:42,625:INFO:_display_container: 2
2025-07-06 10:41:42,625:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-07-06 10:41:42,626:INFO:create_model() successfully completed......................................
2025-07-06 10:41:42,696:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:42,696:INFO:Creating metrics dataframe
2025-07-06 10:41:42,705:INFO:Initializing Quadratic Discriminant Analysis
2025-07-06 10:41:42,705:INFO:Total runtime is 0.4783968130747477 minutes
2025-07-06 10:41:42,708:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:42,708:INFO:Initializing create_model()
2025-07-06 10:41:42,708:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:42,708:INFO:Checking exceptions
2025-07-06 10:41:42,709:INFO:Importing libraries
2025-07-06 10:41:42,709:INFO:Copying training dataset
2025-07-06 10:41:42,722:INFO:Defining folds
2025-07-06 10:41:42,722:INFO:Declaring metric variables
2025-07-06 10:41:42,725:INFO:Importing untrained model
2025-07-06 10:41:42,728:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-06 10:41:42,736:INFO:Starting cross validation
2025-07-06 10:41:42,738:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:43,795:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,813:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,833:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,872:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,888:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,900:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,912:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,914:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,952:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:43,960:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:41:44,003:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,012:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,016:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,034:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,042:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,042:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,050:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,060:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,061:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,062:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,069:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,073:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,079:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,084:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,086:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,090:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,098:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,098:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,101:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,118:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,118:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,125:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,133:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,136:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,142:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,149:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,151:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,166:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,174:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,194:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:44,238:INFO:Calculating mean and std
2025-07-06 10:41:44,238:INFO:Creating metrics dataframe
2025-07-06 10:41:44,241:INFO:Uploading results into container
2025-07-06 10:41:44,242:INFO:Uploading model into container now
2025-07-06 10:41:44,242:INFO:_master_model_container: 8
2025-07-06 10:41:44,242:INFO:_display_container: 2
2025-07-06 10:41:44,242:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-06 10:41:44,242:INFO:create_model() successfully completed......................................
2025-07-06 10:41:44,316:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:44,316:INFO:Creating metrics dataframe
2025-07-06 10:41:44,324:INFO:Initializing Ada Boost Classifier
2025-07-06 10:41:44,324:INFO:Total runtime is 0.5053699970245361 minutes
2025-07-06 10:41:44,327:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:44,327:INFO:Initializing create_model()
2025-07-06 10:41:44,327:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:44,328:INFO:Checking exceptions
2025-07-06 10:41:44,328:INFO:Importing libraries
2025-07-06 10:41:44,328:INFO:Copying training dataset
2025-07-06 10:41:44,340:INFO:Defining folds
2025-07-06 10:41:44,340:INFO:Declaring metric variables
2025-07-06 10:41:44,343:INFO:Importing untrained model
2025-07-06 10:41:44,346:INFO:Ada Boost Classifier Imported successfully
2025-07-06 10:41:44,352:INFO:Starting cross validation
2025-07-06 10:41:44,355:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:45,129:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,133:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,140:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,147:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,156:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,164:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,188:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,196:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,208:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:45,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:41:47,267:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,303:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,324:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,329:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,334:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,347:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,352:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,353:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,359:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,360:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,381:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,383:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,389:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,391:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,392:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,395:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,398:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,402:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,406:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,418:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,420:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,421:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,425:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,430:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,431:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,441:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,442:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,455:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,462:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,483:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:47,517:INFO:Calculating mean and std
2025-07-06 10:41:47,517:INFO:Creating metrics dataframe
2025-07-06 10:41:47,519:INFO:Uploading results into container
2025-07-06 10:41:47,520:INFO:Uploading model into container now
2025-07-06 10:41:47,520:INFO:_master_model_container: 9
2025-07-06 10:41:47,521:INFO:_display_container: 2
2025-07-06 10:41:47,521:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-07-06 10:41:47,521:INFO:create_model() successfully completed......................................
2025-07-06 10:41:47,580:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:47,580:INFO:Creating metrics dataframe
2025-07-06 10:41:47,588:INFO:Initializing Gradient Boosting Classifier
2025-07-06 10:41:47,588:INFO:Total runtime is 0.5597765366236369 minutes
2025-07-06 10:41:47,590:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:47,591:INFO:Initializing create_model()
2025-07-06 10:41:47,591:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:47,591:INFO:Checking exceptions
2025-07-06 10:41:47,591:INFO:Importing libraries
2025-07-06 10:41:47,591:INFO:Copying training dataset
2025-07-06 10:41:47,602:INFO:Defining folds
2025-07-06 10:41:47,602:INFO:Declaring metric variables
2025-07-06 10:41:47,605:INFO:Importing untrained model
2025-07-06 10:41:47,607:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 10:41:47,612:INFO:Starting cross validation
2025-07-06 10:41:47,615:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:54,953:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:54,975:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:54,988:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,000:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,028:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,041:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,066:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,068:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,091:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,110:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,113:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,121:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,123:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,135:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,137:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,142:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,152:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,156:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,162:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,165:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,166:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,174:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,180:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,182:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,198:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,211:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,235:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,237:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:55,273:INFO:Calculating mean and std
2025-07-06 10:41:55,274:INFO:Creating metrics dataframe
2025-07-06 10:41:55,276:INFO:Uploading results into container
2025-07-06 10:41:55,277:INFO:Uploading model into container now
2025-07-06 10:41:55,277:INFO:_master_model_container: 10
2025-07-06 10:41:55,277:INFO:_display_container: 2
2025-07-06 10:41:55,278:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 10:41:55,278:INFO:create_model() successfully completed......................................
2025-07-06 10:41:55,341:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:55,341:INFO:Creating metrics dataframe
2025-07-06 10:41:55,349:INFO:Initializing Linear Discriminant Analysis
2025-07-06 10:41:55,349:INFO:Total runtime is 0.6891332626342774 minutes
2025-07-06 10:41:55,351:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:55,352:INFO:Initializing create_model()
2025-07-06 10:41:55,352:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:55,352:INFO:Checking exceptions
2025-07-06 10:41:55,352:INFO:Importing libraries
2025-07-06 10:41:55,352:INFO:Copying training dataset
2025-07-06 10:41:55,363:INFO:Defining folds
2025-07-06 10:41:55,363:INFO:Declaring metric variables
2025-07-06 10:41:55,366:INFO:Importing untrained model
2025-07-06 10:41:55,369:INFO:Linear Discriminant Analysis Imported successfully
2025-07-06 10:41:55,374:INFO:Starting cross validation
2025-07-06 10:41:55,377:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:41:56,676:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,685:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,694:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,709:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,716:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,725:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,727:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,736:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,742:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,749:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,760:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,761:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,768:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,785:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,786:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,789:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,799:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,806:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,809:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,809:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,822:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,822:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,829:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,830:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,832:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,846:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,854:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,855:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,857:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,881:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:41:56,927:INFO:Calculating mean and std
2025-07-06 10:41:56,928:INFO:Creating metrics dataframe
2025-07-06 10:41:56,930:INFO:Uploading results into container
2025-07-06 10:41:56,931:INFO:Uploading model into container now
2025-07-06 10:41:56,932:INFO:_master_model_container: 11
2025-07-06 10:41:56,932:INFO:_display_container: 2
2025-07-06 10:41:56,932:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-06 10:41:56,932:INFO:create_model() successfully completed......................................
2025-07-06 10:41:57,001:INFO:SubProcess create_model() end ==================================
2025-07-06 10:41:57,001:INFO:Creating metrics dataframe
2025-07-06 10:41:57,009:INFO:Initializing Extra Trees Classifier
2025-07-06 10:41:57,010:INFO:Total runtime is 0.7168081641197206 minutes
2025-07-06 10:41:57,013:INFO:SubProcess create_model() called ==================================
2025-07-06 10:41:57,013:INFO:Initializing create_model()
2025-07-06 10:41:57,013:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:41:57,013:INFO:Checking exceptions
2025-07-06 10:41:57,014:INFO:Importing libraries
2025-07-06 10:41:57,014:INFO:Copying training dataset
2025-07-06 10:41:57,026:INFO:Defining folds
2025-07-06 10:41:57,026:INFO:Declaring metric variables
2025-07-06 10:41:57,029:INFO:Importing untrained model
2025-07-06 10:41:57,032:INFO:Extra Trees Classifier Imported successfully
2025-07-06 10:41:57,039:INFO:Starting cross validation
2025-07-06 10:41:57,041:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:42:01,454:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,454:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,455:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,484:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,507:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,509:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,515:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,544:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,555:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,572:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,578:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,605:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,624:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,625:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,626:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,648:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,655:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,658:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,663:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,663:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,668:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,674:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,680:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,684:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,690:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,690:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,699:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,708:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,717:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,740:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:01,783:INFO:Calculating mean and std
2025-07-06 10:42:01,784:INFO:Creating metrics dataframe
2025-07-06 10:42:01,786:INFO:Uploading results into container
2025-07-06 10:42:01,787:INFO:Uploading model into container now
2025-07-06 10:42:01,787:INFO:_master_model_container: 12
2025-07-06 10:42:01,787:INFO:_display_container: 2
2025-07-06 10:42:01,788:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-07-06 10:42:01,788:INFO:create_model() successfully completed......................................
2025-07-06 10:42:01,853:INFO:SubProcess create_model() end ==================================
2025-07-06 10:42:01,854:INFO:Creating metrics dataframe
2025-07-06 10:42:01,861:INFO:Initializing Light Gradient Boosting Machine
2025-07-06 10:42:01,861:INFO:Total runtime is 0.7976583917935691 minutes
2025-07-06 10:42:01,864:INFO:SubProcess create_model() called ==================================
2025-07-06 10:42:01,864:INFO:Initializing create_model()
2025-07-06 10:42:01,864:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:42:01,864:INFO:Checking exceptions
2025-07-06 10:42:01,864:INFO:Importing libraries
2025-07-06 10:42:01,864:INFO:Copying training dataset
2025-07-06 10:42:01,874:INFO:Defining folds
2025-07-06 10:42:01,874:INFO:Declaring metric variables
2025-07-06 10:42:01,877:INFO:Importing untrained model
2025-07-06 10:42:01,881:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 10:42:01,887:INFO:Starting cross validation
2025-07-06 10:42:01,890:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:42:05,428:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,432:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,458:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,476:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,482:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,488:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,488:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,512:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,525:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,530:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,538:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,541:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,545:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,577:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,579:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,584:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,623:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,662:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,701:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,737:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,777:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,812:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,814:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,844:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,846:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,881:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:05,998:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:06,030:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:06,060:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:06,108:INFO:Calculating mean and std
2025-07-06 10:42:06,109:INFO:Creating metrics dataframe
2025-07-06 10:42:06,111:INFO:Uploading results into container
2025-07-06 10:42:06,112:INFO:Uploading model into container now
2025-07-06 10:42:06,112:INFO:_master_model_container: 13
2025-07-06 10:42:06,112:INFO:_display_container: 2
2025-07-06 10:42:06,113:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 10:42:06,113:INFO:create_model() successfully completed......................................
2025-07-06 10:42:06,176:INFO:SubProcess create_model() end ==================================
2025-07-06 10:42:06,176:INFO:Creating metrics dataframe
2025-07-06 10:42:06,185:INFO:Initializing Dummy Classifier
2025-07-06 10:42:06,185:INFO:Total runtime is 0.8697278062502545 minutes
2025-07-06 10:42:06,188:INFO:SubProcess create_model() called ==================================
2025-07-06 10:42:06,188:INFO:Initializing create_model()
2025-07-06 10:42:06,188:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210AAAB7790>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:42:06,188:INFO:Checking exceptions
2025-07-06 10:42:06,188:INFO:Importing libraries
2025-07-06 10:42:06,188:INFO:Copying training dataset
2025-07-06 10:42:06,200:INFO:Defining folds
2025-07-06 10:42:06,200:INFO:Declaring metric variables
2025-07-06 10:42:06,203:INFO:Importing untrained model
2025-07-06 10:42:06,205:INFO:Dummy Classifier Imported successfully
2025-07-06 10:42:06,210:INFO:Starting cross validation
2025-07-06 10:42:06,213:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:42:06,998:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,021:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,039:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,055:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,055:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,058:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,073:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,077:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,081:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,084:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,096:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,098:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,098:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,101:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,104:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,106:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,106:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,107:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,110:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,112:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,118:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,121:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,124:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,126:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,129:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,137:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,142:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,142:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,144:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,146:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,153:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,153:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,159:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,161:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,164:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,170:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,172:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,174:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:42:07,182:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,191:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:42:07,235:INFO:Calculating mean and std
2025-07-06 10:42:07,236:INFO:Creating metrics dataframe
2025-07-06 10:42:07,238:INFO:Uploading results into container
2025-07-06 10:42:07,239:INFO:Uploading model into container now
2025-07-06 10:42:07,240:INFO:_master_model_container: 14
2025-07-06 10:42:07,240:INFO:_display_container: 2
2025-07-06 10:42:07,240:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-07-06 10:42:07,240:INFO:create_model() successfully completed......................................
2025-07-06 10:42:07,299:INFO:SubProcess create_model() end ==================================
2025-07-06 10:42:07,299:INFO:Creating metrics dataframe
2025-07-06 10:42:07,308:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-06 10:42:07,315:INFO:Initializing create_model()
2025-07-06 10:42:07,315:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:42:07,315:INFO:Checking exceptions
2025-07-06 10:42:07,316:INFO:Importing libraries
2025-07-06 10:42:07,316:INFO:Copying training dataset
2025-07-06 10:42:07,326:INFO:Defining folds
2025-07-06 10:42:07,326:INFO:Declaring metric variables
2025-07-06 10:42:07,327:INFO:Importing untrained model
2025-07-06 10:42:07,327:INFO:Declaring custom model
2025-07-06 10:42:07,328:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 10:42:07,330:INFO:Cross validation set to False
2025-07-06 10:42:07,330:INFO:Fitting Model
2025-07-06 10:42:07,722:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 10:42:07,726:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001025 seconds.
2025-07-06 10:42:07,726:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 10:42:07,726:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 10:42:07,727:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 10:42:07,727:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 10:42:07,728:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 10:42:07,728:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 10:42:07,890:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 10:42:07,890:INFO:create_model() successfully completed......................................
2025-07-06 10:42:08,004:INFO:_master_model_container: 14
2025-07-06 10:42:08,005:INFO:_display_container: 2
2025-07-06 10:42:08,005:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 10:42:08,006:INFO:compare_models() successfully completed......................................
2025-07-06 10:55:40,374:INFO:Initializing tune_model()
2025-07-06 10:55:40,374:INFO:tune_model(estimator=lightgbm, fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>)
2025-07-06 10:55:40,374:INFO:Checking exceptions
2025-07-06 10:56:34,150:INFO:Initializing compare_models()
2025-07-06 10:56:34,150:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-06 10:56:34,150:INFO:Checking exceptions
2025-07-06 10:56:34,161:INFO:Preparing display monitor
2025-07-06 10:56:34,190:INFO:Initializing Logistic Regression
2025-07-06 10:56:34,190:INFO:Total runtime is 0.0 minutes
2025-07-06 10:56:34,194:INFO:SubProcess create_model() called ==================================
2025-07-06 10:56:34,194:INFO:Initializing create_model()
2025-07-06 10:56:34,194:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:56:34,194:INFO:Checking exceptions
2025-07-06 10:56:34,194:INFO:Importing libraries
2025-07-06 10:56:34,195:INFO:Copying training dataset
2025-07-06 10:56:34,208:INFO:Defining folds
2025-07-06 10:56:34,208:INFO:Declaring metric variables
2025-07-06 10:56:34,212:INFO:Importing untrained model
2025-07-06 10:56:34,216:INFO:Logistic Regression Imported successfully
2025-07-06 10:56:34,223:INFO:Starting cross validation
2025-07-06 10:56:34,227:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:56:45,192:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,206:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,260:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,284:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,298:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,314:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,321:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,325:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,341:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,344:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,357:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,358:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,376:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,378:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,395:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,400:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,400:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,408:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,424:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,443:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,446:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,447:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,448:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,461:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,467:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,474:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 10:56:45,478:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,480:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,491:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,500:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,500:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,502:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,522:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,525:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,528:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,582:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,607:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,628:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:45,662:INFO:Calculating mean and std
2025-07-06 10:56:45,663:INFO:Creating metrics dataframe
2025-07-06 10:56:45,665:INFO:Uploading results into container
2025-07-06 10:56:45,666:INFO:Uploading model into container now
2025-07-06 10:56:45,666:INFO:_master_model_container: 15
2025-07-06 10:56:45,666:INFO:_display_container: 3
2025-07-06 10:56:45,667:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-06 10:56:45,667:INFO:create_model() successfully completed......................................
2025-07-06 10:56:45,751:INFO:SubProcess create_model() end ==================================
2025-07-06 10:56:45,751:INFO:Creating metrics dataframe
2025-07-06 10:56:45,757:INFO:Initializing K Neighbors Classifier
2025-07-06 10:56:45,757:INFO:Total runtime is 0.1927768349647522 minutes
2025-07-06 10:56:45,760:INFO:SubProcess create_model() called ==================================
2025-07-06 10:56:45,760:INFO:Initializing create_model()
2025-07-06 10:56:45,761:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:56:45,761:INFO:Checking exceptions
2025-07-06 10:56:45,761:INFO:Importing libraries
2025-07-06 10:56:45,761:INFO:Copying training dataset
2025-07-06 10:56:45,773:INFO:Defining folds
2025-07-06 10:56:45,774:INFO:Declaring metric variables
2025-07-06 10:56:45,777:INFO:Importing untrained model
2025-07-06 10:56:45,781:INFO:K Neighbors Classifier Imported successfully
2025-07-06 10:56:45,786:INFO:Starting cross validation
2025-07-06 10:56:45,789:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:56:50,831:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:50,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:50,894:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:50,929:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:50,952:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:50,959:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:50,982:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:50,983:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:50,984:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,009:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,012:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,047:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,048:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,057:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,078:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,083:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,085:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,109:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,110:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,112:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,127:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,135:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,151:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,174:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,175:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,198:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,220:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,278:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,296:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,314:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:51,351:INFO:Calculating mean and std
2025-07-06 10:56:51,353:INFO:Creating metrics dataframe
2025-07-06 10:56:51,355:INFO:Uploading results into container
2025-07-06 10:56:51,355:INFO:Uploading model into container now
2025-07-06 10:56:51,356:INFO:_master_model_container: 16
2025-07-06 10:56:51,356:INFO:_display_container: 3
2025-07-06 10:56:51,356:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-06 10:56:51,356:INFO:create_model() successfully completed......................................
2025-07-06 10:56:51,432:INFO:SubProcess create_model() end ==================================
2025-07-06 10:56:51,432:INFO:Creating metrics dataframe
2025-07-06 10:56:51,439:INFO:Initializing Naive Bayes
2025-07-06 10:56:51,439:INFO:Total runtime is 0.28747353951136273 minutes
2025-07-06 10:56:51,442:INFO:SubProcess create_model() called ==================================
2025-07-06 10:56:51,442:INFO:Initializing create_model()
2025-07-06 10:56:51,442:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:56:51,442:INFO:Checking exceptions
2025-07-06 10:56:51,442:INFO:Importing libraries
2025-07-06 10:56:51,442:INFO:Copying training dataset
2025-07-06 10:56:51,456:INFO:Defining folds
2025-07-06 10:56:51,456:INFO:Declaring metric variables
2025-07-06 10:56:51,459:INFO:Importing untrained model
2025-07-06 10:56:51,463:INFO:Naive Bayes Imported successfully
2025-07-06 10:56:51,470:INFO:Starting cross validation
2025-07-06 10:56:51,473:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:56:52,401:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,405:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,415:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,425:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,427:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,430:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,433:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,436:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,439:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,446:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,448:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,455:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,459:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,466:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,469:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,472:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,474:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,475:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,475:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,477:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,489:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,495:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,504:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,505:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,508:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,513:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,532:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,540:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:52,578:INFO:Calculating mean and std
2025-07-06 10:56:52,579:INFO:Creating metrics dataframe
2025-07-06 10:56:52,581:INFO:Uploading results into container
2025-07-06 10:56:52,582:INFO:Uploading model into container now
2025-07-06 10:56:52,582:INFO:_master_model_container: 17
2025-07-06 10:56:52,582:INFO:_display_container: 3
2025-07-06 10:56:52,582:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-06 10:56:52,583:INFO:create_model() successfully completed......................................
2025-07-06 10:56:52,665:INFO:SubProcess create_model() end ==================================
2025-07-06 10:56:52,665:INFO:Creating metrics dataframe
2025-07-06 10:56:52,671:INFO:Initializing Decision Tree Classifier
2025-07-06 10:56:52,671:INFO:Total runtime is 0.3080155730247498 minutes
2025-07-06 10:56:52,674:INFO:SubProcess create_model() called ==================================
2025-07-06 10:56:52,674:INFO:Initializing create_model()
2025-07-06 10:56:52,674:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:56:52,674:INFO:Checking exceptions
2025-07-06 10:56:52,674:INFO:Importing libraries
2025-07-06 10:56:52,674:INFO:Copying training dataset
2025-07-06 10:56:52,686:INFO:Defining folds
2025-07-06 10:56:52,686:INFO:Declaring metric variables
2025-07-06 10:56:52,689:INFO:Importing untrained model
2025-07-06 10:56:52,692:INFO:Decision Tree Classifier Imported successfully
2025-07-06 10:56:52,698:INFO:Starting cross validation
2025-07-06 10:56:52,701:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:56:53,914:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:53,947:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:53,987:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,003:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,011:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,019:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,029:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,034:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,038:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,042:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,046:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,049:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,056:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,058:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,063:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,066:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,067:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,069:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,074:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,074:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,081:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,082:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,089:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,093:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,095:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,103:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,108:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:54,163:INFO:Calculating mean and std
2025-07-06 10:56:54,164:INFO:Creating metrics dataframe
2025-07-06 10:56:54,166:INFO:Uploading results into container
2025-07-06 10:56:54,166:INFO:Uploading model into container now
2025-07-06 10:56:54,167:INFO:_master_model_container: 18
2025-07-06 10:56:54,167:INFO:_display_container: 3
2025-07-06 10:56:54,167:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-07-06 10:56:54,167:INFO:create_model() successfully completed......................................
2025-07-06 10:56:54,241:INFO:SubProcess create_model() end ==================================
2025-07-06 10:56:54,241:INFO:Creating metrics dataframe
2025-07-06 10:56:54,248:INFO:Initializing SVM - Linear Kernel
2025-07-06 10:56:54,248:INFO:Total runtime is 0.3342991352081299 minutes
2025-07-06 10:56:54,251:INFO:SubProcess create_model() called ==================================
2025-07-06 10:56:54,251:INFO:Initializing create_model()
2025-07-06 10:56:54,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:56:54,252:INFO:Checking exceptions
2025-07-06 10:56:54,252:INFO:Importing libraries
2025-07-06 10:56:54,252:INFO:Copying training dataset
2025-07-06 10:56:54,264:INFO:Defining folds
2025-07-06 10:56:54,265:INFO:Declaring metric variables
2025-07-06 10:56:54,268:INFO:Importing untrained model
2025-07-06 10:56:54,271:INFO:SVM - Linear Kernel Imported successfully
2025-07-06 10:56:54,276:INFO:Starting cross validation
2025-07-06 10:56:54,280:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:56:55,468:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,494:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,516:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,544:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,574:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,595:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,648:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,655:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,673:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,677:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,681:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,700:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,702:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,705:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,706:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,713:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,716:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,718:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,724:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,730:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,731:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,743:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,748:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,754:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,755:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,776:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,779:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,796:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,821:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,838:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:55,872:INFO:Calculating mean and std
2025-07-06 10:56:55,873:INFO:Creating metrics dataframe
2025-07-06 10:56:55,875:INFO:Uploading results into container
2025-07-06 10:56:55,875:INFO:Uploading model into container now
2025-07-06 10:56:55,876:INFO:_master_model_container: 19
2025-07-06 10:56:55,876:INFO:_display_container: 3
2025-07-06 10:56:55,876:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-06 10:56:55,876:INFO:create_model() successfully completed......................................
2025-07-06 10:56:55,950:INFO:SubProcess create_model() end ==================================
2025-07-06 10:56:55,997:INFO:Creating metrics dataframe
2025-07-06 10:56:56,005:INFO:Initializing Ridge Classifier
2025-07-06 10:56:56,005:INFO:Total runtime is 0.3635711789131165 minutes
2025-07-06 10:56:56,008:INFO:SubProcess create_model() called ==================================
2025-07-06 10:56:56,008:INFO:Initializing create_model()
2025-07-06 10:56:56,008:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:56:56,008:INFO:Checking exceptions
2025-07-06 10:56:56,008:INFO:Importing libraries
2025-07-06 10:56:56,008:INFO:Copying training dataset
2025-07-06 10:56:56,021:INFO:Defining folds
2025-07-06 10:56:56,021:INFO:Declaring metric variables
2025-07-06 10:56:56,025:INFO:Importing untrained model
2025-07-06 10:56:56,029:INFO:Ridge Classifier Imported successfully
2025-07-06 10:56:56,038:INFO:Starting cross validation
2025-07-06 10:56:56,041:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:56:56,885:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,919:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,948:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,955:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,959:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,960:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,975:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,985:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,986:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,989:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,993:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:56,994:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,007:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,008:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,018:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,020:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,022:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,022:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,027:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,031:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,031:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,041:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,042:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,046:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,057:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,064:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,068:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,072:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,085:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:56:57,128:INFO:Calculating mean and std
2025-07-06 10:56:57,129:INFO:Creating metrics dataframe
2025-07-06 10:56:57,131:INFO:Uploading results into container
2025-07-06 10:56:57,132:INFO:Uploading model into container now
2025-07-06 10:56:57,132:INFO:_master_model_container: 20
2025-07-06 10:56:57,132:INFO:_display_container: 3
2025-07-06 10:56:57,132:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-07-06 10:56:57,133:INFO:create_model() successfully completed......................................
2025-07-06 10:56:57,214:INFO:SubProcess create_model() end ==================================
2025-07-06 10:56:57,215:INFO:Creating metrics dataframe
2025-07-06 10:56:57,222:INFO:Initializing Random Forest Classifier
2025-07-06 10:56:57,222:INFO:Total runtime is 0.38385362625122077 minutes
2025-07-06 10:56:57,225:INFO:SubProcess create_model() called ==================================
2025-07-06 10:56:57,226:INFO:Initializing create_model()
2025-07-06 10:56:57,226:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:56:57,226:INFO:Checking exceptions
2025-07-06 10:56:57,226:INFO:Importing libraries
2025-07-06 10:56:57,226:INFO:Copying training dataset
2025-07-06 10:56:57,239:INFO:Defining folds
2025-07-06 10:56:57,239:INFO:Declaring metric variables
2025-07-06 10:56:57,242:INFO:Importing untrained model
2025-07-06 10:56:57,245:INFO:Random Forest Classifier Imported successfully
2025-07-06 10:56:57,250:INFO:Starting cross validation
2025-07-06 10:56:57,253:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:57:01,485:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,486:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,504:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,506:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,508:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,528:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,530:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,551:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,553:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,555:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,575:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,576:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,596:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,597:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,598:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,614:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,656:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,659:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,664:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,672:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,681:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,684:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,690:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,696:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,707:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,708:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,713:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,722:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,742:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,766:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:01,804:INFO:Calculating mean and std
2025-07-06 10:57:01,805:INFO:Creating metrics dataframe
2025-07-06 10:57:01,807:INFO:Uploading results into container
2025-07-06 10:57:01,808:INFO:Uploading model into container now
2025-07-06 10:57:01,808:INFO:_master_model_container: 21
2025-07-06 10:57:01,809:INFO:_display_container: 3
2025-07-06 10:57:01,809:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-07-06 10:57:01,809:INFO:create_model() successfully completed......................................
2025-07-06 10:57:01,903:INFO:SubProcess create_model() end ==================================
2025-07-06 10:57:01,903:INFO:Creating metrics dataframe
2025-07-06 10:57:01,913:INFO:Initializing Quadratic Discriminant Analysis
2025-07-06 10:57:01,913:INFO:Total runtime is 0.4620455980300904 minutes
2025-07-06 10:57:01,916:INFO:SubProcess create_model() called ==================================
2025-07-06 10:57:01,916:INFO:Initializing create_model()
2025-07-06 10:57:01,917:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:57:01,917:INFO:Checking exceptions
2025-07-06 10:57:01,917:INFO:Importing libraries
2025-07-06 10:57:01,917:INFO:Copying training dataset
2025-07-06 10:57:01,932:INFO:Defining folds
2025-07-06 10:57:01,932:INFO:Declaring metric variables
2025-07-06 10:57:01,936:INFO:Importing untrained model
2025-07-06 10:57:01,940:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-06 10:57:01,948:INFO:Starting cross validation
2025-07-06 10:57:01,952:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:57:03,241:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,261:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,315:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,330:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,360:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,385:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,386:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,406:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,416:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,432:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 10:57:03,487:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,490:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,525:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,525:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,530:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,535:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,561:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,563:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,566:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,572:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,575:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,577:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,584:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,589:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,591:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,595:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,598:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,603:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,615:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,618:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,625:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,625:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,627:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,627:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,645:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,652:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,656:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,660:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,664:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,679:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:03,730:INFO:Calculating mean and std
2025-07-06 10:57:03,732:INFO:Creating metrics dataframe
2025-07-06 10:57:03,734:INFO:Uploading results into container
2025-07-06 10:57:03,734:INFO:Uploading model into container now
2025-07-06 10:57:03,735:INFO:_master_model_container: 22
2025-07-06 10:57:03,735:INFO:_display_container: 3
2025-07-06 10:57:03,735:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-06 10:57:03,735:INFO:create_model() successfully completed......................................
2025-07-06 10:57:03,816:INFO:SubProcess create_model() end ==================================
2025-07-06 10:57:03,816:INFO:Creating metrics dataframe
2025-07-06 10:57:03,823:INFO:Initializing Ada Boost Classifier
2025-07-06 10:57:03,823:INFO:Total runtime is 0.4938809196154277 minutes
2025-07-06 10:57:03,826:INFO:SubProcess create_model() called ==================================
2025-07-06 10:57:03,827:INFO:Initializing create_model()
2025-07-06 10:57:03,827:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:57:03,827:INFO:Checking exceptions
2025-07-06 10:57:03,827:INFO:Importing libraries
2025-07-06 10:57:03,827:INFO:Copying training dataset
2025-07-06 10:57:03,839:INFO:Defining folds
2025-07-06 10:57:03,839:INFO:Declaring metric variables
2025-07-06 10:57:03,842:INFO:Importing untrained model
2025-07-06 10:57:03,844:INFO:Ada Boost Classifier Imported successfully
2025-07-06 10:57:03,850:INFO:Starting cross validation
2025-07-06 10:57:03,852:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:57:04,552:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,560:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,571:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,601:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,613:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,613:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,623:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,642:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,652:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:04,668:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 10:57:06,680:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,683:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,712:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,720:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,744:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,746:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,758:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,763:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,764:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,779:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,786:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,794:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,796:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,805:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,808:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,817:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,825:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,826:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,830:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,840:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,842:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,858:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,862:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,864:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,881:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,888:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,912:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,934:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,955:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:06,991:INFO:Calculating mean and std
2025-07-06 10:57:06,993:INFO:Creating metrics dataframe
2025-07-06 10:57:06,995:INFO:Uploading results into container
2025-07-06 10:57:06,995:INFO:Uploading model into container now
2025-07-06 10:57:06,996:INFO:_master_model_container: 23
2025-07-06 10:57:06,996:INFO:_display_container: 3
2025-07-06 10:57:06,996:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-07-06 10:57:06,996:INFO:create_model() successfully completed......................................
2025-07-06 10:57:07,074:INFO:SubProcess create_model() end ==================================
2025-07-06 10:57:07,075:INFO:Creating metrics dataframe
2025-07-06 10:57:07,083:INFO:Initializing Gradient Boosting Classifier
2025-07-06 10:57:07,083:INFO:Total runtime is 0.5482029557228089 minutes
2025-07-06 10:57:07,086:INFO:SubProcess create_model() called ==================================
2025-07-06 10:57:07,086:INFO:Initializing create_model()
2025-07-06 10:57:07,086:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:57:07,086:INFO:Checking exceptions
2025-07-06 10:57:07,087:INFO:Importing libraries
2025-07-06 10:57:07,087:INFO:Copying training dataset
2025-07-06 10:57:07,101:INFO:Defining folds
2025-07-06 10:57:07,101:INFO:Declaring metric variables
2025-07-06 10:57:07,105:INFO:Importing untrained model
2025-07-06 10:57:07,108:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 10:57:07,115:INFO:Starting cross validation
2025-07-06 10:57:07,118:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:57:14,614:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,639:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,643:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,659:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,663:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,669:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,678:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,686:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,699:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,713:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,726:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,733:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,737:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,748:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,759:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,767:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,770:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,773:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,782:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,790:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,791:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,794:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,798:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,800:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,814:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,815:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,822:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,827:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,836:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,851:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:14,884:INFO:Calculating mean and std
2025-07-06 10:57:14,885:INFO:Creating metrics dataframe
2025-07-06 10:57:14,887:INFO:Uploading results into container
2025-07-06 10:57:14,887:INFO:Uploading model into container now
2025-07-06 10:57:14,888:INFO:_master_model_container: 24
2025-07-06 10:57:14,888:INFO:_display_container: 3
2025-07-06 10:57:14,888:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 10:57:14,888:INFO:create_model() successfully completed......................................
2025-07-06 10:57:14,959:INFO:SubProcess create_model() end ==================================
2025-07-06 10:57:14,959:INFO:Creating metrics dataframe
2025-07-06 10:57:14,967:INFO:Initializing Linear Discriminant Analysis
2025-07-06 10:57:14,967:INFO:Total runtime is 0.6796004891395568 minutes
2025-07-06 10:57:14,970:INFO:SubProcess create_model() called ==================================
2025-07-06 10:57:14,970:INFO:Initializing create_model()
2025-07-06 10:57:14,970:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:57:14,970:INFO:Checking exceptions
2025-07-06 10:57:14,970:INFO:Importing libraries
2025-07-06 10:57:14,970:INFO:Copying training dataset
2025-07-06 10:57:14,980:INFO:Defining folds
2025-07-06 10:57:14,980:INFO:Declaring metric variables
2025-07-06 10:57:14,983:INFO:Importing untrained model
2025-07-06 10:57:14,985:INFO:Linear Discriminant Analysis Imported successfully
2025-07-06 10:57:14,992:INFO:Starting cross validation
2025-07-06 10:57:14,995:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:57:16,190:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,228:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,249:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,266:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,272:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,277:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,282:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,311:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,312:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,314:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,327:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,334:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,340:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,341:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,357:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,357:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,360:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,366:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,372:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,372:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,378:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,390:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,392:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,398:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,402:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,403:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,405:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,422:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,428:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,434:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:16,469:INFO:Calculating mean and std
2025-07-06 10:57:16,469:INFO:Creating metrics dataframe
2025-07-06 10:57:16,472:INFO:Uploading results into container
2025-07-06 10:57:16,473:INFO:Uploading model into container now
2025-07-06 10:57:16,473:INFO:_master_model_container: 25
2025-07-06 10:57:16,473:INFO:_display_container: 3
2025-07-06 10:57:16,473:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-06 10:57:16,473:INFO:create_model() successfully completed......................................
2025-07-06 10:57:16,550:INFO:SubProcess create_model() end ==================================
2025-07-06 10:57:16,550:INFO:Creating metrics dataframe
2025-07-06 10:57:16,558:INFO:Initializing Extra Trees Classifier
2025-07-06 10:57:16,559:INFO:Total runtime is 0.7061425765355428 minutes
2025-07-06 10:57:16,562:INFO:SubProcess create_model() called ==================================
2025-07-06 10:57:16,562:INFO:Initializing create_model()
2025-07-06 10:57:16,562:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:57:16,562:INFO:Checking exceptions
2025-07-06 10:57:16,562:INFO:Importing libraries
2025-07-06 10:57:16,562:INFO:Copying training dataset
2025-07-06 10:57:16,573:INFO:Defining folds
2025-07-06 10:57:16,573:INFO:Declaring metric variables
2025-07-06 10:57:16,576:INFO:Importing untrained model
2025-07-06 10:57:16,579:INFO:Extra Trees Classifier Imported successfully
2025-07-06 10:57:16,585:INFO:Starting cross validation
2025-07-06 10:57:16,588:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:57:21,070:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,090:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,101:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,147:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,176:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,188:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,224:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,243:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,246:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,247:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,251:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,286:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,286:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,289:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,290:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,291:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,299:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,314:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,318:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,321:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,324:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,325:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,327:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,329:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,339:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,349:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,349:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,363:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,365:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:21,403:INFO:Calculating mean and std
2025-07-06 10:57:21,404:INFO:Creating metrics dataframe
2025-07-06 10:57:21,408:INFO:Uploading results into container
2025-07-06 10:57:21,409:INFO:Uploading model into container now
2025-07-06 10:57:21,410:INFO:_master_model_container: 26
2025-07-06 10:57:21,410:INFO:_display_container: 3
2025-07-06 10:57:21,410:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-07-06 10:57:21,411:INFO:create_model() successfully completed......................................
2025-07-06 10:57:21,504:INFO:SubProcess create_model() end ==================================
2025-07-06 10:57:21,505:INFO:Creating metrics dataframe
2025-07-06 10:57:21,516:INFO:Initializing Light Gradient Boosting Machine
2025-07-06 10:57:21,516:INFO:Total runtime is 0.7887614687283834 minutes
2025-07-06 10:57:21,519:INFO:SubProcess create_model() called ==================================
2025-07-06 10:57:21,520:INFO:Initializing create_model()
2025-07-06 10:57:21,520:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:57:21,520:INFO:Checking exceptions
2025-07-06 10:57:21,520:INFO:Importing libraries
2025-07-06 10:57:21,520:INFO:Copying training dataset
2025-07-06 10:57:21,535:INFO:Defining folds
2025-07-06 10:57:21,535:INFO:Declaring metric variables
2025-07-06 10:57:21,540:INFO:Importing untrained model
2025-07-06 10:57:21,544:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 10:57:21,551:INFO:Starting cross validation
2025-07-06 10:57:21,554:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:57:24,679:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:24,713:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:24,752:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,195:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,207:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,230:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,236:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,248:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,255:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,255:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,276:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,278:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,292:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,299:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,301:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,319:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,339:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,494:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,523:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,531:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,535:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,565:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,569:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,575:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,606:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,610:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,775:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,811:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,849:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:25,897:INFO:Calculating mean and std
2025-07-06 10:57:25,898:INFO:Creating metrics dataframe
2025-07-06 10:57:25,900:INFO:Uploading results into container
2025-07-06 10:57:25,900:INFO:Uploading model into container now
2025-07-06 10:57:25,901:INFO:_master_model_container: 27
2025-07-06 10:57:25,901:INFO:_display_container: 3
2025-07-06 10:57:25,902:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 10:57:25,902:INFO:create_model() successfully completed......................................
2025-07-06 10:57:25,980:INFO:SubProcess create_model() end ==================================
2025-07-06 10:57:25,980:INFO:Creating metrics dataframe
2025-07-06 10:57:25,989:INFO:Initializing Dummy Classifier
2025-07-06 10:57:25,990:INFO:Total runtime is 0.8633303642272949 minutes
2025-07-06 10:57:25,993:INFO:SubProcess create_model() called ==================================
2025-07-06 10:57:25,993:INFO:Initializing create_model()
2025-07-06 10:57:25,994:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62F80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:57:25,994:INFO:Checking exceptions
2025-07-06 10:57:25,994:INFO:Importing libraries
2025-07-06 10:57:25,994:INFO:Copying training dataset
2025-07-06 10:57:26,006:INFO:Defining folds
2025-07-06 10:57:26,007:INFO:Declaring metric variables
2025-07-06 10:57:26,010:INFO:Importing untrained model
2025-07-06 10:57:26,013:INFO:Dummy Classifier Imported successfully
2025-07-06 10:57:26,019:INFO:Starting cross validation
2025-07-06 10:57:26,021:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 10:57:26,868:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,883:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,890:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,903:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,906:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,909:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,916:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,924:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,929:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,930:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,931:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,934:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,935:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,938:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,943:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,944:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,950:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,950:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,950:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,954:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,955:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,957:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,958:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,961:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,966:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,967:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,970:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,971:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,973:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,979:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,982:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,984:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,984:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:26,988:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,990:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:26,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:27,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 10:57:27,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:27,008:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:27,022:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 10:57:27,061:INFO:Calculating mean and std
2025-07-06 10:57:27,062:INFO:Creating metrics dataframe
2025-07-06 10:57:27,064:INFO:Uploading results into container
2025-07-06 10:57:27,064:INFO:Uploading model into container now
2025-07-06 10:57:27,065:INFO:_master_model_container: 28
2025-07-06 10:57:27,065:INFO:_display_container: 3
2025-07-06 10:57:27,065:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-07-06 10:57:27,065:INFO:create_model() successfully completed......................................
2025-07-06 10:57:27,138:INFO:SubProcess create_model() end ==================================
2025-07-06 10:57:27,138:INFO:Creating metrics dataframe
2025-07-06 10:57:27,148:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-06 10:57:27,154:INFO:Initializing create_model()
2025-07-06 10:57:27,154:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 10:57:27,154:INFO:Checking exceptions
2025-07-06 10:57:27,155:INFO:Importing libraries
2025-07-06 10:57:27,155:INFO:Copying training dataset
2025-07-06 10:57:27,166:INFO:Defining folds
2025-07-06 10:57:27,166:INFO:Declaring metric variables
2025-07-06 10:57:27,166:INFO:Importing untrained model
2025-07-06 10:57:27,166:INFO:Declaring custom model
2025-07-06 10:57:27,167:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 10:57:27,169:INFO:Cross validation set to False
2025-07-06 10:57:27,169:INFO:Fitting Model
2025-07-06 10:57:27,551:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 10:57:27,556:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001202 seconds.
2025-07-06 10:57:27,556:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 10:57:27,556:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 10:57:27,557:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 10:57:27,557:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 10:57:27,557:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 10:57:27,557:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 10:57:27,709:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 10:57:27,709:INFO:create_model() successfully completed......................................
2025-07-06 10:57:27,829:INFO:_master_model_container: 28
2025-07-06 10:57:27,829:INFO:_display_container: 3
2025-07-06 10:57:27,830:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 10:57:27,830:INFO:compare_models() successfully completed......................................
2025-07-06 11:01:12,515:INFO:Initializing tune_model()
2025-07-06 11:01:12,515:INFO:tune_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>)
2025-07-06 11:01:12,515:INFO:Checking exceptions
2025-07-06 11:01:12,536:INFO:Copying training dataset
2025-07-06 11:01:12,546:INFO:Checking base model
2025-07-06 11:01:12,546:INFO:Base model : Light Gradient Boosting Machine
2025-07-06 11:01:12,550:INFO:Declaring metric variables
2025-07-06 11:01:12,553:INFO:Defining Hyperparameters
2025-07-06 11:01:12,634:INFO:Tuning with n_jobs=-1
2025-07-06 11:01:12,635:INFO:Initializing RandomizedSearchCV
2025-07-06 11:02:06,316:INFO:best_params: {'actual_estimator__reg_lambda': 0.1, 'actual_estimator__reg_alpha': 0.0001, 'actual_estimator__num_leaves': 10, 'actual_estimator__n_estimators': 180, 'actual_estimator__min_split_gain': 0.7, 'actual_estimator__min_child_samples': 96, 'actual_estimator__learning_rate': 0.05, 'actual_estimator__feature_fraction': 0.9, 'actual_estimator__bagging_freq': 4, 'actual_estimator__bagging_fraction': 0.6}
2025-07-06 11:02:06,317:INFO:Hyperparameter search completed
2025-07-06 11:02:06,317:INFO:SubProcess create_model() called ==================================
2025-07-06 11:02:06,319:INFO:Initializing create_model()
2025-07-06 11:02:06,319:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210FCC62CE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_lambda': 0.1, 'reg_alpha': 0.0001, 'num_leaves': 10, 'n_estimators': 180, 'min_split_gain': 0.7, 'min_child_samples': 96, 'learning_rate': 0.05, 'feature_fraction': 0.9, 'bagging_freq': 4, 'bagging_fraction': 0.6})
2025-07-06 11:02:06,319:INFO:Checking exceptions
2025-07-06 11:02:06,319:INFO:Importing libraries
2025-07-06 11:02:06,320:INFO:Copying training dataset
2025-07-06 11:02:06,337:INFO:Defining folds
2025-07-06 11:02:06,337:INFO:Declaring metric variables
2025-07-06 11:02:06,341:INFO:Importing untrained model
2025-07-06 11:02:06,341:INFO:Declaring custom model
2025-07-06 11:02:06,347:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:02:06,355:INFO:Starting cross validation
2025-07-06 11:02:06,358:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:02:09,063:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,093:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,101:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,157:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,162:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,167:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,180:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,181:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,208:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,218:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,219:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,234:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,251:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,257:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,257:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,266:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,285:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,294:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,311:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,324:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,336:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,352:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,423:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,451:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,477:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,553:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,579:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,607:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:09,655:INFO:Calculating mean and std
2025-07-06 11:02:09,656:INFO:Creating metrics dataframe
2025-07-06 11:02:09,661:INFO:Finalizing model
2025-07-06 11:02:10,084:INFO:[LightGBM] [Warning] feature_fraction is set=0.9, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.9
2025-07-06 11:02:10,084:INFO:[LightGBM] [Warning] bagging_fraction is set=0.6, subsample=1.0 will be ignored. Current value: bagging_fraction=0.6
2025-07-06 11:02:10,084:INFO:[LightGBM] [Warning] bagging_freq is set=4, subsample_freq=0 will be ignored. Current value: bagging_freq=4
2025-07-06 11:02:10,106:INFO:[LightGBM] [Warning] feature_fraction is set=0.9, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.9
2025-07-06 11:02:10,106:INFO:[LightGBM] [Warning] bagging_fraction is set=0.6, subsample=1.0 will be ignored. Current value: bagging_fraction=0.6
2025-07-06 11:02:10,106:INFO:[LightGBM] [Warning] bagging_freq is set=4, subsample_freq=0 will be ignored. Current value: bagging_freq=4
2025-07-06 11:02:10,106:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 11:02:10,112:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001552 seconds.
2025-07-06 11:02:10,112:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:02:10,112:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:02:10,112:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 11:02:10,112:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 11:02:10,113:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 11:02:10,113:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 11:02:10,390:INFO:Uploading results into container
2025-07-06 11:02:10,391:INFO:Uploading model into container now
2025-07-06 11:02:10,392:INFO:_master_model_container: 29
2025-07-06 11:02:10,393:INFO:_display_container: 4
2025-07-06 11:02:10,394:INFO:LGBMClassifier(bagging_fraction=0.6, bagging_freq=4, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,
               importance_type='split', learning_rate=0.05, max_depth=-1,
               min_child_samples=96, min_child_weight=0.001, min_split_gain=0.7,
               n_estimators=180, n_jobs=-1, num_leaves=10, objective=None,
               random_state=123, reg_alpha=0.0001, reg_lambda=0.1,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:02:10,394:INFO:create_model() successfully completed......................................
2025-07-06 11:02:10,504:INFO:SubProcess create_model() end ==================================
2025-07-06 11:02:10,504:INFO:choose_better activated
2025-07-06 11:02:10,507:INFO:SubProcess create_model() called ==================================
2025-07-06 11:02:10,508:INFO:Initializing create_model()
2025-07-06 11:02:10,508:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:02:10,508:INFO:Checking exceptions
2025-07-06 11:02:10,511:INFO:Importing libraries
2025-07-06 11:02:10,511:INFO:Copying training dataset
2025-07-06 11:02:10,523:INFO:Defining folds
2025-07-06 11:02:10,523:INFO:Declaring metric variables
2025-07-06 11:02:10,523:INFO:Importing untrained model
2025-07-06 11:02:10,524:INFO:Declaring custom model
2025-07-06 11:02:10,525:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:02:10,525:INFO:Starting cross validation
2025-07-06 11:02:10,527:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:02:14,266:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,271:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,278:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,297:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,312:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,315:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,325:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,326:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,326:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,329:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,339:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,352:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,354:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,358:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,369:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,370:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,370:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,373:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,380:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,397:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,410:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,414:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,417:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,437:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,678:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,693:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,715:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,729:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,750:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,760:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:02:14,799:INFO:Calculating mean and std
2025-07-06 11:02:14,799:INFO:Creating metrics dataframe
2025-07-06 11:02:14,801:INFO:Finalizing model
2025-07-06 11:02:15,185:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 11:02:15,190:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001359 seconds.
2025-07-06 11:02:15,190:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:02:15,190:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:02:15,190:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 11:02:15,190:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 11:02:15,191:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 11:02:15,191:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 11:02:15,349:INFO:Uploading results into container
2025-07-06 11:02:15,349:INFO:Uploading model into container now
2025-07-06 11:02:15,350:INFO:_master_model_container: 30
2025-07-06 11:02:15,350:INFO:_display_container: 5
2025-07-06 11:02:15,351:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:02:15,351:INFO:create_model() successfully completed......................................
2025-07-06 11:02:15,453:INFO:SubProcess create_model() end ==================================
2025-07-06 11:02:15,454:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9076
2025-07-06 11:02:15,455:INFO:LGBMClassifier(bagging_fraction=0.6, bagging_freq=4, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,
               importance_type='split', learning_rate=0.05, max_depth=-1,
               min_child_samples=96, min_child_weight=0.001, min_split_gain=0.7,
               n_estimators=180, n_jobs=-1, num_leaves=10, objective=None,
               random_state=123, reg_alpha=0.0001, reg_lambda=0.1,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9072
2025-07-06 11:02:15,455:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) is best model
2025-07-06 11:02:15,455:INFO:choose_better completed
2025-07-06 11:02:15,455:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-07-06 11:02:15,464:INFO:_master_model_container: 30
2025-07-06 11:02:15,464:INFO:_display_container: 4
2025-07-06 11:02:15,465:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:02:15,465:INFO:tune_model() successfully completed......................................
2025-07-06 11:02:57,665:INFO:Initializing compare_models()
2025-07-06 11:02:57,666:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-06 11:02:57,667:INFO:Checking exceptions
2025-07-06 11:02:57,672:INFO:Preparing display monitor
2025-07-06 11:02:57,692:INFO:Initializing Logistic Regression
2025-07-06 11:02:57,692:INFO:Total runtime is 0.0 minutes
2025-07-06 11:02:57,695:INFO:SubProcess create_model() called ==================================
2025-07-06 11:02:57,696:INFO:Initializing create_model()
2025-07-06 11:02:57,696:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:02:57,696:INFO:Checking exceptions
2025-07-06 11:02:57,696:INFO:Importing libraries
2025-07-06 11:02:57,696:INFO:Copying training dataset
2025-07-06 11:02:57,709:INFO:Defining folds
2025-07-06 11:02:57,709:INFO:Declaring metric variables
2025-07-06 11:02:57,712:INFO:Importing untrained model
2025-07-06 11:02:57,714:INFO:Logistic Regression Imported successfully
2025-07-06 11:02:57,720:INFO:Starting cross validation
2025-07-06 11:02:57,723:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:05,791:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:05,855:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:05,920:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:05,944:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:05,968:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:05,982:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:05,991:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:05,995:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:06,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:06,016:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:06,023:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:06,024:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,032:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:06,058:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,087:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:06,089:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:03:06,102:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,109:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,114:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,126:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,131:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,132:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,134:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,137:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,149:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,151:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,155:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,157:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,158:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,163:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,176:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,180:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,184:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,184:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,185:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,194:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,217:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,217:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,238:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,238:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:06,274:INFO:Calculating mean and std
2025-07-06 11:03:06,275:INFO:Creating metrics dataframe
2025-07-06 11:03:06,277:INFO:Uploading results into container
2025-07-06 11:03:06,277:INFO:Uploading model into container now
2025-07-06 11:03:06,277:INFO:_master_model_container: 31
2025-07-06 11:03:06,277:INFO:_display_container: 5
2025-07-06 11:03:06,277:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-06 11:03:06,277:INFO:create_model() successfully completed......................................
2025-07-06 11:03:06,354:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:06,354:INFO:Creating metrics dataframe
2025-07-06 11:03:06,360:INFO:Initializing K Neighbors Classifier
2025-07-06 11:03:06,360:INFO:Total runtime is 0.14447755813598634 minutes
2025-07-06 11:03:06,363:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:06,363:INFO:Initializing create_model()
2025-07-06 11:03:06,364:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:06,364:INFO:Checking exceptions
2025-07-06 11:03:06,364:INFO:Importing libraries
2025-07-06 11:03:06,364:INFO:Copying training dataset
2025-07-06 11:03:06,377:INFO:Defining folds
2025-07-06 11:03:06,377:INFO:Declaring metric variables
2025-07-06 11:03:06,380:INFO:Importing untrained model
2025-07-06 11:03:06,384:INFO:K Neighbors Classifier Imported successfully
2025-07-06 11:03:06,389:INFO:Starting cross validation
2025-07-06 11:03:06,392:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:09,251:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,289:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,330:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,331:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,356:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,379:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,380:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,401:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,419:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,422:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,430:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,454:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,459:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,470:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,486:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,496:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,499:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,499:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,523:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,526:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,535:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,542:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,550:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,556:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,558:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,565:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,573:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,578:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,587:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,599:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:09,641:INFO:Calculating mean and std
2025-07-06 11:03:09,642:INFO:Creating metrics dataframe
2025-07-06 11:03:09,644:INFO:Uploading results into container
2025-07-06 11:03:09,644:INFO:Uploading model into container now
2025-07-06 11:03:09,644:INFO:_master_model_container: 32
2025-07-06 11:03:09,645:INFO:_display_container: 5
2025-07-06 11:03:09,645:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-06 11:03:09,645:INFO:create_model() successfully completed......................................
2025-07-06 11:03:09,720:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:09,720:INFO:Creating metrics dataframe
2025-07-06 11:03:09,727:INFO:Initializing Naive Bayes
2025-07-06 11:03:09,727:INFO:Total runtime is 0.20059505303700767 minutes
2025-07-06 11:03:09,730:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:09,731:INFO:Initializing create_model()
2025-07-06 11:03:09,731:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:09,731:INFO:Checking exceptions
2025-07-06 11:03:09,731:INFO:Importing libraries
2025-07-06 11:03:09,732:INFO:Copying training dataset
2025-07-06 11:03:09,743:INFO:Defining folds
2025-07-06 11:03:09,743:INFO:Declaring metric variables
2025-07-06 11:03:09,746:INFO:Importing untrained model
2025-07-06 11:03:09,750:INFO:Naive Bayes Imported successfully
2025-07-06 11:03:09,755:INFO:Starting cross validation
2025-07-06 11:03:09,757:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:10,610:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,629:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,642:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,661:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,662:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,668:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,672:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,676:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,684:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,687:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,693:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,693:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,701:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,703:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,712:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,714:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,716:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,724:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,726:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,730:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,730:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,737:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,742:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,744:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,749:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,749:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,760:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,768:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,780:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,789:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:10,824:INFO:Calculating mean and std
2025-07-06 11:03:10,825:INFO:Creating metrics dataframe
2025-07-06 11:03:10,828:INFO:Uploading results into container
2025-07-06 11:03:10,828:INFO:Uploading model into container now
2025-07-06 11:03:10,829:INFO:_master_model_container: 33
2025-07-06 11:03:10,829:INFO:_display_container: 5
2025-07-06 11:03:10,829:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-06 11:03:10,829:INFO:create_model() successfully completed......................................
2025-07-06 11:03:10,905:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:10,905:INFO:Creating metrics dataframe
2025-07-06 11:03:10,913:INFO:Initializing Decision Tree Classifier
2025-07-06 11:03:10,913:INFO:Total runtime is 0.22035421530405683 minutes
2025-07-06 11:03:10,916:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:10,916:INFO:Initializing create_model()
2025-07-06 11:03:10,916:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:10,917:INFO:Checking exceptions
2025-07-06 11:03:10,917:INFO:Importing libraries
2025-07-06 11:03:10,917:INFO:Copying training dataset
2025-07-06 11:03:10,930:INFO:Defining folds
2025-07-06 11:03:10,930:INFO:Declaring metric variables
2025-07-06 11:03:10,933:INFO:Importing untrained model
2025-07-06 11:03:10,937:INFO:Decision Tree Classifier Imported successfully
2025-07-06 11:03:10,942:INFO:Starting cross validation
2025-07-06 11:03:10,944:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:12,109:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,143:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,167:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,207:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,211:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,213:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,217:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,230:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,233:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,240:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,240:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,240:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,241:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,242:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,246:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,253:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,257:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,263:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,264:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,267:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,274:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,276:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,280:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,282:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,282:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,286:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,302:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,305:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,310:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:12,354:INFO:Calculating mean and std
2025-07-06 11:03:12,356:INFO:Creating metrics dataframe
2025-07-06 11:03:12,358:INFO:Uploading results into container
2025-07-06 11:03:12,358:INFO:Uploading model into container now
2025-07-06 11:03:12,358:INFO:_master_model_container: 34
2025-07-06 11:03:12,359:INFO:_display_container: 5
2025-07-06 11:03:12,359:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-07-06 11:03:12,359:INFO:create_model() successfully completed......................................
2025-07-06 11:03:12,430:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:12,430:INFO:Creating metrics dataframe
2025-07-06 11:03:12,438:INFO:Initializing SVM - Linear Kernel
2025-07-06 11:03:12,439:INFO:Total runtime is 0.24579196770985923 minutes
2025-07-06 11:03:12,441:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:12,441:INFO:Initializing create_model()
2025-07-06 11:03:12,441:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:12,442:INFO:Checking exceptions
2025-07-06 11:03:12,442:INFO:Importing libraries
2025-07-06 11:03:12,442:INFO:Copying training dataset
2025-07-06 11:03:12,453:INFO:Defining folds
2025-07-06 11:03:12,453:INFO:Declaring metric variables
2025-07-06 11:03:12,456:INFO:Importing untrained model
2025-07-06 11:03:12,458:INFO:SVM - Linear Kernel Imported successfully
2025-07-06 11:03:12,464:INFO:Starting cross validation
2025-07-06 11:03:12,468:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:13,598:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,630:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,659:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,676:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,710:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,730:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,737:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,740:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,745:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,759:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,765:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,768:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,772:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,787:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,788:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,791:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,795:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,816:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,826:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,834:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,849:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,855:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,856:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,859:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,872:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,878:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,880:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,883:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,893:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,901:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:13,944:INFO:Calculating mean and std
2025-07-06 11:03:13,944:INFO:Creating metrics dataframe
2025-07-06 11:03:13,946:INFO:Uploading results into container
2025-07-06 11:03:13,947:INFO:Uploading model into container now
2025-07-06 11:03:13,947:INFO:_master_model_container: 35
2025-07-06 11:03:13,947:INFO:_display_container: 5
2025-07-06 11:03:13,948:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-06 11:03:13,948:INFO:create_model() successfully completed......................................
2025-07-06 11:03:14,019:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:14,021:INFO:Creating metrics dataframe
2025-07-06 11:03:14,027:INFO:Initializing Ridge Classifier
2025-07-06 11:03:14,027:INFO:Total runtime is 0.27224983771642053 minutes
2025-07-06 11:03:14,029:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:14,030:INFO:Initializing create_model()
2025-07-06 11:03:14,030:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:14,030:INFO:Checking exceptions
2025-07-06 11:03:14,030:INFO:Importing libraries
2025-07-06 11:03:14,030:INFO:Copying training dataset
2025-07-06 11:03:14,041:INFO:Defining folds
2025-07-06 11:03:14,042:INFO:Declaring metric variables
2025-07-06 11:03:14,044:INFO:Importing untrained model
2025-07-06 11:03:14,045:INFO:Ridge Classifier Imported successfully
2025-07-06 11:03:14,051:INFO:Starting cross validation
2025-07-06 11:03:14,054:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:14,918:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,928:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,929:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,937:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,942:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,948:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,955:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,964:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,966:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,968:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,976:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,979:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,979:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,981:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,985:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,992:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,996:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:14,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,002:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,004:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,017:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,017:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,023:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,028:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,040:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,041:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,049:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,053:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:15,101:INFO:Calculating mean and std
2025-07-06 11:03:15,102:INFO:Creating metrics dataframe
2025-07-06 11:03:15,104:INFO:Uploading results into container
2025-07-06 11:03:15,105:INFO:Uploading model into container now
2025-07-06 11:03:15,105:INFO:_master_model_container: 36
2025-07-06 11:03:15,105:INFO:_display_container: 5
2025-07-06 11:03:15,106:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-07-06 11:03:15,106:INFO:create_model() successfully completed......................................
2025-07-06 11:03:15,182:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:15,182:INFO:Creating metrics dataframe
2025-07-06 11:03:15,190:INFO:Initializing Random Forest Classifier
2025-07-06 11:03:15,190:INFO:Total runtime is 0.2916391770044963 minutes
2025-07-06 11:03:15,193:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:15,193:INFO:Initializing create_model()
2025-07-06 11:03:15,193:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:15,193:INFO:Checking exceptions
2025-07-06 11:03:15,193:INFO:Importing libraries
2025-07-06 11:03:15,193:INFO:Copying training dataset
2025-07-06 11:03:15,205:INFO:Defining folds
2025-07-06 11:03:15,206:INFO:Declaring metric variables
2025-07-06 11:03:15,208:INFO:Importing untrained model
2025-07-06 11:03:15,211:INFO:Random Forest Classifier Imported successfully
2025-07-06 11:03:15,217:INFO:Starting cross validation
2025-07-06 11:03:15,220:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:19,358:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,380:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,398:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,410:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,420:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,433:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,455:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,476:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,493:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,502:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,503:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,514:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,514:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,514:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,536:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,542:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,543:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,544:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,544:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,550:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,550:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,561:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,571:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,574:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,576:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,579:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,579:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,580:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,610:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,612:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:19,662:INFO:Calculating mean and std
2025-07-06 11:03:19,663:INFO:Creating metrics dataframe
2025-07-06 11:03:19,665:INFO:Uploading results into container
2025-07-06 11:03:19,665:INFO:Uploading model into container now
2025-07-06 11:03:19,666:INFO:_master_model_container: 37
2025-07-06 11:03:19,666:INFO:_display_container: 5
2025-07-06 11:03:19,666:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-07-06 11:03:19,666:INFO:create_model() successfully completed......................................
2025-07-06 11:03:19,746:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:19,747:INFO:Creating metrics dataframe
2025-07-06 11:03:19,754:INFO:Initializing Quadratic Discriminant Analysis
2025-07-06 11:03:19,754:INFO:Total runtime is 0.3677032113075257 minutes
2025-07-06 11:03:19,757:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:19,757:INFO:Initializing create_model()
2025-07-06 11:03:19,757:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:19,758:INFO:Checking exceptions
2025-07-06 11:03:19,758:INFO:Importing libraries
2025-07-06 11:03:19,758:INFO:Copying training dataset
2025-07-06 11:03:19,770:INFO:Defining folds
2025-07-06 11:03:19,770:INFO:Declaring metric variables
2025-07-06 11:03:19,773:INFO:Importing untrained model
2025-07-06 11:03:19,776:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-06 11:03:19,781:INFO:Starting cross validation
2025-07-06 11:03:19,784:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:20,720:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,812:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,824:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,845:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,846:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,886:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,909:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,910:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,920:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:20,922:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,928:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:03:20,958:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:20,985:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:20,996:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,007:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,009:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,015:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,026:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,044:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,045:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,048:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,059:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,068:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,069:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,071:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,080:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,081:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,084:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,087:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,099:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,106:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,109:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,110:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,110:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,121:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,135:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,136:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,143:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,147:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:21,187:INFO:Calculating mean and std
2025-07-06 11:03:21,188:INFO:Creating metrics dataframe
2025-07-06 11:03:21,190:INFO:Uploading results into container
2025-07-06 11:03:21,191:INFO:Uploading model into container now
2025-07-06 11:03:21,191:INFO:_master_model_container: 38
2025-07-06 11:03:21,191:INFO:_display_container: 5
2025-07-06 11:03:21,192:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-06 11:03:21,192:INFO:create_model() successfully completed......................................
2025-07-06 11:03:21,265:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:21,265:INFO:Creating metrics dataframe
2025-07-06 11:03:21,274:INFO:Initializing Ada Boost Classifier
2025-07-06 11:03:21,274:INFO:Total runtime is 0.39304817120234176 minutes
2025-07-06 11:03:21,276:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:21,276:INFO:Initializing create_model()
2025-07-06 11:03:21,276:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:21,277:INFO:Checking exceptions
2025-07-06 11:03:21,277:INFO:Importing libraries
2025-07-06 11:03:21,277:INFO:Copying training dataset
2025-07-06 11:03:21,289:INFO:Defining folds
2025-07-06 11:03:21,289:INFO:Declaring metric variables
2025-07-06 11:03:21,292:INFO:Importing untrained model
2025-07-06 11:03:21,295:INFO:Ada Boost Classifier Imported successfully
2025-07-06 11:03:21,300:INFO:Starting cross validation
2025-07-06 11:03:21,303:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:21,998:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,001:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,036:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,058:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,069:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,076:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,084:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,086:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,088:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:22,093:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:03:24,201:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,208:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,217:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,224:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,230:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,248:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,249:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,251:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,251:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,260:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,266:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,272:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,274:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,278:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,284:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,286:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,289:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,291:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,299:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,300:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,300:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,302:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,314:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,322:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,324:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,326:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,327:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,335:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,350:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,352:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:24,397:INFO:Calculating mean and std
2025-07-06 11:03:24,398:INFO:Creating metrics dataframe
2025-07-06 11:03:24,400:INFO:Uploading results into container
2025-07-06 11:03:24,400:INFO:Uploading model into container now
2025-07-06 11:03:24,401:INFO:_master_model_container: 39
2025-07-06 11:03:24,401:INFO:_display_container: 5
2025-07-06 11:03:24,401:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-07-06 11:03:24,401:INFO:create_model() successfully completed......................................
2025-07-06 11:03:24,474:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:24,474:INFO:Creating metrics dataframe
2025-07-06 11:03:24,483:INFO:Initializing Gradient Boosting Classifier
2025-07-06 11:03:24,483:INFO:Total runtime is 0.4465172727902731 minutes
2025-07-06 11:03:24,486:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:24,486:INFO:Initializing create_model()
2025-07-06 11:03:24,486:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:24,486:INFO:Checking exceptions
2025-07-06 11:03:24,486:INFO:Importing libraries
2025-07-06 11:03:24,486:INFO:Copying training dataset
2025-07-06 11:03:24,497:INFO:Defining folds
2025-07-06 11:03:24,497:INFO:Declaring metric variables
2025-07-06 11:03:24,500:INFO:Importing untrained model
2025-07-06 11:03:24,502:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 11:03:24,509:INFO:Starting cross validation
2025-07-06 11:03:24,511:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:32,160:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,189:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,195:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,195:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,198:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,215:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,219:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,225:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,231:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,231:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,239:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,243:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,243:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,258:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,266:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,268:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,270:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,271:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,284:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,304:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,304:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,311:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,313:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,320:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,338:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,339:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,345:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,350:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,362:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,369:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:32,406:INFO:Calculating mean and std
2025-07-06 11:03:32,406:INFO:Creating metrics dataframe
2025-07-06 11:03:32,409:INFO:Uploading results into container
2025-07-06 11:03:32,409:INFO:Uploading model into container now
2025-07-06 11:03:32,410:INFO:_master_model_container: 40
2025-07-06 11:03:32,410:INFO:_display_container: 5
2025-07-06 11:03:32,410:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 11:03:32,410:INFO:create_model() successfully completed......................................
2025-07-06 11:03:32,488:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:32,489:INFO:Creating metrics dataframe
2025-07-06 11:03:32,496:INFO:Initializing Linear Discriminant Analysis
2025-07-06 11:03:32,496:INFO:Total runtime is 0.58007124265035 minutes
2025-07-06 11:03:32,499:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:32,499:INFO:Initializing create_model()
2025-07-06 11:03:32,500:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:32,500:INFO:Checking exceptions
2025-07-06 11:03:32,500:INFO:Importing libraries
2025-07-06 11:03:32,500:INFO:Copying training dataset
2025-07-06 11:03:32,511:INFO:Defining folds
2025-07-06 11:03:32,511:INFO:Declaring metric variables
2025-07-06 11:03:32,513:INFO:Importing untrained model
2025-07-06 11:03:32,517:INFO:Linear Discriminant Analysis Imported successfully
2025-07-06 11:03:32,523:INFO:Starting cross validation
2025-07-06 11:03:32,525:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:33,834:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,844:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,848:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,873:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,881:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,885:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,886:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,891:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,897:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,904:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,924:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,926:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,935:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,944:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,944:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,949:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,951:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,964:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,970:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,971:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,972:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,975:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,975:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,995:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,995:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:33,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:34,003:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:34,020:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:34,058:INFO:Calculating mean and std
2025-07-06 11:03:34,058:INFO:Creating metrics dataframe
2025-07-06 11:03:34,061:INFO:Uploading results into container
2025-07-06 11:03:34,062:INFO:Uploading model into container now
2025-07-06 11:03:34,062:INFO:_master_model_container: 41
2025-07-06 11:03:34,062:INFO:_display_container: 5
2025-07-06 11:03:34,063:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-06 11:03:34,063:INFO:create_model() successfully completed......................................
2025-07-06 11:03:34,142:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:34,143:INFO:Creating metrics dataframe
2025-07-06 11:03:34,151:INFO:Initializing Extra Trees Classifier
2025-07-06 11:03:34,151:INFO:Total runtime is 0.6076601425806682 minutes
2025-07-06 11:03:34,154:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:34,154:INFO:Initializing create_model()
2025-07-06 11:03:34,154:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:34,154:INFO:Checking exceptions
2025-07-06 11:03:34,155:INFO:Importing libraries
2025-07-06 11:03:34,155:INFO:Copying training dataset
2025-07-06 11:03:34,165:INFO:Defining folds
2025-07-06 11:03:34,166:INFO:Declaring metric variables
2025-07-06 11:03:34,168:INFO:Importing untrained model
2025-07-06 11:03:34,172:INFO:Extra Trees Classifier Imported successfully
2025-07-06 11:03:34,177:INFO:Starting cross validation
2025-07-06 11:03:34,179:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:38,358:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,447:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,463:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,481:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,482:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,483:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,485:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,492:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,506:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,515:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,517:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,522:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,524:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,524:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,526:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,528:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,533:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,541:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,551:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,552:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,556:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,559:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,566:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,568:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,589:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,592:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,656:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,680:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,703:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:38,748:INFO:Calculating mean and std
2025-07-06 11:03:38,750:INFO:Creating metrics dataframe
2025-07-06 11:03:38,752:INFO:Uploading results into container
2025-07-06 11:03:38,753:INFO:Uploading model into container now
2025-07-06 11:03:38,754:INFO:_master_model_container: 42
2025-07-06 11:03:38,754:INFO:_display_container: 5
2025-07-06 11:03:38,754:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-07-06 11:03:38,754:INFO:create_model() successfully completed......................................
2025-07-06 11:03:38,839:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:38,840:INFO:Creating metrics dataframe
2025-07-06 11:03:38,849:INFO:Initializing Light Gradient Boosting Machine
2025-07-06 11:03:38,849:INFO:Total runtime is 0.6859535694122316 minutes
2025-07-06 11:03:38,852:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:38,853:INFO:Initializing create_model()
2025-07-06 11:03:38,853:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:38,853:INFO:Checking exceptions
2025-07-06 11:03:38,853:INFO:Importing libraries
2025-07-06 11:03:38,853:INFO:Copying training dataset
2025-07-06 11:03:38,865:INFO:Defining folds
2025-07-06 11:03:38,865:INFO:Declaring metric variables
2025-07-06 11:03:38,868:INFO:Importing untrained model
2025-07-06 11:03:38,872:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:03:38,877:INFO:Starting cross validation
2025-07-06 11:03:38,880:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:42,180:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,223:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,231:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,250:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,252:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,266:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,270:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,288:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,290:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,312:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,326:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,334:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,409:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,425:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,453:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,469:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,475:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,492:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,493:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,511:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,515:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,534:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,555:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,573:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,753:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,761:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,784:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,792:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,817:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,827:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:42,870:INFO:Calculating mean and std
2025-07-06 11:03:42,871:INFO:Creating metrics dataframe
2025-07-06 11:03:42,873:INFO:Uploading results into container
2025-07-06 11:03:42,874:INFO:Uploading model into container now
2025-07-06 11:03:42,874:INFO:_master_model_container: 43
2025-07-06 11:03:42,874:INFO:_display_container: 5
2025-07-06 11:03:42,875:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:03:42,875:INFO:create_model() successfully completed......................................
2025-07-06 11:03:42,949:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:42,949:INFO:Creating metrics dataframe
2025-07-06 11:03:42,959:INFO:Initializing Dummy Classifier
2025-07-06 11:03:42,959:INFO:Total runtime is 0.7544550299644472 minutes
2025-07-06 11:03:42,961:INFO:SubProcess create_model() called ==================================
2025-07-06 11:03:42,961:INFO:Initializing create_model()
2025-07-06 11:03:42,962:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080954820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:42,962:INFO:Checking exceptions
2025-07-06 11:03:42,962:INFO:Importing libraries
2025-07-06 11:03:42,962:INFO:Copying training dataset
2025-07-06 11:03:42,973:INFO:Defining folds
2025-07-06 11:03:42,974:INFO:Declaring metric variables
2025-07-06 11:03:42,976:INFO:Importing untrained model
2025-07-06 11:03:42,979:INFO:Dummy Classifier Imported successfully
2025-07-06 11:03:42,984:INFO:Starting cross validation
2025-07-06 11:03:42,987:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:03:43,788:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,811:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,818:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,818:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,828:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,842:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,842:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,843:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,844:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,845:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,852:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,866:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,870:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,873:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,876:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,877:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,883:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,883:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,884:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,888:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,895:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,896:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,899:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,899:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,905:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,910:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,910:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,911:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,914:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,916:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,916:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,921:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,924:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,926:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,938:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,940:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,940:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,951:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:43,957:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:03:43,967:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:03:44,006:INFO:Calculating mean and std
2025-07-06 11:03:44,007:INFO:Creating metrics dataframe
2025-07-06 11:03:44,009:INFO:Uploading results into container
2025-07-06 11:03:44,009:INFO:Uploading model into container now
2025-07-06 11:03:44,010:INFO:_master_model_container: 44
2025-07-06 11:03:44,010:INFO:_display_container: 5
2025-07-06 11:03:44,010:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-07-06 11:03:44,010:INFO:create_model() successfully completed......................................
2025-07-06 11:03:44,083:INFO:SubProcess create_model() end ==================================
2025-07-06 11:03:44,083:INFO:Creating metrics dataframe
2025-07-06 11:03:44,093:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-06 11:03:44,101:INFO:Initializing create_model()
2025-07-06 11:03:44,101:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:03:44,101:INFO:Checking exceptions
2025-07-06 11:03:44,103:INFO:Importing libraries
2025-07-06 11:03:44,103:INFO:Copying training dataset
2025-07-06 11:03:44,113:INFO:Defining folds
2025-07-06 11:03:44,113:INFO:Declaring metric variables
2025-07-06 11:03:44,113:INFO:Importing untrained model
2025-07-06 11:03:44,113:INFO:Declaring custom model
2025-07-06 11:03:44,114:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:03:44,117:INFO:Cross validation set to False
2025-07-06 11:03:44,117:INFO:Fitting Model
2025-07-06 11:03:44,508:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 11:03:44,513:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001632 seconds.
2025-07-06 11:03:44,513:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:03:44,513:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:03:44,514:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 11:03:44,514:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 11:03:44,514:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 11:03:44,514:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 11:03:44,677:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:03:44,677:INFO:create_model() successfully completed......................................
2025-07-06 11:03:44,798:INFO:_master_model_container: 44
2025-07-06 11:03:44,798:INFO:_display_container: 5
2025-07-06 11:03:44,799:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:03:44,799:INFO:compare_models() successfully completed......................................
2025-07-06 11:04:08,238:INFO:Initializing tune_model()
2025-07-06 11:04:08,239:INFO:tune_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>)
2025-07-06 11:04:08,239:INFO:Checking exceptions
2025-07-06 11:04:08,258:INFO:Copying training dataset
2025-07-06 11:04:08,267:INFO:Checking base model
2025-07-06 11:04:08,267:INFO:Base model : Light Gradient Boosting Machine
2025-07-06 11:04:08,271:INFO:Declaring metric variables
2025-07-06 11:04:08,274:INFO:Defining Hyperparameters
2025-07-06 11:04:08,368:INFO:Tuning with n_jobs=-1
2025-07-06 11:04:08,368:INFO:Initializing RandomizedSearchCV
2025-07-06 11:05:03,000:INFO:best_params: {'actual_estimator__reg_lambda': 0.1, 'actual_estimator__reg_alpha': 0.0001, 'actual_estimator__num_leaves': 10, 'actual_estimator__n_estimators': 180, 'actual_estimator__min_split_gain': 0.7, 'actual_estimator__min_child_samples': 96, 'actual_estimator__learning_rate': 0.05, 'actual_estimator__feature_fraction': 0.9, 'actual_estimator__bagging_freq': 4, 'actual_estimator__bagging_fraction': 0.6}
2025-07-06 11:05:03,002:INFO:Hyperparameter search completed
2025-07-06 11:05:03,002:INFO:SubProcess create_model() called ==================================
2025-07-06 11:05:03,004:INFO:Initializing create_model()
2025-07-06 11:05:03,004:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021080BB4F40>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_lambda': 0.1, 'reg_alpha': 0.0001, 'num_leaves': 10, 'n_estimators': 180, 'min_split_gain': 0.7, 'min_child_samples': 96, 'learning_rate': 0.05, 'feature_fraction': 0.9, 'bagging_freq': 4, 'bagging_fraction': 0.6})
2025-07-06 11:05:03,004:INFO:Checking exceptions
2025-07-06 11:05:03,004:INFO:Importing libraries
2025-07-06 11:05:03,004:INFO:Copying training dataset
2025-07-06 11:05:03,023:INFO:Defining folds
2025-07-06 11:05:03,023:INFO:Declaring metric variables
2025-07-06 11:05:03,028:INFO:Importing untrained model
2025-07-06 11:05:03,028:INFO:Declaring custom model
2025-07-06 11:05:03,034:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:05:03,045:INFO:Starting cross validation
2025-07-06 11:05:03,048:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:05:05,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,038:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,079:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,087:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,114:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,130:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,152:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,170:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,190:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,272:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,323:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,324:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,346:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,368:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,373:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,374:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,395:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,420:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,420:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,440:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,465:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,593:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,633:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,651:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,676:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,694:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,735:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,841:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,874:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,902:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:06,939:INFO:Calculating mean and std
2025-07-06 11:05:06,940:INFO:Creating metrics dataframe
2025-07-06 11:05:06,945:INFO:Finalizing model
2025-07-06 11:05:07,343:INFO:[LightGBM] [Warning] feature_fraction is set=0.9, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.9
2025-07-06 11:05:07,344:INFO:[LightGBM] [Warning] bagging_fraction is set=0.6, subsample=1.0 will be ignored. Current value: bagging_fraction=0.6
2025-07-06 11:05:07,344:INFO:[LightGBM] [Warning] bagging_freq is set=4, subsample_freq=0 will be ignored. Current value: bagging_freq=4
2025-07-06 11:05:07,368:INFO:[LightGBM] [Warning] feature_fraction is set=0.9, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.9
2025-07-06 11:05:07,368:INFO:[LightGBM] [Warning] bagging_fraction is set=0.6, subsample=1.0 will be ignored. Current value: bagging_fraction=0.6
2025-07-06 11:05:07,368:INFO:[LightGBM] [Warning] bagging_freq is set=4, subsample_freq=0 will be ignored. Current value: bagging_freq=4
2025-07-06 11:05:07,368:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 11:05:07,374:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001600 seconds.
2025-07-06 11:05:07,374:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:05:07,374:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:05:07,374:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 11:05:07,375:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 11:05:07,376:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 11:05:07,376:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 11:05:07,645:INFO:Uploading results into container
2025-07-06 11:05:07,646:INFO:Uploading model into container now
2025-07-06 11:05:07,646:INFO:_master_model_container: 45
2025-07-06 11:05:07,647:INFO:_display_container: 6
2025-07-06 11:05:07,648:INFO:LGBMClassifier(bagging_fraction=0.6, bagging_freq=4, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,
               importance_type='split', learning_rate=0.05, max_depth=-1,
               min_child_samples=96, min_child_weight=0.001, min_split_gain=0.7,
               n_estimators=180, n_jobs=-1, num_leaves=10, objective=None,
               random_state=123, reg_alpha=0.0001, reg_lambda=0.1,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:05:07,648:INFO:create_model() successfully completed......................................
2025-07-06 11:05:07,755:INFO:SubProcess create_model() end ==================================
2025-07-06 11:05:07,755:INFO:choose_better activated
2025-07-06 11:05:07,759:INFO:SubProcess create_model() called ==================================
2025-07-06 11:05:07,760:INFO:Initializing create_model()
2025-07-06 11:05:07,760:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:05:07,760:INFO:Checking exceptions
2025-07-06 11:05:07,762:INFO:Importing libraries
2025-07-06 11:05:07,762:INFO:Copying training dataset
2025-07-06 11:05:07,774:INFO:Defining folds
2025-07-06 11:05:07,774:INFO:Declaring metric variables
2025-07-06 11:05:07,774:INFO:Importing untrained model
2025-07-06 11:05:07,774:INFO:Declaring custom model
2025-07-06 11:05:07,776:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:05:07,776:INFO:Starting cross validation
2025-07-06 11:05:07,780:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:05:11,041:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,076:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,109:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,187:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,225:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,228:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,264:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,267:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,299:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,384:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,430:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,444:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,453:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,474:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,477:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,488:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,489:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,499:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,503:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,520:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,520:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,534:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,540:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,548:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,561:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,564:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,586:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,686:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,718:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,749:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:05:11,799:INFO:Calculating mean and std
2025-07-06 11:05:11,799:INFO:Creating metrics dataframe
2025-07-06 11:05:11,801:INFO:Finalizing model
2025-07-06 11:05:12,185:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 11:05:12,189:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001366 seconds.
2025-07-06 11:05:12,190:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:05:12,190:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:05:12,190:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 11:05:12,190:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 11:05:12,191:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 11:05:12,191:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 11:05:12,351:INFO:Uploading results into container
2025-07-06 11:05:12,352:INFO:Uploading model into container now
2025-07-06 11:05:12,352:INFO:_master_model_container: 46
2025-07-06 11:05:12,353:INFO:_display_container: 7
2025-07-06 11:05:12,354:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:05:12,354:INFO:create_model() successfully completed......................................
2025-07-06 11:05:12,454:INFO:SubProcess create_model() end ==================================
2025-07-06 11:05:12,455:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9076
2025-07-06 11:05:12,456:INFO:LGBMClassifier(bagging_fraction=0.6, bagging_freq=4, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,
               importance_type='split', learning_rate=0.05, max_depth=-1,
               min_child_samples=96, min_child_weight=0.001, min_split_gain=0.7,
               n_estimators=180, n_jobs=-1, num_leaves=10, objective=None,
               random_state=123, reg_alpha=0.0001, reg_lambda=0.1,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9072
2025-07-06 11:05:12,457:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) is best model
2025-07-06 11:05:12,457:INFO:choose_better completed
2025-07-06 11:05:12,457:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-07-06 11:05:12,466:INFO:_master_model_container: 46
2025-07-06 11:05:12,466:INFO:_display_container: 6
2025-07-06 11:05:12,467:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:05:12,467:INFO:tune_model() successfully completed......................................
2025-07-06 11:05:53,060:INFO:Initializing finalize_model()
2025-07-06 11:05:53,060:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-06 11:05:53,061:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:05:53,068:INFO:Initializing create_model()
2025-07-06 11:05:53,068:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:05:53,069:INFO:Checking exceptions
2025-07-06 11:05:53,070:INFO:Importing libraries
2025-07-06 11:05:53,070:INFO:Copying training dataset
2025-07-06 11:05:53,071:INFO:Defining folds
2025-07-06 11:05:53,071:INFO:Declaring metric variables
2025-07-06 11:05:53,071:INFO:Importing untrained model
2025-07-06 11:05:53,072:INFO:Declaring custom model
2025-07-06 11:05:53,073:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:05:53,075:INFO:Cross validation set to False
2025-07-06 11:05:53,075:INFO:Fitting Model
2025-07-06 11:05:53,606:INFO:[LightGBM] [Info] Number of positive: 5289, number of negative: 39922
2025-07-06 11:05:53,613:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001935 seconds.
2025-07-06 11:05:53,613:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:05:53,613:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:05:53,613:INFO:[LightGBM] [Info] Total Bins 1030
2025-07-06 11:05:53,613:INFO:[LightGBM] [Info] Number of data points in the train set: 45211, number of used features: 48
2025-07-06 11:05:53,614:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116985 -> initscore=-2.021298
2025-07-06 11:05:53,614:INFO:[LightGBM] [Info] Start training from score -2.021298
2025-07-06 11:05:53,865:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-06 11:05:53,865:INFO:create_model() successfully completed......................................
2025-07-06 11:05:53,958:INFO:_master_model_container: 46
2025-07-06 11:05:53,958:INFO:_display_container: 6
2025-07-06 11:05:53,985:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-06 11:05:53,985:INFO:finalize_model() successfully completed......................................
2025-07-06 11:07:18,597:INFO:Initializing evaluate_model()
2025-07-06 11:07:18,597:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-07-06 11:07:18,637:INFO:Initializing plot_model()
2025-07-06 11:07:18,637:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, system=True)
2025-07-06 11:07:18,637:INFO:Checking exceptions
2025-07-06 11:07:18,642:INFO:Preloading libraries
2025-07-06 11:07:18,649:INFO:Copying training dataset
2025-07-06 11:07:18,649:INFO:Plot type: pipeline
2025-07-06 11:07:18,950:INFO:Visual Rendered Successfully
2025-07-06 11:07:19,034:INFO:plot_model() successfully completed......................................
2025-07-06 11:07:59,999:INFO:Initializing predict_model()
2025-07-06 11:07:59,999:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210823C32E0>)
2025-07-06 11:07:59,999:INFO:Checking exceptions
2025-07-06 11:07:59,999:INFO:Preloading libraries
2025-07-06 11:08:00,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:08:00,293:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:08:00,372:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:08:52,353:INFO:Initializing save_model()
2025-07-06 11:08:52,353:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), model_name=bankmarketing_lightgbm, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-07-06 11:08:52,353:INFO:Adding model into prep_pipe
2025-07-06 11:08:52,353:WARNING:Only Model saved as it was a pipeline.
2025-07-06 11:08:52,369:INFO:bankmarketing_lightgbm.pkl saved in current working directory
2025-07-06 11:08:52,412:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-06 11:08:52,412:INFO:save_model() successfully completed......................................
2025-07-06 11:10:00,388:INFO:Initializing evaluate_model()
2025-07-06 11:10:00,388:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-07-06 11:10:00,425:INFO:Initializing plot_model()
2025-07-06 11:10:00,426:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000210FD5CF7C0>, system=True)
2025-07-06 11:10:00,426:INFO:Checking exceptions
2025-07-06 11:10:00,431:INFO:Preloading libraries
2025-07-06 11:10:00,435:INFO:Copying training dataset
2025-07-06 11:10:00,435:INFO:Plot type: pipeline
2025-07-06 11:10:00,564:INFO:Visual Rendered Successfully
2025-07-06 11:10:00,645:INFO:plot_model() successfully completed......................................
2025-07-06 11:24:55,889:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_15488\683719827.py:1: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x="y", data=df, palette="Set2")

2025-07-06 11:25:19,534:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_15488\585435256.py:15: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=job_subs.index, y=job_subs.values, palette="viridis")

2025-07-06 11:25:25,149:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_15488\1396932790.py:9: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=marital_subs.index, y=marital_subs.values, palette="Blues")

2025-07-06 11:25:28,843:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_15488\2867848524.py:9: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=education_subs.index, y=education_subs.values, palette="Greens")

2025-07-06 11:25:32,447:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_15488\2560391237.py:9: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=contact_subs.index, y=contact_subs.values, palette="Purples")

2025-07-06 11:25:35,052:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_15488\1235390937.py:9: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=poutcome_subs.index, y=poutcome_subs.values, palette="Oranges")

2025-07-06 11:26:32,333:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_18304\1235390937.py:9: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=poutcome_subs.index, y=poutcome_subs.values, palette="Oranges")

2025-07-06 11:29:02,151:INFO:PyCaret ClassificationExperiment
2025-07-06 11:29:02,151:INFO:Logging name: clf-default-name
2025-07-06 11:29:02,151:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-06 11:29:02,151:INFO:version 3.3.2
2025-07-06 11:29:02,151:INFO:Initializing setup()
2025-07-06 11:29:02,152:INFO:self.USI: 9aac
2025-07-06 11:29:02,152:INFO:self._variable_keys: {'memory', 'fold_groups_param', 'y', 'X_train', 'X_test', 'fold_shuffle_param', 'gpu_param', 'fix_imbalance', '_available_plots', 'y_test', 'X', 'seed', 'fold_generator', '_ml_usecase', 'html_param', 'y_train', 'exp_id', 'n_jobs_param', 'is_multiclass', 'log_plots_param', 'idx', 'USI', 'data', 'gpu_n_jobs_param', 'exp_name_log', 'target_param', 'pipeline', 'logging_param'}
2025-07-06 11:29:02,152:INFO:Checking environment
2025-07-06 11:29:02,152:INFO:python_version: 3.10.18
2025-07-06 11:29:02,152:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-07-06 11:29:02,152:INFO:machine: AMD64
2025-07-06 11:29:02,152:INFO:platform: Windows-10-10.0.26100-SP0
2025-07-06 11:29:02,157:INFO:Memory: svmem(total=34083729408, available=17394880512, percent=49.0, used=16688848896, free=17394880512)
2025-07-06 11:29:02,158:INFO:Physical Core: 14
2025-07-06 11:29:02,158:INFO:Logical Core: 20
2025-07-06 11:29:02,158:INFO:Checking libraries
2025-07-06 11:29:02,158:INFO:System:
2025-07-06 11:29:02,158:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-07-06 11:29:02,158:INFO:executable: c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\python.exe
2025-07-06 11:29:02,158:INFO:   machine: Windows-10-10.0.26100-SP0
2025-07-06 11:29:02,158:INFO:PyCaret required dependencies:
2025-07-06 11:29:02,158:INFO:                 pip: 25.1
2025-07-06 11:29:02,158:INFO:          setuptools: 78.1.1
2025-07-06 11:29:02,158:INFO:             pycaret: 3.3.2
2025-07-06 11:29:02,158:INFO:             IPython: 8.37.0
2025-07-06 11:29:02,158:INFO:          ipywidgets: 8.1.7
2025-07-06 11:29:02,158:INFO:                tqdm: 4.67.1
2025-07-06 11:29:02,158:INFO:               numpy: 1.26.4
2025-07-06 11:29:02,158:INFO:              pandas: 2.1.4
2025-07-06 11:29:02,158:INFO:              jinja2: 3.1.6
2025-07-06 11:29:02,158:INFO:               scipy: 1.11.4
2025-07-06 11:29:02,158:INFO:              joblib: 1.3.2
2025-07-06 11:29:02,158:INFO:             sklearn: 1.4.2
2025-07-06 11:29:02,158:INFO:                pyod: 2.0.5
2025-07-06 11:29:02,158:INFO:            imblearn: 0.13.0
2025-07-06 11:29:02,158:INFO:   category_encoders: 2.7.0
2025-07-06 11:29:02,158:INFO:            lightgbm: 4.6.0
2025-07-06 11:29:02,158:INFO:               numba: 0.61.2
2025-07-06 11:29:02,158:INFO:            requests: 2.32.4
2025-07-06 11:29:02,158:INFO:          matplotlib: 3.7.5
2025-07-06 11:29:02,158:INFO:          scikitplot: 0.3.7
2025-07-06 11:29:02,158:INFO:         yellowbrick: 1.5
2025-07-06 11:29:02,158:INFO:              plotly: 5.24.1
2025-07-06 11:29:02,158:INFO:    plotly-resampler: Not installed
2025-07-06 11:29:02,158:INFO:             kaleido: 1.0.0
2025-07-06 11:29:02,158:INFO:           schemdraw: 0.15
2025-07-06 11:29:02,159:INFO:         statsmodels: 0.14.4
2025-07-06 11:29:02,159:INFO:              sktime: 0.26.0
2025-07-06 11:29:02,159:INFO:               tbats: 1.1.3
2025-07-06 11:29:02,159:INFO:            pmdarima: 2.0.4
2025-07-06 11:29:02,159:INFO:              psutil: 7.0.0
2025-07-06 11:29:02,159:INFO:          markupsafe: 3.0.2
2025-07-06 11:29:02,159:INFO:             pickle5: Not installed
2025-07-06 11:29:02,159:INFO:         cloudpickle: 3.1.1
2025-07-06 11:29:02,159:INFO:         deprecation: 2.1.0
2025-07-06 11:29:02,159:INFO:              xxhash: 3.5.0
2025-07-06 11:29:02,159:INFO:           wurlitzer: Not installed
2025-07-06 11:29:02,159:INFO:PyCaret optional dependencies:
2025-07-06 11:29:02,159:INFO:                shap: Not installed
2025-07-06 11:29:02,159:INFO:           interpret: Not installed
2025-07-06 11:29:02,159:INFO:                umap: Not installed
2025-07-06 11:29:02,159:INFO:     ydata_profiling: Not installed
2025-07-06 11:29:02,159:INFO:  explainerdashboard: Not installed
2025-07-06 11:29:02,159:INFO:             autoviz: Not installed
2025-07-06 11:29:02,159:INFO:           fairlearn: Not installed
2025-07-06 11:29:02,159:INFO:          deepchecks: Not installed
2025-07-06 11:29:02,159:INFO:             xgboost: Not installed
2025-07-06 11:29:02,159:INFO:            catboost: Not installed
2025-07-06 11:29:02,159:INFO:              kmodes: Not installed
2025-07-06 11:29:02,159:INFO:             mlxtend: Not installed
2025-07-06 11:29:02,159:INFO:       statsforecast: Not installed
2025-07-06 11:29:02,159:INFO:        tune_sklearn: Not installed
2025-07-06 11:29:02,159:INFO:                 ray: Not installed
2025-07-06 11:29:02,159:INFO:            hyperopt: Not installed
2025-07-06 11:29:02,159:INFO:              optuna: Not installed
2025-07-06 11:29:02,159:INFO:               skopt: Not installed
2025-07-06 11:29:02,159:INFO:              mlflow: Not installed
2025-07-06 11:29:02,159:INFO:              gradio: Not installed
2025-07-06 11:29:02,159:INFO:             fastapi: Not installed
2025-07-06 11:29:02,159:INFO:             uvicorn: Not installed
2025-07-06 11:29:02,159:INFO:              m2cgen: Not installed
2025-07-06 11:29:02,159:INFO:           evidently: Not installed
2025-07-06 11:29:02,159:INFO:               fugue: Not installed
2025-07-06 11:29:02,159:INFO:           streamlit: Not installed
2025-07-06 11:29:02,159:INFO:             prophet: Not installed
2025-07-06 11:29:02,159:INFO:None
2025-07-06 11:29:02,160:INFO:Set up data.
2025-07-06 11:29:02,202:INFO:Set up folding strategy.
2025-07-06 11:29:02,202:INFO:Set up train/test split.
2025-07-06 11:29:02,236:INFO:Set up index.
2025-07-06 11:29:02,237:INFO:Assigning column types.
2025-07-06 11:29:02,242:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-06 11:29:02,276:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 11:29:02,277:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 11:29:02,296:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,296:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,329:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 11:29:02,329:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 11:29:02,349:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,350:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,350:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-06 11:29:02,389:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 11:29:02,428:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,428:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,472:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 11:29:02,494:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,495:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,495:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-06 11:29:02,547:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,548:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,600:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,600:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:02,601:INFO:Preparing preprocessing pipeline...
2025-07-06 11:29:02,603:INFO:Set up label encoding.
2025-07-06 11:29:02,603:INFO:Set up simple imputation.
2025-07-06 11:29:02,611:INFO:Set up encoding of ordinal features.
2025-07-06 11:29:02,617:INFO:Set up encoding of categorical features.
2025-07-06 11:29:02,835:INFO:Finished creating preprocessing pipeline.
2025-07-06 11:29:02,859:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-06 11:29:02,859:INFO:Creating final display dataframe.
2025-07-06 11:29:03,657:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target                 y
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (45211, 17)
5        Transformed data shape       (45211, 49)
6   Transformed train set shape       (31647, 49)
7    Transformed test set shape       (13564, 49)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              9aac
2025-07-06 11:29:03,717:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:03,718:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:03,774:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:03,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 11:29:03,777:INFO:setup() successfully completed in 1.63s...............
2025-07-06 11:29:09,018:INFO:Initializing compare_models()
2025-07-06 11:29:09,018:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-06 11:29:09,019:INFO:Checking exceptions
2025-07-06 11:29:09,027:INFO:Preparing display monitor
2025-07-06 11:29:09,046:INFO:Initializing Logistic Regression
2025-07-06 11:29:09,046:INFO:Total runtime is 0.0 minutes
2025-07-06 11:29:09,050:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:09,050:INFO:Initializing create_model()
2025-07-06 11:29:09,050:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:09,051:INFO:Checking exceptions
2025-07-06 11:29:09,051:INFO:Importing libraries
2025-07-06 11:29:09,051:INFO:Copying training dataset
2025-07-06 11:29:09,063:INFO:Defining folds
2025-07-06 11:29:09,063:INFO:Declaring metric variables
2025-07-06 11:29:09,067:INFO:Importing untrained model
2025-07-06 11:29:09,070:INFO:Logistic Regression Imported successfully
2025-07-06 11:29:09,074:INFO:Starting cross validation
2025-07-06 11:29:09,077:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:20,172:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,174:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,235:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,243:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,277:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,293:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,320:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,326:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,329:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,330:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,352:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,360:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,362:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,375:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,379:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,380:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,386:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:29:20,399:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,404:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,409:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,413:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,414:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,433:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,441:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,449:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,450:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,456:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,470:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,471:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,487:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,491:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,495:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,496:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,504:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,518:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,519:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,524:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,539:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,540:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,551:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:20,600:INFO:Calculating mean and std
2025-07-06 11:29:20,602:INFO:Creating metrics dataframe
2025-07-06 11:29:20,605:INFO:Uploading results into container
2025-07-06 11:29:20,605:INFO:Uploading model into container now
2025-07-06 11:29:20,606:INFO:_master_model_container: 1
2025-07-06 11:29:20,606:INFO:_display_container: 2
2025-07-06 11:29:20,606:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-06 11:29:20,607:INFO:create_model() successfully completed......................................
2025-07-06 11:29:20,704:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:20,704:INFO:Creating metrics dataframe
2025-07-06 11:29:20,709:INFO:Initializing K Neighbors Classifier
2025-07-06 11:29:20,709:INFO:Total runtime is 0.1943751851717631 minutes
2025-07-06 11:29:20,712:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:20,712:INFO:Initializing create_model()
2025-07-06 11:29:20,712:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:20,712:INFO:Checking exceptions
2025-07-06 11:29:20,712:INFO:Importing libraries
2025-07-06 11:29:20,712:INFO:Copying training dataset
2025-07-06 11:29:20,723:INFO:Defining folds
2025-07-06 11:29:20,723:INFO:Declaring metric variables
2025-07-06 11:29:20,725:INFO:Importing untrained model
2025-07-06 11:29:20,728:INFO:K Neighbors Classifier Imported successfully
2025-07-06 11:29:20,732:INFO:Starting cross validation
2025-07-06 11:29:20,735:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:26,528:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:26,578:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:26,626:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:26,721:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:26,769:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:26,809:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:26,971:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,004:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,028:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,035:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,062:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,072:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,074:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,079:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,093:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,098:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,104:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,107:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,111:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,129:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,137:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,139:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,141:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,161:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,178:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,207:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,212:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,242:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,247:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,274:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:27,323:INFO:Calculating mean and std
2025-07-06 11:29:27,325:INFO:Creating metrics dataframe
2025-07-06 11:29:27,328:INFO:Uploading results into container
2025-07-06 11:29:27,329:INFO:Uploading model into container now
2025-07-06 11:29:27,329:INFO:_master_model_container: 2
2025-07-06 11:29:27,330:INFO:_display_container: 2
2025-07-06 11:29:27,330:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-06 11:29:27,330:INFO:create_model() successfully completed......................................
2025-07-06 11:29:27,439:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:27,439:INFO:Creating metrics dataframe
2025-07-06 11:29:27,449:INFO:Initializing Naive Bayes
2025-07-06 11:29:27,449:INFO:Total runtime is 0.30670504570007323 minutes
2025-07-06 11:29:27,455:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:27,455:INFO:Initializing create_model()
2025-07-06 11:29:27,455:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:27,455:INFO:Checking exceptions
2025-07-06 11:29:27,455:INFO:Importing libraries
2025-07-06 11:29:27,455:INFO:Copying training dataset
2025-07-06 11:29:27,480:INFO:Defining folds
2025-07-06 11:29:27,481:INFO:Declaring metric variables
2025-07-06 11:29:27,486:INFO:Importing untrained model
2025-07-06 11:29:27,490:INFO:Naive Bayes Imported successfully
2025-07-06 11:29:27,499:INFO:Starting cross validation
2025-07-06 11:29:27,503:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:28,770:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,775:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,787:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,791:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,812:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,822:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,828:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,830:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,839:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,839:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,841:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,852:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,854:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,858:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,857:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,862:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,866:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,870:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,877:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,877:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,878:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,889:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,889:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,895:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,896:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,904:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,915:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,926:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,927:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,931:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:28,990:INFO:Calculating mean and std
2025-07-06 11:29:28,992:INFO:Creating metrics dataframe
2025-07-06 11:29:28,995:INFO:Uploading results into container
2025-07-06 11:29:28,995:INFO:Uploading model into container now
2025-07-06 11:29:28,996:INFO:_master_model_container: 3
2025-07-06 11:29:28,996:INFO:_display_container: 2
2025-07-06 11:29:28,996:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-06 11:29:28,997:INFO:create_model() successfully completed......................................
2025-07-06 11:29:29,097:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:29,098:INFO:Creating metrics dataframe
2025-07-06 11:29:29,107:INFO:Initializing Decision Tree Classifier
2025-07-06 11:29:29,107:INFO:Total runtime is 0.3343400319417318 minutes
2025-07-06 11:29:29,111:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:29,112:INFO:Initializing create_model()
2025-07-06 11:29:29,112:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:29,112:INFO:Checking exceptions
2025-07-06 11:29:29,112:INFO:Importing libraries
2025-07-06 11:29:29,113:INFO:Copying training dataset
2025-07-06 11:29:29,132:INFO:Defining folds
2025-07-06 11:29:29,132:INFO:Declaring metric variables
2025-07-06 11:29:29,137:INFO:Importing untrained model
2025-07-06 11:29:29,141:INFO:Decision Tree Classifier Imported successfully
2025-07-06 11:29:29,150:INFO:Starting cross validation
2025-07-06 11:29:29,154:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:30,818:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,834:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,838:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,855:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,864:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,866:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,866:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,873:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,873:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,874:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,875:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,885:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,892:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,901:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,902:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,903:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,907:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,909:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,911:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,912:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,913:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,922:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,937:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,938:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,939:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,946:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,946:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,949:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,956:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:30,978:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:31,032:INFO:Calculating mean and std
2025-07-06 11:29:31,033:INFO:Creating metrics dataframe
2025-07-06 11:29:31,037:INFO:Uploading results into container
2025-07-06 11:29:31,038:INFO:Uploading model into container now
2025-07-06 11:29:31,039:INFO:_master_model_container: 4
2025-07-06 11:29:31,039:INFO:_display_container: 2
2025-07-06 11:29:31,039:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-07-06 11:29:31,039:INFO:create_model() successfully completed......................................
2025-07-06 11:29:31,134:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:31,134:INFO:Creating metrics dataframe
2025-07-06 11:29:31,145:INFO:Initializing SVM - Linear Kernel
2025-07-06 11:29:31,145:INFO:Total runtime is 0.36831024090449016 minutes
2025-07-06 11:29:31,149:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:31,149:INFO:Initializing create_model()
2025-07-06 11:29:31,150:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:31,150:INFO:Checking exceptions
2025-07-06 11:29:31,150:INFO:Importing libraries
2025-07-06 11:29:31,150:INFO:Copying training dataset
2025-07-06 11:29:31,169:INFO:Defining folds
2025-07-06 11:29:31,169:INFO:Declaring metric variables
2025-07-06 11:29:31,173:INFO:Importing untrained model
2025-07-06 11:29:31,177:INFO:SVM - Linear Kernel Imported successfully
2025-07-06 11:29:31,184:INFO:Starting cross validation
2025-07-06 11:29:31,187:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:32,832:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:32,873:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:32,893:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:32,915:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:32,937:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:32,954:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:32,979:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:32,992:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:32,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,000:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,019:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,029:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,036:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,037:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,039:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,056:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,069:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,070:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,072:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,088:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,093:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,103:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,104:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,123:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,135:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,151:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,155:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,163:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,184:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,211:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:33,264:INFO:Calculating mean and std
2025-07-06 11:29:33,266:INFO:Creating metrics dataframe
2025-07-06 11:29:33,269:INFO:Uploading results into container
2025-07-06 11:29:33,270:INFO:Uploading model into container now
2025-07-06 11:29:33,270:INFO:_master_model_container: 5
2025-07-06 11:29:33,271:INFO:_display_container: 2
2025-07-06 11:29:33,271:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-06 11:29:33,271:INFO:create_model() successfully completed......................................
2025-07-06 11:29:33,371:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:33,371:INFO:Creating metrics dataframe
2025-07-06 11:29:33,384:INFO:Initializing Ridge Classifier
2025-07-06 11:29:33,384:INFO:Total runtime is 0.40563637812932335 minutes
2025-07-06 11:29:33,391:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:33,391:INFO:Initializing create_model()
2025-07-06 11:29:33,391:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:33,392:INFO:Checking exceptions
2025-07-06 11:29:33,392:INFO:Importing libraries
2025-07-06 11:29:33,392:INFO:Copying training dataset
2025-07-06 11:29:33,414:INFO:Defining folds
2025-07-06 11:29:33,415:INFO:Declaring metric variables
2025-07-06 11:29:33,421:INFO:Importing untrained model
2025-07-06 11:29:33,426:INFO:Ridge Classifier Imported successfully
2025-07-06 11:29:33,436:INFO:Starting cross validation
2025-07-06 11:29:33,452:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:34,715:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,719:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,736:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,737:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,755:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,756:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,760:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,766:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,770:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,773:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,775:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,781:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,792:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,794:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,794:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,795:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,798:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,804:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,809:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,812:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,814:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,821:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,831:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,833:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,834:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,844:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,848:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,858:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,866:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,868:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:34,916:INFO:Calculating mean and std
2025-07-06 11:29:34,919:INFO:Creating metrics dataframe
2025-07-06 11:29:34,921:INFO:Uploading results into container
2025-07-06 11:29:34,922:INFO:Uploading model into container now
2025-07-06 11:29:34,922:INFO:_master_model_container: 6
2025-07-06 11:29:34,923:INFO:_display_container: 2
2025-07-06 11:29:34,923:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-07-06 11:29:34,923:INFO:create_model() successfully completed......................................
2025-07-06 11:29:35,011:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:35,011:INFO:Creating metrics dataframe
2025-07-06 11:29:35,021:INFO:Initializing Random Forest Classifier
2025-07-06 11:29:35,021:INFO:Total runtime is 0.43292015393575034 minutes
2025-07-06 11:29:35,026:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:35,027:INFO:Initializing create_model()
2025-07-06 11:29:35,027:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:35,027:INFO:Checking exceptions
2025-07-06 11:29:35,027:INFO:Importing libraries
2025-07-06 11:29:35,027:INFO:Copying training dataset
2025-07-06 11:29:35,048:INFO:Defining folds
2025-07-06 11:29:35,048:INFO:Declaring metric variables
2025-07-06 11:29:35,053:INFO:Importing untrained model
2025-07-06 11:29:35,058:INFO:Random Forest Classifier Imported successfully
2025-07-06 11:29:35,067:INFO:Starting cross validation
2025-07-06 11:29:35,071:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:42,915:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:42,928:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:42,990:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:42,999:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,004:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,020:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,062:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,068:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,079:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,085:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,111:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,112:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,123:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,123:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,126:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,134:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,148:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,152:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,154:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,157:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,158:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,161:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,172:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,187:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,189:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,191:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,193:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,196:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,217:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:43,272:INFO:Calculating mean and std
2025-07-06 11:29:43,274:INFO:Creating metrics dataframe
2025-07-06 11:29:43,278:INFO:Uploading results into container
2025-07-06 11:29:43,278:INFO:Uploading model into container now
2025-07-06 11:29:43,279:INFO:_master_model_container: 7
2025-07-06 11:29:43,279:INFO:_display_container: 2
2025-07-06 11:29:43,280:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-07-06 11:29:43,280:INFO:create_model() successfully completed......................................
2025-07-06 11:29:43,385:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:43,385:INFO:Creating metrics dataframe
2025-07-06 11:29:43,398:INFO:Initializing Quadratic Discriminant Analysis
2025-07-06 11:29:43,398:INFO:Total runtime is 0.5725330630938212 minutes
2025-07-06 11:29:43,402:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:43,403:INFO:Initializing create_model()
2025-07-06 11:29:43,403:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:43,403:INFO:Checking exceptions
2025-07-06 11:29:43,404:INFO:Importing libraries
2025-07-06 11:29:43,404:INFO:Copying training dataset
2025-07-06 11:29:43,424:INFO:Defining folds
2025-07-06 11:29:43,425:INFO:Declaring metric variables
2025-07-06 11:29:43,430:INFO:Importing untrained model
2025-07-06 11:29:43,434:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-06 11:29:43,442:INFO:Starting cross validation
2025-07-06 11:29:43,446:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:44,846:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,849:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,864:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,892:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,923:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,950:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,952:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,952:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,959:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:44,960:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:29:45,109:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,111:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,120:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,143:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,155:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,157:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,157:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,162:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,180:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,182:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,184:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,186:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,187:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,191:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,193:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,195:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,196:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,200:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,217:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,219:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,220:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,224:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,224:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,228:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,232:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,254:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,255:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,259:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,259:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:45,316:INFO:Calculating mean and std
2025-07-06 11:29:45,318:INFO:Creating metrics dataframe
2025-07-06 11:29:45,321:INFO:Uploading results into container
2025-07-06 11:29:45,322:INFO:Uploading model into container now
2025-07-06 11:29:45,323:INFO:_master_model_container: 8
2025-07-06 11:29:45,323:INFO:_display_container: 2
2025-07-06 11:29:45,323:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-06 11:29:45,323:INFO:create_model() successfully completed......................................
2025-07-06 11:29:45,425:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:45,426:INFO:Creating metrics dataframe
2025-07-06 11:29:45,438:INFO:Initializing Ada Boost Classifier
2025-07-06 11:29:45,438:INFO:Total runtime is 0.6065265774726868 minutes
2025-07-06 11:29:45,442:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:45,442:INFO:Initializing create_model()
2025-07-06 11:29:45,443:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:45,443:INFO:Checking exceptions
2025-07-06 11:29:45,443:INFO:Importing libraries
2025-07-06 11:29:45,443:INFO:Copying training dataset
2025-07-06 11:29:45,461:INFO:Defining folds
2025-07-06 11:29:45,462:INFO:Declaring metric variables
2025-07-06 11:29:45,467:INFO:Importing untrained model
2025-07-06 11:29:45,470:INFO:Ada Boost Classifier Imported successfully
2025-07-06 11:29:45,477:INFO:Starting cross validation
2025-07-06 11:29:45,480:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:29:46,413:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,415:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,440:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,459:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,481:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,485:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,491:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,505:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,517:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:46,517:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:29:49,555:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,557:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,576:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,609:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,613:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,633:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,633:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,661:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,665:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,669:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,671:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,682:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,684:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,684:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,686:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,687:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,691:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,710:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,711:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,722:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,722:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,723:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,726:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,728:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,742:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,744:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,752:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,753:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,755:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,759:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:29:49,811:INFO:Calculating mean and std
2025-07-06 11:29:49,813:INFO:Creating metrics dataframe
2025-07-06 11:29:49,815:INFO:Uploading results into container
2025-07-06 11:29:49,816:INFO:Uploading model into container now
2025-07-06 11:29:49,816:INFO:_master_model_container: 9
2025-07-06 11:29:49,816:INFO:_display_container: 2
2025-07-06 11:29:49,817:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-07-06 11:29:49,817:INFO:create_model() successfully completed......................................
2025-07-06 11:29:49,911:INFO:SubProcess create_model() end ==================================
2025-07-06 11:29:49,911:INFO:Creating metrics dataframe
2025-07-06 11:29:49,925:INFO:Initializing Gradient Boosting Classifier
2025-07-06 11:29:49,925:INFO:Total runtime is 0.6813101013501486 minutes
2025-07-06 11:29:49,930:INFO:SubProcess create_model() called ==================================
2025-07-06 11:29:49,931:INFO:Initializing create_model()
2025-07-06 11:29:49,931:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:29:49,931:INFO:Checking exceptions
2025-07-06 11:29:49,931:INFO:Importing libraries
2025-07-06 11:29:49,932:INFO:Copying training dataset
2025-07-06 11:29:49,953:INFO:Defining folds
2025-07-06 11:29:49,954:INFO:Declaring metric variables
2025-07-06 11:29:49,959:INFO:Importing untrained model
2025-07-06 11:29:49,964:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 11:29:49,972:INFO:Starting cross validation
2025-07-06 11:29:49,976:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:30:00,678:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,681:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,684:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,685:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,720:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,723:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,726:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,728:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,743:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,749:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,753:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,754:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,760:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,762:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,763:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,765:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,767:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,772:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,782:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,788:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,790:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,795:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,803:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,814:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,820:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,827:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,829:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,832:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,839:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,847:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:00,902:INFO:Calculating mean and std
2025-07-06 11:30:00,905:INFO:Creating metrics dataframe
2025-07-06 11:30:00,908:INFO:Uploading results into container
2025-07-06 11:30:00,908:INFO:Uploading model into container now
2025-07-06 11:30:00,909:INFO:_master_model_container: 10
2025-07-06 11:30:00,909:INFO:_display_container: 2
2025-07-06 11:30:00,910:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 11:30:00,910:INFO:create_model() successfully completed......................................
2025-07-06 11:30:01,018:INFO:SubProcess create_model() end ==================================
2025-07-06 11:30:01,019:INFO:Creating metrics dataframe
2025-07-06 11:30:01,033:INFO:Initializing Linear Discriminant Analysis
2025-07-06 11:30:01,034:INFO:Total runtime is 0.8664639314015707 minutes
2025-07-06 11:30:01,040:INFO:SubProcess create_model() called ==================================
2025-07-06 11:30:01,040:INFO:Initializing create_model()
2025-07-06 11:30:01,041:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:30:01,041:INFO:Checking exceptions
2025-07-06 11:30:01,041:INFO:Importing libraries
2025-07-06 11:30:01,041:INFO:Copying training dataset
2025-07-06 11:30:01,063:INFO:Defining folds
2025-07-06 11:30:01,063:INFO:Declaring metric variables
2025-07-06 11:30:01,069:INFO:Importing untrained model
2025-07-06 11:30:01,075:INFO:Linear Discriminant Analysis Imported successfully
2025-07-06 11:30:01,085:INFO:Starting cross validation
2025-07-06 11:30:01,090:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:30:02,873:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,909:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,916:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,918:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,932:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,948:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,951:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,957:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,959:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,959:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,968:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,973:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,982:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,982:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,988:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,988:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,992:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:02,999:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,009:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,014:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,022:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,024:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,026:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,027:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,037:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,046:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,057:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,060:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,061:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:03,112:INFO:Calculating mean and std
2025-07-06 11:30:03,114:INFO:Creating metrics dataframe
2025-07-06 11:30:03,118:INFO:Uploading results into container
2025-07-06 11:30:03,119:INFO:Uploading model into container now
2025-07-06 11:30:03,119:INFO:_master_model_container: 11
2025-07-06 11:30:03,120:INFO:_display_container: 2
2025-07-06 11:30:03,120:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-06 11:30:03,121:INFO:create_model() successfully completed......................................
2025-07-06 11:30:03,229:INFO:SubProcess create_model() end ==================================
2025-07-06 11:30:03,230:INFO:Creating metrics dataframe
2025-07-06 11:30:03,245:INFO:Initializing Extra Trees Classifier
2025-07-06 11:30:03,245:INFO:Total runtime is 0.9033063451449077 minutes
2025-07-06 11:30:03,251:INFO:SubProcess create_model() called ==================================
2025-07-06 11:30:03,251:INFO:Initializing create_model()
2025-07-06 11:30:03,251:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:30:03,252:INFO:Checking exceptions
2025-07-06 11:30:03,252:INFO:Importing libraries
2025-07-06 11:30:03,252:INFO:Copying training dataset
2025-07-06 11:30:03,274:INFO:Defining folds
2025-07-06 11:30:03,274:INFO:Declaring metric variables
2025-07-06 11:30:03,280:INFO:Importing untrained model
2025-07-06 11:30:03,285:INFO:Extra Trees Classifier Imported successfully
2025-07-06 11:30:03,296:INFO:Starting cross validation
2025-07-06 11:30:03,301:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:30:11,452:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,479:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,501:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,501:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,515:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,580:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,588:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,588:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,591:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,592:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,609:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,623:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,630:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,631:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,633:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,673:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,703:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,707:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,717:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,717:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,720:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,737:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,741:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,748:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,749:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,766:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,771:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,779:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,779:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,801:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:11,860:INFO:Calculating mean and std
2025-07-06 11:30:11,864:INFO:Creating metrics dataframe
2025-07-06 11:30:11,867:INFO:Uploading results into container
2025-07-06 11:30:11,868:INFO:Uploading model into container now
2025-07-06 11:30:11,869:INFO:_master_model_container: 12
2025-07-06 11:30:11,869:INFO:_display_container: 2
2025-07-06 11:30:11,870:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-07-06 11:30:11,870:INFO:create_model() successfully completed......................................
2025-07-06 11:30:11,986:INFO:SubProcess create_model() end ==================================
2025-07-06 11:30:11,986:INFO:Creating metrics dataframe
2025-07-06 11:30:12,003:INFO:Initializing Light Gradient Boosting Machine
2025-07-06 11:30:12,004:INFO:Total runtime is 1.0492958823839824 minutes
2025-07-06 11:30:12,009:INFO:SubProcess create_model() called ==================================
2025-07-06 11:30:12,009:INFO:Initializing create_model()
2025-07-06 11:30:12,009:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:30:12,009:INFO:Checking exceptions
2025-07-06 11:30:12,010:INFO:Importing libraries
2025-07-06 11:30:12,010:INFO:Copying training dataset
2025-07-06 11:30:12,035:INFO:Defining folds
2025-07-06 11:30:12,036:INFO:Declaring metric variables
2025-07-06 11:30:12,040:INFO:Importing untrained model
2025-07-06 11:30:12,046:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:30:12,058:INFO:Starting cross validation
2025-07-06 11:30:12,062:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:30:18,383:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,383:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,397:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,404:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,411:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,421:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,425:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,426:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,434:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,439:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,441:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,447:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,454:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,457:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,460:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,467:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,471:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,473:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,480:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,486:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,504:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,941:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,944:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,958:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,969:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,972:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,984:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,995:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:18,999:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:19,011:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:19,051:INFO:Calculating mean and std
2025-07-06 11:30:19,053:INFO:Creating metrics dataframe
2025-07-06 11:30:19,056:INFO:Uploading results into container
2025-07-06 11:30:19,056:INFO:Uploading model into container now
2025-07-06 11:30:19,057:INFO:_master_model_container: 13
2025-07-06 11:30:19,057:INFO:_display_container: 2
2025-07-06 11:30:19,058:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:30:19,058:INFO:create_model() successfully completed......................................
2025-07-06 11:30:19,158:INFO:SubProcess create_model() end ==================================
2025-07-06 11:30:19,158:INFO:Creating metrics dataframe
2025-07-06 11:30:19,172:INFO:Initializing Dummy Classifier
2025-07-06 11:30:19,172:INFO:Total runtime is 1.168765652179718 minutes
2025-07-06 11:30:19,176:INFO:SubProcess create_model() called ==================================
2025-07-06 11:30:19,177:INFO:Initializing create_model()
2025-07-06 11:30:19,177:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000210801B0310>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:30:19,177:INFO:Checking exceptions
2025-07-06 11:30:19,177:INFO:Importing libraries
2025-07-06 11:30:19,177:INFO:Copying training dataset
2025-07-06 11:30:19,198:INFO:Defining folds
2025-07-06 11:30:19,198:INFO:Declaring metric variables
2025-07-06 11:30:19,203:INFO:Importing untrained model
2025-07-06 11:30:19,210:INFO:Dummy Classifier Imported successfully
2025-07-06 11:30:19,220:INFO:Starting cross validation
2025-07-06 11:30:19,224:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:30:20,337:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,345:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,365:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,372:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,376:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,376:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,384:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,396:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,398:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,400:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,402:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,405:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,408:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,410:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,414:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,414:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,422:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,424:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,432:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,434:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,434:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,435:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,438:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,440:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,447:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,448:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,452:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,453:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,455:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,461:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,468:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,472:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,473:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,474:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,477:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,481:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,487:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,492:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:30:20,505:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:30:20,550:INFO:Calculating mean and std
2025-07-06 11:30:20,552:INFO:Creating metrics dataframe
2025-07-06 11:30:20,554:INFO:Uploading results into container
2025-07-06 11:30:20,555:INFO:Uploading model into container now
2025-07-06 11:30:20,556:INFO:_master_model_container: 14
2025-07-06 11:30:20,556:INFO:_display_container: 2
2025-07-06 11:30:20,556:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-07-06 11:30:20,556:INFO:create_model() successfully completed......................................
2025-07-06 11:30:20,653:INFO:SubProcess create_model() end ==================================
2025-07-06 11:30:20,653:INFO:Creating metrics dataframe
2025-07-06 11:30:20,668:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-06 11:30:20,680:INFO:Initializing create_model()
2025-07-06 11:30:20,680:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:30:20,681:INFO:Checking exceptions
2025-07-06 11:30:20,682:INFO:Importing libraries
2025-07-06 11:30:20,682:INFO:Copying training dataset
2025-07-06 11:30:20,702:INFO:Defining folds
2025-07-06 11:30:20,702:INFO:Declaring metric variables
2025-07-06 11:30:20,704:INFO:Importing untrained model
2025-07-06 11:30:20,704:INFO:Declaring custom model
2025-07-06 11:30:20,705:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:30:20,708:INFO:Cross validation set to False
2025-07-06 11:30:20,708:INFO:Fitting Model
2025-07-06 11:30:21,248:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 11:30:21,255:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002197 seconds.
2025-07-06 11:30:21,255:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:30:21,255:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:30:21,255:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 11:30:21,255:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 11:30:21,256:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 11:30:21,256:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 11:30:22,033:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:30:22,033:INFO:create_model() successfully completed......................................
2025-07-06 11:30:22,163:INFO:_master_model_container: 14
2025-07-06 11:30:22,163:INFO:_display_container: 2
2025-07-06 11:30:22,164:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:30:22,164:INFO:compare_models() successfully completed......................................
2025-07-06 11:35:22,717:INFO:Initializing compare_models()
2025-07-06 11:35:22,717:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-06 11:35:22,717:INFO:Checking exceptions
2025-07-06 11:35:22,724:INFO:Preparing display monitor
2025-07-06 11:35:22,743:INFO:Initializing Logistic Regression
2025-07-06 11:35:22,743:INFO:Total runtime is 0.0 minutes
2025-07-06 11:35:22,746:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:22,747:INFO:Initializing create_model()
2025-07-06 11:35:22,747:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:22,747:INFO:Checking exceptions
2025-07-06 11:35:22,747:INFO:Importing libraries
2025-07-06 11:35:22,747:INFO:Copying training dataset
2025-07-06 11:35:22,760:INFO:Defining folds
2025-07-06 11:35:22,760:INFO:Declaring metric variables
2025-07-06 11:35:22,762:INFO:Importing untrained model
2025-07-06 11:35:22,765:INFO:Logistic Regression Imported successfully
2025-07-06 11:35:22,770:INFO:Starting cross validation
2025-07-06 11:35:22,773:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:33,539:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,603:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,657:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,690:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,692:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,708:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,722:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,741:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,767:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,768:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,808:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,813:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,826:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,832:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,847:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,849:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,851:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,872:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 11:35:33,884:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,885:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,913:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,922:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,942:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,945:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,954:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,957:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,961:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,967:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,967:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,979:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,987:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,989:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,989:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:33,991:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:34,000:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:34,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:34,013:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:34,026:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:34,032:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:34,062:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:34,100:INFO:Calculating mean and std
2025-07-06 11:35:34,101:INFO:Creating metrics dataframe
2025-07-06 11:35:34,104:INFO:Uploading results into container
2025-07-06 11:35:34,104:INFO:Uploading model into container now
2025-07-06 11:35:34,105:INFO:_master_model_container: 15
2025-07-06 11:35:34,105:INFO:_display_container: 3
2025-07-06 11:35:34,107:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-06 11:35:34,107:INFO:create_model() successfully completed......................................
2025-07-06 11:35:34,202:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:34,202:INFO:Creating metrics dataframe
2025-07-06 11:35:34,208:INFO:Initializing K Neighbors Classifier
2025-07-06 11:35:34,208:INFO:Total runtime is 0.19109209378560385 minutes
2025-07-06 11:35:34,211:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:34,211:INFO:Initializing create_model()
2025-07-06 11:35:34,211:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:34,211:INFO:Checking exceptions
2025-07-06 11:35:34,211:INFO:Importing libraries
2025-07-06 11:35:34,211:INFO:Copying training dataset
2025-07-06 11:35:34,224:INFO:Defining folds
2025-07-06 11:35:34,224:INFO:Declaring metric variables
2025-07-06 11:35:34,227:INFO:Importing untrained model
2025-07-06 11:35:34,230:INFO:K Neighbors Classifier Imported successfully
2025-07-06 11:35:34,235:INFO:Starting cross validation
2025-07-06 11:35:34,239:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:39,519:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,544:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,548:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,576:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,577:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,596:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,605:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,611:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,618:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,640:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,642:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,675:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,757:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,774:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,784:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,785:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,799:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,808:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,810:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,830:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,831:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,834:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,857:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,881:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,884:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,887:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,907:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,921:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,927:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,942:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:39,972:INFO:Calculating mean and std
2025-07-06 11:35:39,974:INFO:Creating metrics dataframe
2025-07-06 11:35:39,976:INFO:Uploading results into container
2025-07-06 11:35:39,976:INFO:Uploading model into container now
2025-07-06 11:35:39,976:INFO:_master_model_container: 16
2025-07-06 11:35:39,977:INFO:_display_container: 3
2025-07-06 11:35:39,977:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-06 11:35:39,977:INFO:create_model() successfully completed......................................
2025-07-06 11:35:40,057:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:40,057:INFO:Creating metrics dataframe
2025-07-06 11:35:40,062:INFO:Initializing Naive Bayes
2025-07-06 11:35:40,062:INFO:Total runtime is 0.2886598348617554 minutes
2025-07-06 11:35:40,065:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:40,065:INFO:Initializing create_model()
2025-07-06 11:35:40,065:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:40,066:INFO:Checking exceptions
2025-07-06 11:35:40,066:INFO:Importing libraries
2025-07-06 11:35:40,066:INFO:Copying training dataset
2025-07-06 11:35:40,077:INFO:Defining folds
2025-07-06 11:35:40,077:INFO:Declaring metric variables
2025-07-06 11:35:40,080:INFO:Importing untrained model
2025-07-06 11:35:40,083:INFO:Naive Bayes Imported successfully
2025-07-06 11:35:40,089:INFO:Starting cross validation
2025-07-06 11:35:40,092:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:40,960:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:40,968:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:40,986:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,000:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,007:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,010:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,011:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,024:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,035:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,040:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,042:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,045:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,047:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,047:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,050:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,053:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,061:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,063:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,076:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,079:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,080:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,084:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,091:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,092:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,093:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,100:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,109:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,115:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,118:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:41,167:INFO:Calculating mean and std
2025-07-06 11:35:41,168:INFO:Creating metrics dataframe
2025-07-06 11:35:41,170:INFO:Uploading results into container
2025-07-06 11:35:41,170:INFO:Uploading model into container now
2025-07-06 11:35:41,170:INFO:_master_model_container: 17
2025-07-06 11:35:41,171:INFO:_display_container: 3
2025-07-06 11:35:41,171:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-06 11:35:41,171:INFO:create_model() successfully completed......................................
2025-07-06 11:35:41,248:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:41,248:INFO:Creating metrics dataframe
2025-07-06 11:35:41,253:INFO:Initializing Decision Tree Classifier
2025-07-06 11:35:41,253:INFO:Total runtime is 0.3084994395573934 minutes
2025-07-06 11:35:41,256:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:41,256:INFO:Initializing create_model()
2025-07-06 11:35:41,256:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:41,256:INFO:Checking exceptions
2025-07-06 11:35:41,257:INFO:Importing libraries
2025-07-06 11:35:41,257:INFO:Copying training dataset
2025-07-06 11:35:41,267:INFO:Defining folds
2025-07-06 11:35:41,267:INFO:Declaring metric variables
2025-07-06 11:35:41,269:INFO:Importing untrained model
2025-07-06 11:35:41,272:INFO:Decision Tree Classifier Imported successfully
2025-07-06 11:35:41,278:INFO:Starting cross validation
2025-07-06 11:35:41,281:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:42,490:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,506:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,517:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,519:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,532:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,535:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,538:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,539:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,541:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,546:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,551:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,553:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,566:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,568:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,569:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,570:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,573:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,575:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,578:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,583:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,591:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,592:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,592:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,594:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,601:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,606:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,614:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,616:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,618:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,625:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:42,667:INFO:Calculating mean and std
2025-07-06 11:35:42,667:INFO:Creating metrics dataframe
2025-07-06 11:35:42,671:INFO:Uploading results into container
2025-07-06 11:35:42,671:INFO:Uploading model into container now
2025-07-06 11:35:42,672:INFO:_master_model_container: 18
2025-07-06 11:35:42,672:INFO:_display_container: 3
2025-07-06 11:35:42,672:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-07-06 11:35:42,672:INFO:create_model() successfully completed......................................
2025-07-06 11:35:42,747:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:42,747:INFO:Creating metrics dataframe
2025-07-06 11:35:42,754:INFO:Initializing SVM - Linear Kernel
2025-07-06 11:35:42,754:INFO:Total runtime is 0.333516256014506 minutes
2025-07-06 11:35:42,757:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:42,757:INFO:Initializing create_model()
2025-07-06 11:35:42,757:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:42,757:INFO:Checking exceptions
2025-07-06 11:35:42,757:INFO:Importing libraries
2025-07-06 11:35:42,757:INFO:Copying training dataset
2025-07-06 11:35:42,767:INFO:Defining folds
2025-07-06 11:35:42,767:INFO:Declaring metric variables
2025-07-06 11:35:42,769:INFO:Importing untrained model
2025-07-06 11:35:42,773:INFO:SVM - Linear Kernel Imported successfully
2025-07-06 11:35:42,778:INFO:Starting cross validation
2025-07-06 11:35:42,782:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:43,955:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:43,977:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,000:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,024:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,029:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,052:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,053:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,056:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,059:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,083:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,086:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,087:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,089:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,110:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,124:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,126:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,138:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,145:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,152:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,158:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,169:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,175:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,175:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,180:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,191:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,198:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,202:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,202:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,224:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,245:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:44,278:INFO:Calculating mean and std
2025-07-06 11:35:44,278:INFO:Creating metrics dataframe
2025-07-06 11:35:44,280:INFO:Uploading results into container
2025-07-06 11:35:44,281:INFO:Uploading model into container now
2025-07-06 11:35:44,281:INFO:_master_model_container: 19
2025-07-06 11:35:44,281:INFO:_display_container: 3
2025-07-06 11:35:44,282:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-06 11:35:44,282:INFO:create_model() successfully completed......................................
2025-07-06 11:35:44,356:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:44,356:INFO:Creating metrics dataframe
2025-07-06 11:35:44,362:INFO:Initializing Ridge Classifier
2025-07-06 11:35:44,362:INFO:Total runtime is 0.3603223959604899 minutes
2025-07-06 11:35:44,364:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:44,365:INFO:Initializing create_model()
2025-07-06 11:35:44,365:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:44,365:INFO:Checking exceptions
2025-07-06 11:35:44,365:INFO:Importing libraries
2025-07-06 11:35:44,365:INFO:Copying training dataset
2025-07-06 11:35:44,375:INFO:Defining folds
2025-07-06 11:35:44,375:INFO:Declaring metric variables
2025-07-06 11:35:44,378:INFO:Importing untrained model
2025-07-06 11:35:44,380:INFO:Ridge Classifier Imported successfully
2025-07-06 11:35:44,387:INFO:Starting cross validation
2025-07-06 11:35:44,390:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:45,178:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,214:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,247:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,248:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,272:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,279:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,282:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,284:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,293:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,305:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,308:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,308:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,311:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,312:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,316:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,331:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,335:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,336:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,341:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,341:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,345:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,346:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,363:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,363:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,363:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,367:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,376:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,387:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,399:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,409:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:45,449:INFO:Calculating mean and std
2025-07-06 11:35:45,449:INFO:Creating metrics dataframe
2025-07-06 11:35:45,452:INFO:Uploading results into container
2025-07-06 11:35:45,452:INFO:Uploading model into container now
2025-07-06 11:35:45,453:INFO:_master_model_container: 20
2025-07-06 11:35:45,453:INFO:_display_container: 3
2025-07-06 11:35:45,453:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-07-06 11:35:45,453:INFO:create_model() successfully completed......................................
2025-07-06 11:35:45,530:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:45,530:INFO:Creating metrics dataframe
2025-07-06 11:35:45,537:INFO:Initializing Random Forest Classifier
2025-07-06 11:35:45,537:INFO:Total runtime is 0.3799140731493632 minutes
2025-07-06 11:35:45,540:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:45,540:INFO:Initializing create_model()
2025-07-06 11:35:45,541:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:45,541:INFO:Checking exceptions
2025-07-06 11:35:45,541:INFO:Importing libraries
2025-07-06 11:35:45,541:INFO:Copying training dataset
2025-07-06 11:35:45,550:INFO:Defining folds
2025-07-06 11:35:45,550:INFO:Declaring metric variables
2025-07-06 11:35:45,553:INFO:Importing untrained model
2025-07-06 11:35:45,556:INFO:Random Forest Classifier Imported successfully
2025-07-06 11:35:45,561:INFO:Starting cross validation
2025-07-06 11:35:45,563:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:49,665:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,666:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,666:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,671:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,713:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,713:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,714:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,721:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,750:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,758:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,777:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,827:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,828:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,828:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,828:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,850:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,852:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,853:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,853:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,858:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,873:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,874:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,876:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,876:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,878:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,893:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,895:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,918:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,919:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:49,957:INFO:Calculating mean and std
2025-07-06 11:35:49,957:INFO:Creating metrics dataframe
2025-07-06 11:35:49,960:INFO:Uploading results into container
2025-07-06 11:35:49,961:INFO:Uploading model into container now
2025-07-06 11:35:49,961:INFO:_master_model_container: 21
2025-07-06 11:35:49,961:INFO:_display_container: 3
2025-07-06 11:35:49,962:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-07-06 11:35:49,962:INFO:create_model() successfully completed......................................
2025-07-06 11:35:50,046:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:50,046:INFO:Creating metrics dataframe
2025-07-06 11:35:50,054:INFO:Initializing Quadratic Discriminant Analysis
2025-07-06 11:35:50,054:INFO:Total runtime is 0.45518792867660524 minutes
2025-07-06 11:35:50,056:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:50,057:INFO:Initializing create_model()
2025-07-06 11:35:50,057:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:50,057:INFO:Checking exceptions
2025-07-06 11:35:50,057:INFO:Importing libraries
2025-07-06 11:35:50,057:INFO:Copying training dataset
2025-07-06 11:35:50,067:INFO:Defining folds
2025-07-06 11:35:50,067:INFO:Declaring metric variables
2025-07-06 11:35:50,070:INFO:Importing untrained model
2025-07-06 11:35:50,073:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-06 11:35:50,078:INFO:Starting cross validation
2025-07-06 11:35:50,081:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:51,131:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,136:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,206:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,244:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,250:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,261:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,266:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,272:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,282:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,293:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 11:35:51,344:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,351:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,356:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,383:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,383:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,385:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,395:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,398:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,411:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,415:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,418:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,422:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,423:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,430:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,431:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,440:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,446:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,447:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,457:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,461:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,463:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,467:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,477:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,482:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,485:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,493:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,496:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,502:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,507:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,533:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:51,567:INFO:Calculating mean and std
2025-07-06 11:35:51,568:INFO:Creating metrics dataframe
2025-07-06 11:35:51,570:INFO:Uploading results into container
2025-07-06 11:35:51,570:INFO:Uploading model into container now
2025-07-06 11:35:51,571:INFO:_master_model_container: 22
2025-07-06 11:35:51,571:INFO:_display_container: 3
2025-07-06 11:35:51,571:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-06 11:35:51,571:INFO:create_model() successfully completed......................................
2025-07-06 11:35:51,651:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:51,651:INFO:Creating metrics dataframe
2025-07-06 11:35:51,659:INFO:Initializing Ada Boost Classifier
2025-07-06 11:35:51,659:INFO:Total runtime is 0.4819471518198649 minutes
2025-07-06 11:35:51,662:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:51,663:INFO:Initializing create_model()
2025-07-06 11:35:51,663:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:51,663:INFO:Checking exceptions
2025-07-06 11:35:51,663:INFO:Importing libraries
2025-07-06 11:35:51,663:INFO:Copying training dataset
2025-07-06 11:35:51,674:INFO:Defining folds
2025-07-06 11:35:51,674:INFO:Declaring metric variables
2025-07-06 11:35:51,677:INFO:Importing untrained model
2025-07-06 11:35:51,680:INFO:Ada Boost Classifier Imported successfully
2025-07-06 11:35:51,685:INFO:Starting cross validation
2025-07-06 11:35:51,689:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:35:52,440:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,514:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,525:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,526:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,527:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,541:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,542:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,552:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,574:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:52,577:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 11:35:54,725:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,740:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,748:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,766:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,772:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,779:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,783:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,791:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,795:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,798:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,798:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,806:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,815:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,816:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,819:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,828:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,831:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,831:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,832:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,833:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,844:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,849:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,854:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,855:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,865:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,866:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,888:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,895:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,916:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,933:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:35:54,964:INFO:Calculating mean and std
2025-07-06 11:35:54,965:INFO:Creating metrics dataframe
2025-07-06 11:35:54,966:INFO:Uploading results into container
2025-07-06 11:35:54,967:INFO:Uploading model into container now
2025-07-06 11:35:54,967:INFO:_master_model_container: 23
2025-07-06 11:35:54,967:INFO:_display_container: 3
2025-07-06 11:35:54,968:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-07-06 11:35:54,968:INFO:create_model() successfully completed......................................
2025-07-06 11:35:55,044:INFO:SubProcess create_model() end ==================================
2025-07-06 11:35:55,044:INFO:Creating metrics dataframe
2025-07-06 11:35:55,051:INFO:Initializing Gradient Boosting Classifier
2025-07-06 11:35:55,051:INFO:Total runtime is 0.5384780367215475 minutes
2025-07-06 11:35:55,054:INFO:SubProcess create_model() called ==================================
2025-07-06 11:35:55,054:INFO:Initializing create_model()
2025-07-06 11:35:55,054:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:35:55,055:INFO:Checking exceptions
2025-07-06 11:35:55,055:INFO:Importing libraries
2025-07-06 11:35:55,055:INFO:Copying training dataset
2025-07-06 11:35:55,065:INFO:Defining folds
2025-07-06 11:35:55,065:INFO:Declaring metric variables
2025-07-06 11:35:55,068:INFO:Importing untrained model
2025-07-06 11:35:55,071:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 11:35:55,077:INFO:Starting cross validation
2025-07-06 11:35:55,079:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:36:02,587:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,612:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,620:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,641:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,659:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,671:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,675:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,679:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,692:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,706:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,707:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,709:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,710:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,733:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,733:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,734:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,735:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,754:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,768:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,771:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,779:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,782:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,784:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,794:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,801:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,806:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,806:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,816:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,824:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,829:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:02,872:INFO:Calculating mean and std
2025-07-06 11:36:02,873:INFO:Creating metrics dataframe
2025-07-06 11:36:02,875:INFO:Uploading results into container
2025-07-06 11:36:02,875:INFO:Uploading model into container now
2025-07-06 11:36:02,875:INFO:_master_model_container: 24
2025-07-06 11:36:02,876:INFO:_display_container: 3
2025-07-06 11:36:02,876:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 11:36:02,876:INFO:create_model() successfully completed......................................
2025-07-06 11:36:02,952:INFO:SubProcess create_model() end ==================================
2025-07-06 11:36:02,952:INFO:Creating metrics dataframe
2025-07-06 11:36:02,961:INFO:Initializing Linear Discriminant Analysis
2025-07-06 11:36:02,961:INFO:Total runtime is 0.6703063964843751 minutes
2025-07-06 11:36:02,963:INFO:SubProcess create_model() called ==================================
2025-07-06 11:36:02,963:INFO:Initializing create_model()
2025-07-06 11:36:02,964:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:36:02,964:INFO:Checking exceptions
2025-07-06 11:36:02,964:INFO:Importing libraries
2025-07-06 11:36:02,964:INFO:Copying training dataset
2025-07-06 11:36:02,975:INFO:Defining folds
2025-07-06 11:36:02,975:INFO:Declaring metric variables
2025-07-06 11:36:02,978:INFO:Importing untrained model
2025-07-06 11:36:02,981:INFO:Linear Discriminant Analysis Imported successfully
2025-07-06 11:36:02,987:INFO:Starting cross validation
2025-07-06 11:36:02,990:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:36:04,314:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,332:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,333:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,334:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,342:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,365:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,367:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,369:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,369:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,369:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,371:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,379:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,382:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,398:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,401:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,403:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,404:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,411:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,413:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,414:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,415:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,418:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,432:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,444:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,444:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,445:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,453:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,458:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,471:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,482:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:04,524:INFO:Calculating mean and std
2025-07-06 11:36:04,526:INFO:Creating metrics dataframe
2025-07-06 11:36:04,529:INFO:Uploading results into container
2025-07-06 11:36:04,530:INFO:Uploading model into container now
2025-07-06 11:36:04,530:INFO:_master_model_container: 25
2025-07-06 11:36:04,530:INFO:_display_container: 3
2025-07-06 11:36:04,531:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-06 11:36:04,531:INFO:create_model() successfully completed......................................
2025-07-06 11:36:04,612:INFO:SubProcess create_model() end ==================================
2025-07-06 11:36:04,612:INFO:Creating metrics dataframe
2025-07-06 11:36:04,621:INFO:Initializing Extra Trees Classifier
2025-07-06 11:36:04,621:INFO:Total runtime is 0.6979697982470195 minutes
2025-07-06 11:36:04,624:INFO:SubProcess create_model() called ==================================
2025-07-06 11:36:04,624:INFO:Initializing create_model()
2025-07-06 11:36:04,624:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:36:04,624:INFO:Checking exceptions
2025-07-06 11:36:04,624:INFO:Importing libraries
2025-07-06 11:36:04,624:INFO:Copying training dataset
2025-07-06 11:36:04,635:INFO:Defining folds
2025-07-06 11:36:04,636:INFO:Declaring metric variables
2025-07-06 11:36:04,639:INFO:Importing untrained model
2025-07-06 11:36:04,642:INFO:Extra Trees Classifier Imported successfully
2025-07-06 11:36:04,648:INFO:Starting cross validation
2025-07-06 11:36:04,650:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:36:09,236:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,246:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,318:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,346:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,383:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,387:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,387:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,418:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,433:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,435:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,435:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,437:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,444:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,447:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,469:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,469:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,471:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,473:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,477:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,479:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,480:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,482:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,495:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,505:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,509:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,516:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,517:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,520:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,531:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,541:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:09,584:INFO:Calculating mean and std
2025-07-06 11:36:09,586:INFO:Creating metrics dataframe
2025-07-06 11:36:09,589:INFO:Uploading results into container
2025-07-06 11:36:09,590:INFO:Uploading model into container now
2025-07-06 11:36:09,590:INFO:_master_model_container: 26
2025-07-06 11:36:09,590:INFO:_display_container: 3
2025-07-06 11:36:09,591:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-07-06 11:36:09,591:INFO:create_model() successfully completed......................................
2025-07-06 11:36:09,680:INFO:SubProcess create_model() end ==================================
2025-07-06 11:36:09,680:INFO:Creating metrics dataframe
2025-07-06 11:36:09,689:INFO:Initializing Light Gradient Boosting Machine
2025-07-06 11:36:09,689:INFO:Total runtime is 0.7824311455090842 minutes
2025-07-06 11:36:09,692:INFO:SubProcess create_model() called ==================================
2025-07-06 11:36:09,692:INFO:Initializing create_model()
2025-07-06 11:36:09,692:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:36:09,692:INFO:Checking exceptions
2025-07-06 11:36:09,692:INFO:Importing libraries
2025-07-06 11:36:09,692:INFO:Copying training dataset
2025-07-06 11:36:09,702:INFO:Defining folds
2025-07-06 11:36:09,702:INFO:Declaring metric variables
2025-07-06 11:36:09,706:INFO:Importing untrained model
2025-07-06 11:36:09,709:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:36:09,714:INFO:Starting cross validation
2025-07-06 11:36:09,717:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:36:13,433:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,456:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,468:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,484:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,503:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,514:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,515:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,530:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,537:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,549:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,560:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,568:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,568:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,584:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,602:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,614:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,627:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,633:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,653:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,672:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,712:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,789:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,819:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,845:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,976:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:13,999:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:14,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:14,031:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:14,039:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:14,065:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:14,118:INFO:Calculating mean and std
2025-07-06 11:36:14,119:INFO:Creating metrics dataframe
2025-07-06 11:36:14,121:INFO:Uploading results into container
2025-07-06 11:36:14,121:INFO:Uploading model into container now
2025-07-06 11:36:14,122:INFO:_master_model_container: 27
2025-07-06 11:36:14,122:INFO:_display_container: 3
2025-07-06 11:36:14,123:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:36:14,123:INFO:create_model() successfully completed......................................
2025-07-06 11:36:14,201:INFO:SubProcess create_model() end ==================================
2025-07-06 11:36:14,201:INFO:Creating metrics dataframe
2025-07-06 11:36:14,210:INFO:Initializing Dummy Classifier
2025-07-06 11:36:14,210:INFO:Total runtime is 0.8577928463617962 minutes
2025-07-06 11:36:14,213:INFO:SubProcess create_model() called ==================================
2025-07-06 11:36:14,214:INFO:Initializing create_model()
2025-07-06 11:36:14,214:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108A622DA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:36:14,214:INFO:Checking exceptions
2025-07-06 11:36:14,214:INFO:Importing libraries
2025-07-06 11:36:14,214:INFO:Copying training dataset
2025-07-06 11:36:14,226:INFO:Defining folds
2025-07-06 11:36:14,226:INFO:Declaring metric variables
2025-07-06 11:36:14,228:INFO:Importing untrained model
2025-07-06 11:36:14,231:INFO:Dummy Classifier Imported successfully
2025-07-06 11:36:14,235:INFO:Starting cross validation
2025-07-06 11:36:14,237:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:36:15,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,123:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,140:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,143:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,147:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,153:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,166:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,170:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,171:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,184:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,186:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,186:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,196:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,197:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,207:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,212:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,214:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,225:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,227:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,230:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,232:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,236:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,238:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,239:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,243:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,245:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,247:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,250:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,252:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,256:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,256:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,257:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,260:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,271:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 11:36:15,277:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,284:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:36:15,332:INFO:Calculating mean and std
2025-07-06 11:36:15,333:INFO:Creating metrics dataframe
2025-07-06 11:36:15,335:INFO:Uploading results into container
2025-07-06 11:36:15,335:INFO:Uploading model into container now
2025-07-06 11:36:15,336:INFO:_master_model_container: 28
2025-07-06 11:36:15,336:INFO:_display_container: 3
2025-07-06 11:36:15,336:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-07-06 11:36:15,336:INFO:create_model() successfully completed......................................
2025-07-06 11:36:15,404:INFO:SubProcess create_model() end ==================================
2025-07-06 11:36:15,404:INFO:Creating metrics dataframe
2025-07-06 11:36:15,412:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-06 11:36:15,419:INFO:Initializing create_model()
2025-07-06 11:36:15,419:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:36:15,419:INFO:Checking exceptions
2025-07-06 11:36:15,421:INFO:Importing libraries
2025-07-06 11:36:15,421:INFO:Copying training dataset
2025-07-06 11:36:15,430:INFO:Defining folds
2025-07-06 11:36:15,430:INFO:Declaring metric variables
2025-07-06 11:36:15,430:INFO:Importing untrained model
2025-07-06 11:36:15,431:INFO:Declaring custom model
2025-07-06 11:36:15,432:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:36:15,433:INFO:Cross validation set to False
2025-07-06 11:36:15,433:INFO:Fitting Model
2025-07-06 11:36:15,805:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 11:36:15,809:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001519 seconds.
2025-07-06 11:36:15,809:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:36:15,810:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:36:15,810:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 11:36:15,810:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 11:36:15,810:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 11:36:15,810:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 11:36:16,094:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:36:16,094:INFO:create_model() successfully completed......................................
2025-07-06 11:36:16,211:INFO:_master_model_container: 28
2025-07-06 11:36:16,211:INFO:_display_container: 3
2025-07-06 11:36:16,212:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:36:16,212:INFO:compare_models() successfully completed......................................
2025-07-06 11:46:40,692:INFO:Initializing evaluate_model()
2025-07-06 11:46:40,693:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-07-06 11:46:40,746:INFO:Initializing plot_model()
2025-07-06 11:46:40,746:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, system=True)
2025-07-06 11:46:40,746:INFO:Checking exceptions
2025-07-06 11:46:40,756:INFO:Preloading libraries
2025-07-06 11:46:40,763:INFO:Copying training dataset
2025-07-06 11:46:40,763:INFO:Plot type: pipeline
2025-07-06 11:46:40,899:INFO:Visual Rendered Successfully
2025-07-06 11:46:40,991:INFO:plot_model() successfully completed......................................
2025-07-06 11:47:54,990:INFO:Initializing create_model()
2025-07-06 11:47:54,990:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:47:54,990:INFO:Checking exceptions
2025-07-06 11:47:55,002:INFO:Importing libraries
2025-07-06 11:47:55,002:INFO:Copying training dataset
2025-07-06 11:47:55,015:INFO:Defining folds
2025-07-06 11:47:55,015:INFO:Declaring metric variables
2025-07-06 11:47:55,019:INFO:Importing untrained model
2025-07-06 11:47:55,023:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:47:55,028:INFO:Starting cross validation
2025-07-06 11:47:55,031:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 11:48:00,775:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:00,807:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:00,840:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:00,894:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:00,922:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:00,951:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,051:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,081:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,085:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,114:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,122:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,151:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,153:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,188:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,257:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,291:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,300:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,325:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,335:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,342:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,371:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,373:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,407:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,575:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,576:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,603:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,604:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,632:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,633:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 11:48:01,683:INFO:Calculating mean and std
2025-07-06 11:48:01,686:INFO:Creating metrics dataframe
2025-07-06 11:48:01,691:INFO:Finalizing model
2025-07-06 11:48:02,095:INFO:[LightGBM] [Info] Number of positive: 3702, number of negative: 27945
2025-07-06 11:48:02,100:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001515 seconds.
2025-07-06 11:48:02,101:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:48:02,101:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:48:02,101:INFO:[LightGBM] [Info] Total Bins 1026
2025-07-06 11:48:02,101:INFO:[LightGBM] [Info] Number of data points in the train set: 31647, number of used features: 48
2025-07-06 11:48:02,102:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116978 -> initscore=-2.021365
2025-07-06 11:48:02,102:INFO:[LightGBM] [Info] Start training from score -2.021365
2025-07-06 11:48:02,266:INFO:Uploading results into container
2025-07-06 11:48:02,268:INFO:Uploading model into container now
2025-07-06 11:48:02,279:INFO:_master_model_container: 29
2025-07-06 11:48:02,279:INFO:_display_container: 4
2025-07-06 11:48:02,280:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:48:02,280:INFO:create_model() successfully completed......................................
2025-07-06 11:55:16,124:INFO:Initializing finalize_model()
2025-07-06 11:55:16,124:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-06 11:55:16,125:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 11:55:16,132:INFO:Initializing create_model()
2025-07-06 11:55:16,132:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 11:55:16,132:INFO:Checking exceptions
2025-07-06 11:55:16,134:INFO:Importing libraries
2025-07-06 11:55:16,134:INFO:Copying training dataset
2025-07-06 11:55:16,135:INFO:Defining folds
2025-07-06 11:55:16,135:INFO:Declaring metric variables
2025-07-06 11:55:16,136:INFO:Importing untrained model
2025-07-06 11:55:16,136:INFO:Declaring custom model
2025-07-06 11:55:16,137:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 11:55:16,139:INFO:Cross validation set to False
2025-07-06 11:55:16,139:INFO:Fitting Model
2025-07-06 11:55:16,680:INFO:[LightGBM] [Info] Number of positive: 5289, number of negative: 39922
2025-07-06 11:55:16,686:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002142 seconds.
2025-07-06 11:55:16,686:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-06 11:55:16,686:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-06 11:55:16,686:INFO:[LightGBM] [Info] Total Bins 1030
2025-07-06 11:55:16,686:INFO:[LightGBM] [Info] Number of data points in the train set: 45211, number of used features: 48
2025-07-06 11:55:16,687:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.116985 -> initscore=-2.021298
2025-07-06 11:55:16,687:INFO:[LightGBM] [Info] Start training from score -2.021298
2025-07-06 11:55:16,978:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-06 11:55:16,979:INFO:create_model() successfully completed......................................
2025-07-06 11:55:17,087:INFO:_master_model_container: 29
2025-07-06 11:55:17,088:INFO:_display_container: 4
2025-07-06 11:55:17,115:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-06 11:55:17,115:INFO:finalize_model() successfully completed......................................
2025-07-06 11:57:00,555:INFO:Initializing plot_model()
2025-07-06 11:57:00,555:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, system=True)
2025-07-06 11:57:00,555:INFO:Checking exceptions
2025-07-06 11:57:00,564:INFO:Preloading libraries
2025-07-06 11:57:00,570:INFO:Copying training dataset
2025-07-06 11:57:00,570:INFO:Plot type: confusion_matrix
2025-07-06 11:57:00,770:INFO:Fitting Model
2025-07-06 11:57:00,770:INFO:Scoring test/hold-out set
2025-07-06 11:57:00,911:INFO:Visual Rendered Successfully
2025-07-06 11:57:00,988:INFO:plot_model() successfully completed......................................
2025-07-06 11:57:01,016:INFO:Initializing plot_model()
2025-07-06 11:57:01,016:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, system=True)
2025-07-06 11:57:01,016:INFO:Checking exceptions
2025-07-06 11:57:01,022:INFO:Preloading libraries
2025-07-06 11:57:01,027:INFO:Copying training dataset
2025-07-06 11:57:01,027:INFO:Plot type: auc
2025-07-06 11:57:01,224:INFO:Fitting Model
2025-07-06 11:57:01,225:INFO:Scoring test/hold-out set
2025-07-06 11:57:01,453:INFO:Visual Rendered Successfully
2025-07-06 11:57:01,537:INFO:plot_model() successfully completed......................................
2025-07-06 11:57:01,563:INFO:Initializing plot_model()
2025-07-06 11:57:01,563:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, system=True)
2025-07-06 11:57:01,563:INFO:Checking exceptions
2025-07-06 11:57:01,576:INFO:Preloading libraries
2025-07-06 11:57:01,580:INFO:Copying training dataset
2025-07-06 11:57:01,580:INFO:Plot type: feature
2025-07-06 11:57:01,582:WARNING:No coef_ found. Trying feature_importances_
2025-07-06 11:57:01,766:INFO:Visual Rendered Successfully
2025-07-06 11:57:01,851:INFO:plot_model() successfully completed......................................
2025-07-06 11:57:01,881:INFO:Initializing plot_model()
2025-07-06 11:57:01,881:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, system=True)
2025-07-06 11:57:01,881:INFO:Checking exceptions
2025-07-06 11:57:01,887:INFO:Preloading libraries
2025-07-06 11:57:01,892:INFO:Copying training dataset
2025-07-06 11:57:01,892:INFO:Plot type: pr
2025-07-06 11:57:02,102:INFO:Fitting Model
2025-07-06 11:57:02,103:INFO:Scoring test/hold-out set
2025-07-06 11:57:02,297:INFO:Visual Rendered Successfully
2025-07-06 11:57:02,380:INFO:plot_model() successfully completed......................................
2025-07-06 11:57:02,407:INFO:Initializing plot_model()
2025-07-06 11:57:02,407:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000021082265960>, system=True)
2025-07-06 11:57:02,407:INFO:Checking exceptions
2025-07-06 11:57:02,413:INFO:Preloading libraries
2025-07-06 11:57:02,418:INFO:Copying training dataset
2025-07-06 11:57:02,418:INFO:Plot type: error
2025-07-06 11:57:02,606:INFO:Fitting Model
2025-07-06 11:57:02,606:INFO:Scoring test/hold-out set
2025-07-06 11:57:02,804:INFO:Visual Rendered Successfully
2025-07-06 11:57:02,882:INFO:plot_model() successfully completed......................................
2025-07-06 12:24:11,083:INFO:PyCaret ClassificationExperiment
2025-07-06 12:24:11,083:INFO:Logging name: clf-default-name
2025-07-06 12:24:11,083:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-06 12:24:11,083:INFO:version 3.3.2
2025-07-06 12:24:11,083:INFO:Initializing setup()
2025-07-06 12:24:11,083:INFO:self.USI: 21ed
2025-07-06 12:24:11,083:INFO:self._variable_keys: {'memory', 'fold_groups_param', 'y', 'X_train', 'X_test', 'fold_shuffle_param', 'gpu_param', 'fix_imbalance', '_available_plots', 'y_test', 'X', 'seed', 'fold_generator', '_ml_usecase', 'html_param', 'y_train', 'exp_id', 'n_jobs_param', 'is_multiclass', 'log_plots_param', 'idx', 'USI', 'data', 'gpu_n_jobs_param', 'exp_name_log', 'target_param', 'pipeline', 'logging_param'}
2025-07-06 12:24:11,083:INFO:Checking environment
2025-07-06 12:24:11,083:INFO:python_version: 3.10.18
2025-07-06 12:24:11,083:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-07-06 12:24:11,083:INFO:machine: AMD64
2025-07-06 12:24:11,083:INFO:platform: Windows-10-10.0.26100-SP0
2025-07-06 12:24:11,087:INFO:Memory: svmem(total=34083729408, available=17097691136, percent=49.8, used=16986038272, free=17097691136)
2025-07-06 12:24:11,087:INFO:Physical Core: 14
2025-07-06 12:24:11,087:INFO:Logical Core: 20
2025-07-06 12:24:11,087:INFO:Checking libraries
2025-07-06 12:24:11,087:INFO:System:
2025-07-06 12:24:11,087:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-07-06 12:24:11,087:INFO:executable: c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\python.exe
2025-07-06 12:24:11,087:INFO:   machine: Windows-10-10.0.26100-SP0
2025-07-06 12:24:11,087:INFO:PyCaret required dependencies:
2025-07-06 12:24:11,087:INFO:                 pip: 25.1
2025-07-06 12:24:11,087:INFO:          setuptools: 78.1.1
2025-07-06 12:24:11,087:INFO:             pycaret: 3.3.2
2025-07-06 12:24:11,087:INFO:             IPython: 8.37.0
2025-07-06 12:24:11,087:INFO:          ipywidgets: 8.1.7
2025-07-06 12:24:11,087:INFO:                tqdm: 4.67.1
2025-07-06 12:24:11,087:INFO:               numpy: 1.26.4
2025-07-06 12:24:11,087:INFO:              pandas: 2.1.4
2025-07-06 12:24:11,087:INFO:              jinja2: 3.1.6
2025-07-06 12:24:11,087:INFO:               scipy: 1.11.4
2025-07-06 12:24:11,087:INFO:              joblib: 1.3.2
2025-07-06 12:24:11,087:INFO:             sklearn: 1.4.2
2025-07-06 12:24:11,087:INFO:                pyod: 2.0.5
2025-07-06 12:24:11,087:INFO:            imblearn: 0.13.0
2025-07-06 12:24:11,087:INFO:   category_encoders: 2.7.0
2025-07-06 12:24:11,087:INFO:            lightgbm: 4.6.0
2025-07-06 12:24:11,088:INFO:               numba: 0.61.2
2025-07-06 12:24:11,088:INFO:            requests: 2.32.4
2025-07-06 12:24:11,088:INFO:          matplotlib: 3.7.5
2025-07-06 12:24:11,088:INFO:          scikitplot: 0.3.7
2025-07-06 12:24:11,088:INFO:         yellowbrick: 1.5
2025-07-06 12:24:11,088:INFO:              plotly: 5.24.1
2025-07-06 12:24:11,088:INFO:    plotly-resampler: Not installed
2025-07-06 12:24:11,088:INFO:             kaleido: 1.0.0
2025-07-06 12:24:11,088:INFO:           schemdraw: 0.15
2025-07-06 12:24:11,088:INFO:         statsmodels: 0.14.4
2025-07-06 12:24:11,088:INFO:              sktime: 0.26.0
2025-07-06 12:24:11,088:INFO:               tbats: 1.1.3
2025-07-06 12:24:11,088:INFO:            pmdarima: 2.0.4
2025-07-06 12:24:11,088:INFO:              psutil: 7.0.0
2025-07-06 12:24:11,088:INFO:          markupsafe: 3.0.2
2025-07-06 12:24:11,088:INFO:             pickle5: Not installed
2025-07-06 12:24:11,088:INFO:         cloudpickle: 3.1.1
2025-07-06 12:24:11,088:INFO:         deprecation: 2.1.0
2025-07-06 12:24:11,088:INFO:              xxhash: 3.5.0
2025-07-06 12:24:11,088:INFO:           wurlitzer: Not installed
2025-07-06 12:24:11,088:INFO:PyCaret optional dependencies:
2025-07-06 12:24:11,088:INFO:                shap: Not installed
2025-07-06 12:24:11,088:INFO:           interpret: Not installed
2025-07-06 12:24:11,088:INFO:                umap: Not installed
2025-07-06 12:24:11,088:INFO:     ydata_profiling: Not installed
2025-07-06 12:24:11,088:INFO:  explainerdashboard: Not installed
2025-07-06 12:24:11,088:INFO:             autoviz: Not installed
2025-07-06 12:24:11,088:INFO:           fairlearn: Not installed
2025-07-06 12:24:11,088:INFO:          deepchecks: Not installed
2025-07-06 12:24:11,088:INFO:             xgboost: Not installed
2025-07-06 12:24:11,088:INFO:            catboost: Not installed
2025-07-06 12:24:11,088:INFO:              kmodes: Not installed
2025-07-06 12:24:11,088:INFO:             mlxtend: Not installed
2025-07-06 12:24:11,088:INFO:       statsforecast: Not installed
2025-07-06 12:24:11,088:INFO:        tune_sklearn: Not installed
2025-07-06 12:24:11,088:INFO:                 ray: Not installed
2025-07-06 12:24:11,088:INFO:            hyperopt: Not installed
2025-07-06 12:24:11,088:INFO:              optuna: Not installed
2025-07-06 12:24:11,089:INFO:               skopt: Not installed
2025-07-06 12:24:11,089:INFO:              mlflow: Not installed
2025-07-06 12:24:11,089:INFO:              gradio: Not installed
2025-07-06 12:24:11,089:INFO:             fastapi: Not installed
2025-07-06 12:24:11,089:INFO:             uvicorn: Not installed
2025-07-06 12:24:11,089:INFO:              m2cgen: Not installed
2025-07-06 12:24:11,089:INFO:           evidently: Not installed
2025-07-06 12:24:11,089:INFO:               fugue: Not installed
2025-07-06 12:24:11,089:INFO:           streamlit: Not installed
2025-07-06 12:24:11,089:INFO:             prophet: Not installed
2025-07-06 12:24:11,089:INFO:None
2025-07-06 12:24:11,089:INFO:Set up data.
2025-07-06 12:24:11,134:INFO:Set up folding strategy.
2025-07-06 12:24:11,134:INFO:Set up train/test split.
2025-07-06 12:24:11,167:INFO:Set up index.
2025-07-06 12:24:11,168:INFO:Assigning column types.
2025-07-06 12:24:11,173:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-06 12:24:11,214:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 12:24:11,214:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 12:24:11,247:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,247:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,299:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 12:24:11,300:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 12:24:11,332:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,332:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,332:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-06 12:24:11,367:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 12:24:11,388:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,388:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,423:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 12:24:11,443:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,443:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,444:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-06 12:24:11,500:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,500:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,556:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,556:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:11,557:INFO:Preparing preprocessing pipeline...
2025-07-06 12:24:11,558:INFO:Set up label encoding.
2025-07-06 12:24:11,558:INFO:Set up simple imputation.
2025-07-06 12:24:11,565:INFO:Set up encoding of ordinal features.
2025-07-06 12:24:11,570:INFO:Set up encoding of categorical features.
2025-07-06 12:24:11,953:INFO:Finished creating preprocessing pipeline.
2025-07-06 12:24:11,977:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'campaign',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-06 12:24:11,977:INFO:Creating final display dataframe.
2025-07-06 12:24:12,732:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target                 y
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (45211, 14)
5        Transformed data shape       (45211, 46)
6   Transformed train set shape       (31647, 46)
7    Transformed test set shape       (13564, 46)
8              Numeric features                 4
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              21ed
2025-07-06 12:24:12,794:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:12,794:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:12,849:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:12,850:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:24:12,851:INFO:setup() successfully completed in 1.77s...............
2025-07-06 12:35:45,607:INFO:PyCaret ClassificationExperiment
2025-07-06 12:35:45,607:INFO:Logging name: clf-default-name
2025-07-06 12:35:45,607:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-06 12:35:45,607:INFO:version 3.3.2
2025-07-06 12:35:45,607:INFO:Initializing setup()
2025-07-06 12:35:45,607:INFO:self.USI: 2fa7
2025-07-06 12:35:45,607:INFO:self._variable_keys: {'memory', 'fold_groups_param', 'y', 'X_train', 'X_test', 'fold_shuffle_param', 'gpu_param', 'fix_imbalance', '_available_plots', 'y_test', 'X', 'seed', 'fold_generator', '_ml_usecase', 'html_param', 'y_train', 'exp_id', 'n_jobs_param', 'is_multiclass', 'log_plots_param', 'idx', 'USI', 'data', 'gpu_n_jobs_param', 'exp_name_log', 'target_param', 'pipeline', 'logging_param'}
2025-07-06 12:35:45,607:INFO:Checking environment
2025-07-06 12:35:45,607:INFO:python_version: 3.10.18
2025-07-06 12:35:45,607:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-07-06 12:35:45,607:INFO:machine: AMD64
2025-07-06 12:35:45,607:INFO:platform: Windows-10-10.0.26100-SP0
2025-07-06 12:35:45,611:INFO:Memory: svmem(total=34083729408, available=17880498176, percent=47.5, used=16203231232, free=17880498176)
2025-07-06 12:35:45,611:INFO:Physical Core: 14
2025-07-06 12:35:45,611:INFO:Logical Core: 20
2025-07-06 12:35:45,611:INFO:Checking libraries
2025-07-06 12:35:45,611:INFO:System:
2025-07-06 12:35:45,611:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-07-06 12:35:45,611:INFO:executable: c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\python.exe
2025-07-06 12:35:45,612:INFO:   machine: Windows-10-10.0.26100-SP0
2025-07-06 12:35:45,612:INFO:PyCaret required dependencies:
2025-07-06 12:35:45,612:INFO:                 pip: 25.1
2025-07-06 12:35:45,612:INFO:          setuptools: 78.1.1
2025-07-06 12:35:45,612:INFO:             pycaret: 3.3.2
2025-07-06 12:35:45,612:INFO:             IPython: 8.37.0
2025-07-06 12:35:45,612:INFO:          ipywidgets: 8.1.7
2025-07-06 12:35:45,612:INFO:                tqdm: 4.67.1
2025-07-06 12:35:45,612:INFO:               numpy: 1.26.4
2025-07-06 12:35:45,612:INFO:              pandas: 2.1.4
2025-07-06 12:35:45,612:INFO:              jinja2: 3.1.6
2025-07-06 12:35:45,612:INFO:               scipy: 1.11.4
2025-07-06 12:35:45,612:INFO:              joblib: 1.3.2
2025-07-06 12:35:45,612:INFO:             sklearn: 1.4.2
2025-07-06 12:35:45,612:INFO:                pyod: 2.0.5
2025-07-06 12:35:45,612:INFO:            imblearn: 0.13.0
2025-07-06 12:35:45,612:INFO:   category_encoders: 2.7.0
2025-07-06 12:35:45,612:INFO:            lightgbm: 4.6.0
2025-07-06 12:35:45,612:INFO:               numba: 0.61.2
2025-07-06 12:35:45,612:INFO:            requests: 2.32.4
2025-07-06 12:35:45,612:INFO:          matplotlib: 3.7.5
2025-07-06 12:35:45,612:INFO:          scikitplot: 0.3.7
2025-07-06 12:35:45,612:INFO:         yellowbrick: 1.5
2025-07-06 12:35:45,612:INFO:              plotly: 5.24.1
2025-07-06 12:35:45,612:INFO:    plotly-resampler: Not installed
2025-07-06 12:35:45,612:INFO:             kaleido: 1.0.0
2025-07-06 12:35:45,612:INFO:           schemdraw: 0.15
2025-07-06 12:35:45,612:INFO:         statsmodels: 0.14.4
2025-07-06 12:35:45,612:INFO:              sktime: 0.26.0
2025-07-06 12:35:45,612:INFO:               tbats: 1.1.3
2025-07-06 12:35:45,612:INFO:            pmdarima: 2.0.4
2025-07-06 12:35:45,612:INFO:              psutil: 7.0.0
2025-07-06 12:35:45,612:INFO:          markupsafe: 3.0.2
2025-07-06 12:35:45,612:INFO:             pickle5: Not installed
2025-07-06 12:35:45,613:INFO:         cloudpickle: 3.1.1
2025-07-06 12:35:45,613:INFO:         deprecation: 2.1.0
2025-07-06 12:35:45,613:INFO:              xxhash: 3.5.0
2025-07-06 12:35:45,613:INFO:           wurlitzer: Not installed
2025-07-06 12:35:45,613:INFO:PyCaret optional dependencies:
2025-07-06 12:35:45,613:INFO:                shap: Not installed
2025-07-06 12:35:45,613:INFO:           interpret: Not installed
2025-07-06 12:35:45,613:INFO:                umap: Not installed
2025-07-06 12:35:45,613:INFO:     ydata_profiling: Not installed
2025-07-06 12:35:45,613:INFO:  explainerdashboard: Not installed
2025-07-06 12:35:45,613:INFO:             autoviz: Not installed
2025-07-06 12:35:45,613:INFO:           fairlearn: Not installed
2025-07-06 12:35:45,613:INFO:          deepchecks: Not installed
2025-07-06 12:35:45,613:INFO:             xgboost: Not installed
2025-07-06 12:35:45,613:INFO:            catboost: Not installed
2025-07-06 12:35:45,613:INFO:              kmodes: Not installed
2025-07-06 12:35:45,613:INFO:             mlxtend: Not installed
2025-07-06 12:35:45,613:INFO:       statsforecast: Not installed
2025-07-06 12:35:45,613:INFO:        tune_sklearn: Not installed
2025-07-06 12:35:45,613:INFO:                 ray: Not installed
2025-07-06 12:35:45,613:INFO:            hyperopt: Not installed
2025-07-06 12:35:45,613:INFO:              optuna: Not installed
2025-07-06 12:35:45,613:INFO:               skopt: Not installed
2025-07-06 12:35:45,613:INFO:              mlflow: Not installed
2025-07-06 12:35:45,613:INFO:              gradio: Not installed
2025-07-06 12:35:45,613:INFO:             fastapi: Not installed
2025-07-06 12:35:45,613:INFO:             uvicorn: Not installed
2025-07-06 12:35:45,613:INFO:              m2cgen: Not installed
2025-07-06 12:35:45,613:INFO:           evidently: Not installed
2025-07-06 12:35:45,613:INFO:               fugue: Not installed
2025-07-06 12:35:45,613:INFO:           streamlit: Not installed
2025-07-06 12:35:45,613:INFO:             prophet: Not installed
2025-07-06 12:35:45,613:INFO:None
2025-07-06 12:35:45,613:INFO:Set up data.
2025-07-06 12:35:45,651:INFO:Set up folding strategy.
2025-07-06 12:35:45,651:INFO:Set up train/test split.
2025-07-06 12:35:45,682:INFO:Set up index.
2025-07-06 12:35:45,683:INFO:Assigning column types.
2025-07-06 12:35:45,687:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-06 12:35:45,720:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 12:35:45,721:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 12:35:45,742:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,742:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,778:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 12:35:45,779:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 12:35:45,800:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,800:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,800:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-06 12:35:45,835:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 12:35:45,856:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,856:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,891:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 12:35:45,912:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,912:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,912:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-06 12:35:45,969:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:45,969:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:46,025:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:46,025:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:46,027:INFO:Preparing preprocessing pipeline...
2025-07-06 12:35:46,029:INFO:Set up label encoding.
2025-07-06 12:35:46,029:INFO:Set up simple imputation.
2025-07-06 12:35:46,036:INFO:Set up encoding of ordinal features.
2025-07-06 12:35:46,043:INFO:Set up encoding of categorical features.
2025-07-06 12:35:46,250:INFO:Finished creating preprocessing pipeline.
2025-07-06 12:35:46,276:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'campaign',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=Tru...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-06 12:35:46,276:INFO:Creating final display dataframe.
2025-07-06 12:35:47,031:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target                 y
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape       (45211, 14)
5        Transformed data shape       (45211, 46)
6   Transformed train set shape       (31647, 46)
7    Transformed test set shape       (13564, 46)
8              Numeric features                 4
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              2fa7
2025-07-06 12:35:47,093:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:47,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:47,149:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:47,150:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 12:35:47,151:INFO:setup() successfully completed in 1.55s...............
2025-07-06 12:36:22,175:INFO:Initializing compare_models()
2025-07-06 12:36:22,176:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-06 12:36:22,176:INFO:Checking exceptions
2025-07-06 12:36:22,183:INFO:Preparing display monitor
2025-07-06 12:36:22,204:INFO:Initializing Logistic Regression
2025-07-06 12:36:22,204:INFO:Total runtime is 0.0 minutes
2025-07-06 12:36:22,207:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:22,207:INFO:Initializing create_model()
2025-07-06 12:36:22,207:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:22,207:INFO:Checking exceptions
2025-07-06 12:36:22,208:INFO:Importing libraries
2025-07-06 12:36:22,208:INFO:Copying training dataset
2025-07-06 12:36:22,220:INFO:Defining folds
2025-07-06 12:36:22,220:INFO:Declaring metric variables
2025-07-06 12:36:22,224:INFO:Importing untrained model
2025-07-06 12:36:22,226:INFO:Logistic Regression Imported successfully
2025-07-06 12:36:22,231:INFO:Starting cross validation
2025-07-06 12:36:22,234:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:33,628:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,659:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,701:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,726:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,736:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,756:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,778:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,792:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,800:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,801:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,822:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,826:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,832:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,834:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,855:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,877:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,888:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,890:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,901:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,910:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,923:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,925:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,937:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,945:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,946:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:33,965:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,968:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:33,992:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,013:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,021:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 12:36:34,035:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,035:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,058:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,058:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,081:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,107:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,132:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,149:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:34,176:INFO:Calculating mean and std
2025-07-06 12:36:34,178:INFO:Creating metrics dataframe
2025-07-06 12:36:34,179:INFO:Uploading results into container
2025-07-06 12:36:34,180:INFO:Uploading model into container now
2025-07-06 12:36:34,180:INFO:_master_model_container: 1
2025-07-06 12:36:34,180:INFO:_display_container: 2
2025-07-06 12:36:34,181:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-06 12:36:34,181:INFO:create_model() successfully completed......................................
2025-07-06 12:36:34,298:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:34,298:INFO:Creating metrics dataframe
2025-07-06 12:36:34,303:INFO:Initializing K Neighbors Classifier
2025-07-06 12:36:34,303:INFO:Total runtime is 0.20165592034657795 minutes
2025-07-06 12:36:34,306:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:34,306:INFO:Initializing create_model()
2025-07-06 12:36:34,306:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:34,307:INFO:Checking exceptions
2025-07-06 12:36:34,307:INFO:Importing libraries
2025-07-06 12:36:34,307:INFO:Copying training dataset
2025-07-06 12:36:34,316:INFO:Defining folds
2025-07-06 12:36:34,316:INFO:Declaring metric variables
2025-07-06 12:36:34,319:INFO:Importing untrained model
2025-07-06 12:36:34,322:INFO:K Neighbors Classifier Imported successfully
2025-07-06 12:36:34,328:INFO:Starting cross validation
2025-07-06 12:36:34,330:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:39,373:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,397:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,423:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,563:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,568:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,585:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,590:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,597:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,610:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,612:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,619:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,623:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,636:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,640:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,659:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,675:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,675:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,685:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,695:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,697:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,702:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,715:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,720:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,721:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,738:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,743:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,743:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,764:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,765:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,786:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:39,821:INFO:Calculating mean and std
2025-07-06 12:36:39,822:INFO:Creating metrics dataframe
2025-07-06 12:36:39,824:INFO:Uploading results into container
2025-07-06 12:36:39,825:INFO:Uploading model into container now
2025-07-06 12:36:39,825:INFO:_master_model_container: 2
2025-07-06 12:36:39,825:INFO:_display_container: 2
2025-07-06 12:36:39,825:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-06 12:36:39,826:INFO:create_model() successfully completed......................................
2025-07-06 12:36:39,910:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:39,911:INFO:Creating metrics dataframe
2025-07-06 12:36:39,916:INFO:Initializing Naive Bayes
2025-07-06 12:36:39,916:INFO:Total runtime is 0.2951999584833781 minutes
2025-07-06 12:36:39,919:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:39,919:INFO:Initializing create_model()
2025-07-06 12:36:39,919:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:39,920:INFO:Checking exceptions
2025-07-06 12:36:39,920:INFO:Importing libraries
2025-07-06 12:36:39,920:INFO:Copying training dataset
2025-07-06 12:36:39,929:INFO:Defining folds
2025-07-06 12:36:39,929:INFO:Declaring metric variables
2025-07-06 12:36:39,933:INFO:Importing untrained model
2025-07-06 12:36:39,936:INFO:Naive Bayes Imported successfully
2025-07-06 12:36:39,942:INFO:Starting cross validation
2025-07-06 12:36:39,946:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:40,839:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,853:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,862:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,874:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,875:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,876:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,876:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,885:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,889:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,897:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,900:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,902:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,903:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,904:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,904:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,908:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,912:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,916:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,920:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,932:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,932:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,936:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,937:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,938:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,939:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,948:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,966:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,971:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,971:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:40,972:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:41,010:INFO:Calculating mean and std
2025-07-06 12:36:41,011:INFO:Creating metrics dataframe
2025-07-06 12:36:41,013:INFO:Uploading results into container
2025-07-06 12:36:41,013:INFO:Uploading model into container now
2025-07-06 12:36:41,015:INFO:_master_model_container: 3
2025-07-06 12:36:41,015:INFO:_display_container: 2
2025-07-06 12:36:41,015:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-06 12:36:41,015:INFO:create_model() successfully completed......................................
2025-07-06 12:36:41,092:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:41,092:INFO:Creating metrics dataframe
2025-07-06 12:36:41,098:INFO:Initializing Decision Tree Classifier
2025-07-06 12:36:41,098:INFO:Total runtime is 0.3149012565612793 minutes
2025-07-06 12:36:41,100:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:41,101:INFO:Initializing create_model()
2025-07-06 12:36:41,101:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:41,101:INFO:Checking exceptions
2025-07-06 12:36:41,101:INFO:Importing libraries
2025-07-06 12:36:41,101:INFO:Copying training dataset
2025-07-06 12:36:41,110:INFO:Defining folds
2025-07-06 12:36:41,110:INFO:Declaring metric variables
2025-07-06 12:36:41,112:INFO:Importing untrained model
2025-07-06 12:36:41,115:INFO:Decision Tree Classifier Imported successfully
2025-07-06 12:36:41,123:INFO:Starting cross validation
2025-07-06 12:36:41,126:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:42,279:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,288:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,300:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,311:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,313:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,321:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,326:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,327:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,338:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,344:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,348:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,349:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,350:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,354:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,357:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,366:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,370:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,372:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,374:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,385:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,385:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,393:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,394:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,396:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,400:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,416:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,417:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,418:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,422:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,448:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:42,483:INFO:Calculating mean and std
2025-07-06 12:36:42,483:INFO:Creating metrics dataframe
2025-07-06 12:36:42,486:INFO:Uploading results into container
2025-07-06 12:36:42,486:INFO:Uploading model into container now
2025-07-06 12:36:42,487:INFO:_master_model_container: 4
2025-07-06 12:36:42,487:INFO:_display_container: 2
2025-07-06 12:36:42,487:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-07-06 12:36:42,487:INFO:create_model() successfully completed......................................
2025-07-06 12:36:42,565:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:42,566:INFO:Creating metrics dataframe
2025-07-06 12:36:42,572:INFO:Initializing SVM - Linear Kernel
2025-07-06 12:36:42,572:INFO:Total runtime is 0.3394632617632548 minutes
2025-07-06 12:36:42,575:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:42,575:INFO:Initializing create_model()
2025-07-06 12:36:42,575:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:42,576:INFO:Checking exceptions
2025-07-06 12:36:42,576:INFO:Importing libraries
2025-07-06 12:36:42,576:INFO:Copying training dataset
2025-07-06 12:36:42,584:INFO:Defining folds
2025-07-06 12:36:42,584:INFO:Declaring metric variables
2025-07-06 12:36:42,586:INFO:Importing untrained model
2025-07-06 12:36:42,589:INFO:SVM - Linear Kernel Imported successfully
2025-07-06 12:36:42,597:INFO:Starting cross validation
2025-07-06 12:36:42,599:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:43,656:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,684:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,686:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,697:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,714:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,715:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,722:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,726:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,741:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,743:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,748:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,764:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,775:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,816:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,840:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,841:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,841:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,868:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,869:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,875:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,877:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,884:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,891:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,893:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,896:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,899:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,906:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,912:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,921:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,929:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:43,970:INFO:Calculating mean and std
2025-07-06 12:36:43,970:INFO:Creating metrics dataframe
2025-07-06 12:36:43,973:INFO:Uploading results into container
2025-07-06 12:36:43,973:INFO:Uploading model into container now
2025-07-06 12:36:43,974:INFO:_master_model_container: 5
2025-07-06 12:36:43,974:INFO:_display_container: 2
2025-07-06 12:36:43,974:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-06 12:36:43,975:INFO:create_model() successfully completed......................................
2025-07-06 12:36:44,051:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:44,052:INFO:Creating metrics dataframe
2025-07-06 12:36:44,058:INFO:Initializing Ridge Classifier
2025-07-06 12:36:44,058:INFO:Total runtime is 0.36423651774724325 minutes
2025-07-06 12:36:44,061:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:44,061:INFO:Initializing create_model()
2025-07-06 12:36:44,061:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:44,061:INFO:Checking exceptions
2025-07-06 12:36:44,061:INFO:Importing libraries
2025-07-06 12:36:44,061:INFO:Copying training dataset
2025-07-06 12:36:44,069:INFO:Defining folds
2025-07-06 12:36:44,070:INFO:Declaring metric variables
2025-07-06 12:36:44,073:INFO:Importing untrained model
2025-07-06 12:36:44,076:INFO:Ridge Classifier Imported successfully
2025-07-06 12:36:44,083:INFO:Starting cross validation
2025-07-06 12:36:44,086:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:44,850:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,882:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,905:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,917:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,926:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,948:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,964:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,967:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,970:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,971:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,972:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,992:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,993:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,997:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,998:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:44,998:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,000:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,001:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,019:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,019:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,021:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,022:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,024:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,027:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,027:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,040:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,047:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,062:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,062:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:45,101:INFO:Calculating mean and std
2025-07-06 12:36:45,101:INFO:Creating metrics dataframe
2025-07-06 12:36:45,103:INFO:Uploading results into container
2025-07-06 12:36:45,104:INFO:Uploading model into container now
2025-07-06 12:36:45,104:INFO:_master_model_container: 6
2025-07-06 12:36:45,105:INFO:_display_container: 2
2025-07-06 12:36:45,105:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-07-06 12:36:45,105:INFO:create_model() successfully completed......................................
2025-07-06 12:36:45,185:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:45,185:INFO:Creating metrics dataframe
2025-07-06 12:36:45,192:INFO:Initializing Random Forest Classifier
2025-07-06 12:36:45,192:INFO:Total runtime is 0.3831318775812785 minutes
2025-07-06 12:36:45,195:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:45,195:INFO:Initializing create_model()
2025-07-06 12:36:45,195:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:45,195:INFO:Checking exceptions
2025-07-06 12:36:45,195:INFO:Importing libraries
2025-07-06 12:36:45,195:INFO:Copying training dataset
2025-07-06 12:36:45,205:INFO:Defining folds
2025-07-06 12:36:45,205:INFO:Declaring metric variables
2025-07-06 12:36:45,210:INFO:Importing untrained model
2025-07-06 12:36:45,213:INFO:Random Forest Classifier Imported successfully
2025-07-06 12:36:45,219:INFO:Starting cross validation
2025-07-06 12:36:45,222:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:49,419:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,439:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,439:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,442:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,469:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,490:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,494:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,500:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,529:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,548:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,548:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,560:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,578:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,581:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,608:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,609:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,620:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,620:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,633:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,639:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,643:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,646:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,647:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,656:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,662:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,668:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,679:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,682:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,691:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:49,736:INFO:Calculating mean and std
2025-07-06 12:36:49,737:INFO:Creating metrics dataframe
2025-07-06 12:36:49,739:INFO:Uploading results into container
2025-07-06 12:36:49,739:INFO:Uploading model into container now
2025-07-06 12:36:49,740:INFO:_master_model_container: 7
2025-07-06 12:36:49,740:INFO:_display_container: 2
2025-07-06 12:36:49,740:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-07-06 12:36:49,740:INFO:create_model() successfully completed......................................
2025-07-06 12:36:49,820:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:49,820:INFO:Creating metrics dataframe
2025-07-06 12:36:49,827:INFO:Initializing Quadratic Discriminant Analysis
2025-07-06 12:36:49,827:INFO:Total runtime is 0.46038657824198403 minutes
2025-07-06 12:36:49,830:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:49,830:INFO:Initializing create_model()
2025-07-06 12:36:49,830:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:49,830:INFO:Checking exceptions
2025-07-06 12:36:49,830:INFO:Importing libraries
2025-07-06 12:36:49,830:INFO:Copying training dataset
2025-07-06 12:36:49,839:INFO:Defining folds
2025-07-06 12:36:49,839:INFO:Declaring metric variables
2025-07-06 12:36:49,842:INFO:Importing untrained model
2025-07-06 12:36:49,845:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-06 12:36:49,851:INFO:Starting cross validation
2025-07-06 12:36:49,854:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:50,773:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,814:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,845:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,880:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,919:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,924:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,928:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,947:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,958:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,965:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 12:36:50,978:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,017:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,019:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,034:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,050:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,050:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,055:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,065:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,071:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,077:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,077:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,082:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,083:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,097:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,099:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,103:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,104:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,106:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,110:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,127:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,128:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,129:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,138:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,142:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,147:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,154:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,161:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,168:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:51,213:INFO:Calculating mean and std
2025-07-06 12:36:51,214:INFO:Creating metrics dataframe
2025-07-06 12:36:51,216:INFO:Uploading results into container
2025-07-06 12:36:51,216:INFO:Uploading model into container now
2025-07-06 12:36:51,217:INFO:_master_model_container: 8
2025-07-06 12:36:51,217:INFO:_display_container: 2
2025-07-06 12:36:51,217:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-06 12:36:51,217:INFO:create_model() successfully completed......................................
2025-07-06 12:36:51,304:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:51,304:INFO:Creating metrics dataframe
2025-07-06 12:36:51,312:INFO:Initializing Ada Boost Classifier
2025-07-06 12:36:51,312:INFO:Total runtime is 0.48513303200403846 minutes
2025-07-06 12:36:51,315:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:51,315:INFO:Initializing create_model()
2025-07-06 12:36:51,315:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:51,315:INFO:Checking exceptions
2025-07-06 12:36:51,315:INFO:Importing libraries
2025-07-06 12:36:51,316:INFO:Copying training dataset
2025-07-06 12:36:51,325:INFO:Defining folds
2025-07-06 12:36:51,325:INFO:Declaring metric variables
2025-07-06 12:36:51,328:INFO:Importing untrained model
2025-07-06 12:36:51,331:INFO:Ada Boost Classifier Imported successfully
2025-07-06 12:36:51,336:INFO:Starting cross validation
2025-07-06 12:36:51,340:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:36:52,033:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,066:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,084:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,085:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,111:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,120:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,124:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,135:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,137:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:52,165:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 12:36:53,963:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:53,989:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:53,993:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,012:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,026:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,030:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,048:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,050:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,054:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,057:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,079:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,087:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,087:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,087:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,088:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,089:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,109:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,114:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,121:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,127:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,140:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,145:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,151:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,152:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,165:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,179:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,191:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,201:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,213:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:36:54,252:INFO:Calculating mean and std
2025-07-06 12:36:54,254:INFO:Creating metrics dataframe
2025-07-06 12:36:54,256:INFO:Uploading results into container
2025-07-06 12:36:54,256:INFO:Uploading model into container now
2025-07-06 12:36:54,257:INFO:_master_model_container: 9
2025-07-06 12:36:54,257:INFO:_display_container: 2
2025-07-06 12:36:54,257:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-07-06 12:36:54,257:INFO:create_model() successfully completed......................................
2025-07-06 12:36:54,336:INFO:SubProcess create_model() end ==================================
2025-07-06 12:36:54,336:INFO:Creating metrics dataframe
2025-07-06 12:36:54,344:INFO:Initializing Gradient Boosting Classifier
2025-07-06 12:36:54,344:INFO:Total runtime is 0.5356614192326863 minutes
2025-07-06 12:36:54,347:INFO:SubProcess create_model() called ==================================
2025-07-06 12:36:54,347:INFO:Initializing create_model()
2025-07-06 12:36:54,348:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:36:54,348:INFO:Checking exceptions
2025-07-06 12:36:54,348:INFO:Importing libraries
2025-07-06 12:36:54,348:INFO:Copying training dataset
2025-07-06 12:36:54,357:INFO:Defining folds
2025-07-06 12:36:54,357:INFO:Declaring metric variables
2025-07-06 12:36:54,360:INFO:Importing untrained model
2025-07-06 12:36:54,363:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 12:36:54,368:INFO:Starting cross validation
2025-07-06 12:36:54,371:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:37:00,354:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,381:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,404:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,414:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,430:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,437:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,461:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,467:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,493:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,499:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,500:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,528:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,538:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,542:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,549:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,551:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,557:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,563:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,565:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,570:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,571:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,573:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,584:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,589:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,591:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,598:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,600:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,616:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,616:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,639:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:00,679:INFO:Calculating mean and std
2025-07-06 12:37:00,680:INFO:Creating metrics dataframe
2025-07-06 12:37:00,682:INFO:Uploading results into container
2025-07-06 12:37:00,682:INFO:Uploading model into container now
2025-07-06 12:37:00,682:INFO:_master_model_container: 10
2025-07-06 12:37:00,683:INFO:_display_container: 2
2025-07-06 12:37:00,683:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 12:37:00,683:INFO:create_model() successfully completed......................................
2025-07-06 12:37:00,761:INFO:SubProcess create_model() end ==================================
2025-07-06 12:37:00,761:INFO:Creating metrics dataframe
2025-07-06 12:37:00,768:INFO:Initializing Linear Discriminant Analysis
2025-07-06 12:37:00,768:INFO:Total runtime is 0.6427345355351766 minutes
2025-07-06 12:37:00,771:INFO:SubProcess create_model() called ==================================
2025-07-06 12:37:00,772:INFO:Initializing create_model()
2025-07-06 12:37:00,772:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:37:00,772:INFO:Checking exceptions
2025-07-06 12:37:00,772:INFO:Importing libraries
2025-07-06 12:37:00,772:INFO:Copying training dataset
2025-07-06 12:37:00,781:INFO:Defining folds
2025-07-06 12:37:00,781:INFO:Declaring metric variables
2025-07-06 12:37:00,784:INFO:Importing untrained model
2025-07-06 12:37:00,787:INFO:Linear Discriminant Analysis Imported successfully
2025-07-06 12:37:00,793:INFO:Starting cross validation
2025-07-06 12:37:00,795:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:37:01,904:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:01,927:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:01,950:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:01,952:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:01,975:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:01,987:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:01,990:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,003:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,019:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,022:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,028:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,036:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,041:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,042:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,052:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,054:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,054:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,055:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,057:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,065:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,072:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,072:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,076:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,076:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,093:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,094:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,096:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,099:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,108:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,118:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:02,159:INFO:Calculating mean and std
2025-07-06 12:37:02,160:INFO:Creating metrics dataframe
2025-07-06 12:37:02,162:INFO:Uploading results into container
2025-07-06 12:37:02,162:INFO:Uploading model into container now
2025-07-06 12:37:02,163:INFO:_master_model_container: 11
2025-07-06 12:37:02,163:INFO:_display_container: 2
2025-07-06 12:37:02,163:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-06 12:37:02,163:INFO:create_model() successfully completed......................................
2025-07-06 12:37:02,241:INFO:SubProcess create_model() end ==================================
2025-07-06 12:37:02,241:INFO:Creating metrics dataframe
2025-07-06 12:37:02,249:INFO:Initializing Extra Trees Classifier
2025-07-06 12:37:02,249:INFO:Total runtime is 0.6674206376075744 minutes
2025-07-06 12:37:02,252:INFO:SubProcess create_model() called ==================================
2025-07-06 12:37:02,252:INFO:Initializing create_model()
2025-07-06 12:37:02,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:37:02,252:INFO:Checking exceptions
2025-07-06 12:37:02,252:INFO:Importing libraries
2025-07-06 12:37:02,252:INFO:Copying training dataset
2025-07-06 12:37:02,262:INFO:Defining folds
2025-07-06 12:37:02,263:INFO:Declaring metric variables
2025-07-06 12:37:02,267:INFO:Importing untrained model
2025-07-06 12:37:02,270:INFO:Extra Trees Classifier Imported successfully
2025-07-06 12:37:02,277:INFO:Starting cross validation
2025-07-06 12:37:02,280:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:37:06,740:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,753:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,820:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,849:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,879:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,880:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,891:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,892:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,909:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,922:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,923:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,925:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,928:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,931:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,940:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,942:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,952:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,964:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,964:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,966:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,967:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,972:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,975:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,983:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,992:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:06,992:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:07,001:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:07,006:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:07,017:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:07,021:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:07,069:INFO:Calculating mean and std
2025-07-06 12:37:07,070:INFO:Creating metrics dataframe
2025-07-06 12:37:07,072:INFO:Uploading results into container
2025-07-06 12:37:07,073:INFO:Uploading model into container now
2025-07-06 12:37:07,073:INFO:_master_model_container: 12
2025-07-06 12:37:07,073:INFO:_display_container: 2
2025-07-06 12:37:07,074:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-07-06 12:37:07,074:INFO:create_model() successfully completed......................................
2025-07-06 12:37:07,157:INFO:SubProcess create_model() end ==================================
2025-07-06 12:37:07,157:INFO:Creating metrics dataframe
2025-07-06 12:37:07,165:INFO:Initializing Light Gradient Boosting Machine
2025-07-06 12:37:07,165:INFO:Total runtime is 0.7493545850118001 minutes
2025-07-06 12:37:07,168:INFO:SubProcess create_model() called ==================================
2025-07-06 12:37:07,168:INFO:Initializing create_model()
2025-07-06 12:37:07,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:37:07,168:INFO:Checking exceptions
2025-07-06 12:37:07,168:INFO:Importing libraries
2025-07-06 12:37:07,169:INFO:Copying training dataset
2025-07-06 12:37:07,177:INFO:Defining folds
2025-07-06 12:37:07,177:INFO:Declaring metric variables
2025-07-06 12:37:07,180:INFO:Importing untrained model
2025-07-06 12:37:07,183:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 12:37:07,189:INFO:Starting cross validation
2025-07-06 12:37:07,191:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:37:10,596:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,625:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,630:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,676:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,676:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,678:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,690:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,702:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,735:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,741:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,742:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,746:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,754:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,759:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,772:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,811:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,810:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,821:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,830:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,865:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,873:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,900:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,944:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:10,983:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:11,034:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:11,039:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:11,067:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:11,077:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:11,103:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:11,115:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:11,149:INFO:Calculating mean and std
2025-07-06 12:37:11,150:INFO:Creating metrics dataframe
2025-07-06 12:37:11,152:INFO:Uploading results into container
2025-07-06 12:37:11,153:INFO:Uploading model into container now
2025-07-06 12:37:11,153:INFO:_master_model_container: 13
2025-07-06 12:37:11,153:INFO:_display_container: 2
2025-07-06 12:37:11,154:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 12:37:11,154:INFO:create_model() successfully completed......................................
2025-07-06 12:37:11,241:INFO:SubProcess create_model() end ==================================
2025-07-06 12:37:11,241:INFO:Creating metrics dataframe
2025-07-06 12:37:11,251:INFO:Initializing Dummy Classifier
2025-07-06 12:37:11,251:INFO:Total runtime is 0.8174465139706929 minutes
2025-07-06 12:37:11,254:INFO:SubProcess create_model() called ==================================
2025-07-06 12:37:11,254:INFO:Initializing create_model()
2025-07-06 12:37:11,254:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002108303A7D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:37:11,255:INFO:Checking exceptions
2025-07-06 12:37:11,255:INFO:Importing libraries
2025-07-06 12:37:11,255:INFO:Copying training dataset
2025-07-06 12:37:11,266:INFO:Defining folds
2025-07-06 12:37:11,267:INFO:Declaring metric variables
2025-07-06 12:37:11,270:INFO:Importing untrained model
2025-07-06 12:37:11,273:INFO:Dummy Classifier Imported successfully
2025-07-06 12:37:11,280:INFO:Starting cross validation
2025-07-06 12:37:11,284:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:37:12,128:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,156:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,164:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,170:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,171:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,178:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,181:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,185:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,187:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,196:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,197:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,198:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,200:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,203:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,214:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,216:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,217:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,218:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,220:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,220:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,228:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,229:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,230:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,232:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,232:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,235:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,238:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,239:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,242:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,248:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,248:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,251:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,254:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,255:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,260:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,268:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,270:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,293:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 12:37:12,307:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:37:12,350:INFO:Calculating mean and std
2025-07-06 12:37:12,351:INFO:Creating metrics dataframe
2025-07-06 12:37:12,353:INFO:Uploading results into container
2025-07-06 12:37:12,353:INFO:Uploading model into container now
2025-07-06 12:37:12,353:INFO:_master_model_container: 14
2025-07-06 12:37:12,354:INFO:_display_container: 2
2025-07-06 12:37:12,354:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-07-06 12:37:12,354:INFO:create_model() successfully completed......................................
2025-07-06 12:37:12,445:INFO:SubProcess create_model() end ==================================
2025-07-06 12:37:12,445:INFO:Creating metrics dataframe
2025-07-06 12:37:12,456:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-06 12:37:12,463:INFO:Initializing create_model()
2025-07-06 12:37:12,463:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:37:12,464:INFO:Checking exceptions
2025-07-06 12:37:12,465:INFO:Importing libraries
2025-07-06 12:37:12,465:INFO:Copying training dataset
2025-07-06 12:37:12,475:INFO:Defining folds
2025-07-06 12:37:12,475:INFO:Declaring metric variables
2025-07-06 12:37:12,475:INFO:Importing untrained model
2025-07-06 12:37:12,475:INFO:Declaring custom model
2025-07-06 12:37:12,476:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 12:37:12,478:INFO:Cross validation set to False
2025-07-06 12:37:12,478:INFO:Fitting Model
2025-07-06 12:37:16,480:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 12:37:16,481:INFO:create_model() successfully completed......................................
2025-07-06 12:37:16,579:INFO:_master_model_container: 14
2025-07-06 12:37:16,579:INFO:_display_container: 2
2025-07-06 12:37:16,580:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 12:37:16,580:INFO:compare_models() successfully completed......................................
2025-07-06 12:41:28,935:INFO:Initializing tune_model()
2025-07-06 12:41:28,935:INFO:tune_model(estimator=gbc, fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>)
2025-07-06 12:41:28,935:INFO:Checking exceptions
2025-07-06 12:42:21,083:INFO:Initializing create_model()
2025-07-06 12:42:21,083:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=gbc, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:42:21,083:INFO:Checking exceptions
2025-07-06 12:42:21,096:INFO:Importing libraries
2025-07-06 12:42:21,096:INFO:Copying training dataset
2025-07-06 12:42:21,109:INFO:Defining folds
2025-07-06 12:42:21,109:INFO:Declaring metric variables
2025-07-06 12:42:21,112:INFO:Importing untrained model
2025-07-06 12:42:21,116:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 12:42:21,123:INFO:Starting cross validation
2025-07-06 12:42:21,125:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:42:29,664:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,700:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,737:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,759:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,780:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,793:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,798:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,815:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,816:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,825:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,825:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,828:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,841:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,853:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,857:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,861:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,870:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,880:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,883:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,894:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,905:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,905:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,919:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,929:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,930:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,941:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,942:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,963:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,964:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:29,985:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:42:30,022:INFO:Calculating mean and std
2025-07-06 12:42:30,023:INFO:Creating metrics dataframe
2025-07-06 12:42:30,029:INFO:Finalizing model
2025-07-06 12:42:34,048:INFO:Uploading results into container
2025-07-06 12:42:34,049:INFO:Uploading model into container now
2025-07-06 12:42:34,056:INFO:_master_model_container: 15
2025-07-06 12:42:34,056:INFO:_display_container: 3
2025-07-06 12:42:34,056:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 12:42:34,056:INFO:create_model() successfully completed......................................
2025-07-06 12:44:50,668:INFO:Initializing tune_model()
2025-07-06 12:44:50,668:INFO:tune_model(estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>)
2025-07-06 12:44:50,669:INFO:Checking exceptions
2025-07-06 12:44:50,689:INFO:Copying training dataset
2025-07-06 12:44:50,696:INFO:Checking base model
2025-07-06 12:44:50,696:INFO:Base model : Gradient Boosting Classifier
2025-07-06 12:44:50,701:INFO:Declaring metric variables
2025-07-06 12:44:50,705:INFO:Defining Hyperparameters
2025-07-06 12:44:50,794:INFO:Tuning with n_jobs=-1
2025-07-06 12:44:50,794:INFO:Initializing RandomizedSearchCV
2025-07-06 12:45:52,444:INFO:best_params: {'actual_estimator__subsample': 0.7, 'actual_estimator__n_estimators': 190, 'actual_estimator__min_samples_split': 10, 'actual_estimator__min_samples_leaf': 4, 'actual_estimator__min_impurity_decrease': 0.3, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 7, 'actual_estimator__learning_rate': 0.4}
2025-07-06 12:45:52,445:INFO:Hyperparameter search completed
2025-07-06 12:45:52,445:INFO:SubProcess create_model() called ==================================
2025-07-06 12:45:52,446:INFO:Initializing create_model()
2025-07-06 12:45:52,446:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000021083013130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'subsample': 0.7, 'n_estimators': 190, 'min_samples_split': 10, 'min_samples_leaf': 4, 'min_impurity_decrease': 0.3, 'max_features': 'sqrt', 'max_depth': 7, 'learning_rate': 0.4})
2025-07-06 12:45:52,446:INFO:Checking exceptions
2025-07-06 12:45:52,446:INFO:Importing libraries
2025-07-06 12:45:52,446:INFO:Copying training dataset
2025-07-06 12:45:52,454:INFO:Defining folds
2025-07-06 12:45:52,454:INFO:Declaring metric variables
2025-07-06 12:45:52,457:INFO:Importing untrained model
2025-07-06 12:45:52,457:INFO:Declaring custom model
2025-07-06 12:45:52,461:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 12:45:52,466:INFO:Starting cross validation
2025-07-06 12:45:52,468:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:45:55,055:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,087:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,116:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,122:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,145:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,174:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,186:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,209:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,222:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,223:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,227:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,233:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,243:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,248:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,249:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,256:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,257:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,264:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,264:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,274:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,276:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,284:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,288:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,297:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,304:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,312:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,317:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,326:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,333:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:45:55,365:INFO:Calculating mean and std
2025-07-06 12:45:55,366:INFO:Creating metrics dataframe
2025-07-06 12:45:55,372:INFO:Finalizing model
2025-07-06 12:45:56,854:INFO:Uploading results into container
2025-07-06 12:45:56,855:INFO:Uploading model into container now
2025-07-06 12:45:56,856:INFO:_master_model_container: 16
2025-07-06 12:45:56,856:INFO:_display_container: 4
2025-07-06 12:45:56,856:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.4, loss='log_loss', max_depth=7,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.3, min_samples_leaf=4,
                           min_samples_split=10, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=123, subsample=0.7, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 12:45:56,856:INFO:create_model() successfully completed......................................
2025-07-06 12:45:56,939:INFO:SubProcess create_model() end ==================================
2025-07-06 12:45:56,939:INFO:choose_better activated
2025-07-06 12:45:56,942:INFO:SubProcess create_model() called ==================================
2025-07-06 12:45:56,943:INFO:Initializing create_model()
2025-07-06 12:45:56,943:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:45:56,943:INFO:Checking exceptions
2025-07-06 12:45:56,945:INFO:Importing libraries
2025-07-06 12:45:56,945:INFO:Copying training dataset
2025-07-06 12:45:56,953:INFO:Defining folds
2025-07-06 12:45:56,953:INFO:Declaring metric variables
2025-07-06 12:45:56,953:INFO:Importing untrained model
2025-07-06 12:45:56,953:INFO:Declaring custom model
2025-07-06 12:45:56,953:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 12:45:56,954:INFO:Starting cross validation
2025-07-06 12:45:56,956:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 12:46:03,067:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,102:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,119:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,131:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,149:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,180:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,191:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,210:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,217:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,227:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,232:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,233:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,240:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,241:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,254:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,261:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,261:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,262:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,268:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,271:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,285:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,293:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,293:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,298:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,318:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,323:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,341:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,365:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,386:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,405:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 12:46:03,440:INFO:Calculating mean and std
2025-07-06 12:46:03,441:INFO:Creating metrics dataframe
2025-07-06 12:46:03,443:INFO:Finalizing model
2025-07-06 12:46:07,419:INFO:Uploading results into container
2025-07-06 12:46:07,419:INFO:Uploading model into container now
2025-07-06 12:46:07,420:INFO:_master_model_container: 17
2025-07-06 12:46:07,420:INFO:_display_container: 5
2025-07-06 12:46:07,420:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 12:46:07,420:INFO:create_model() successfully completed......................................
2025-07-06 12:46:07,502:INFO:SubProcess create_model() end ==================================
2025-07-06 12:46:07,503:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False) result for Accuracy is 0.8925
2025-07-06 12:46:07,503:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.4, loss='log_loss', max_depth=7,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.3, min_samples_leaf=4,
                           min_samples_split=10, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=123, subsample=0.7, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False) result for Accuracy is 0.8904
2025-07-06 12:46:07,504:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False) is best model
2025-07-06 12:46:07,504:INFO:choose_better completed
2025-07-06 12:46:07,504:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-07-06 12:46:07,512:INFO:_master_model_container: 17
2025-07-06 12:46:07,512:INFO:_display_container: 4
2025-07-06 12:46:07,513:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 12:46:07,513:INFO:tune_model() successfully completed......................................
2025-07-06 12:46:56,000:INFO:Initializing finalize_model()
2025-07-06 12:46:56,001:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-06 12:46:56,001:INFO:Finalizing GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 12:46:56,006:INFO:Initializing create_model()
2025-07-06 12:46:56,007:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 12:46:56,007:INFO:Checking exceptions
2025-07-06 12:46:56,008:INFO:Importing libraries
2025-07-06 12:46:56,008:INFO:Copying training dataset
2025-07-06 12:46:56,009:INFO:Defining folds
2025-07-06 12:46:56,009:INFO:Declaring metric variables
2025-07-06 12:46:56,009:INFO:Importing untrained model
2025-07-06 12:46:56,009:INFO:Declaring custom model
2025-07-06 12:46:56,010:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 12:46:56,012:INFO:Cross validation set to False
2025-07-06 12:46:56,012:INFO:Fitting Model
2025-07-06 12:47:01,756:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'campaign',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=123, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 12:47:01,756:INFO:create_model() successfully completed......................................
2025-07-06 12:47:01,852:INFO:_master_model_container: 17
2025-07-06 12:47:01,852:INFO:_display_container: 4
2025-07-06 12:47:01,880:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'campaign',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=123, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 12:47:01,880:INFO:finalize_model() successfully completed......................................
2025-07-06 12:48:24,671:INFO:Initializing plot_model()
2025-07-06 12:48:24,672:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'campaign',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=123, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, system=True)
2025-07-06 12:48:24,672:INFO:Checking exceptions
2025-07-06 12:48:24,679:INFO:Preloading libraries
2025-07-06 12:48:24,685:INFO:Copying training dataset
2025-07-06 12:48:24,686:INFO:Plot type: confusion_matrix
2025-07-06 12:48:24,845:INFO:Fitting Model
2025-07-06 12:48:24,845:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2025-07-06 12:48:24,846:INFO:Scoring test/hold-out set
2025-07-06 12:48:24,977:INFO:Visual Rendered Successfully
2025-07-06 12:48:25,068:INFO:plot_model() successfully completed......................................
2025-07-06 12:49:28,580:INFO:Initializing plot_model()
2025-07-06 12:49:28,580:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'campaign',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=123, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, system=True)
2025-07-06 12:49:28,581:INFO:Checking exceptions
2025-07-06 12:49:28,587:INFO:Preloading libraries
2025-07-06 12:49:28,594:INFO:Copying training dataset
2025-07-06 12:49:28,594:INFO:Plot type: auc
2025-07-06 12:49:28,752:INFO:Fitting Model
2025-07-06 12:49:28,752:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2025-07-06 12:49:28,753:INFO:Scoring test/hold-out set
2025-07-06 12:49:28,965:INFO:Visual Rendered Successfully
2025-07-06 12:49:29,049:INFO:plot_model() successfully completed......................................
2025-07-06 12:50:16,930:INFO:Initializing plot_model()
2025-07-06 12:50:16,930:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'campaign',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              mis...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=123, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002108272BAF0>, system=True)
2025-07-06 12:50:16,930:INFO:Checking exceptions
2025-07-06 12:50:16,938:INFO:Preloading libraries
2025-07-06 12:50:16,946:INFO:Copying training dataset
2025-07-06 12:50:16,946:INFO:Plot type: feature
2025-07-06 12:50:16,946:WARNING:No coef_ found. Trying feature_importances_
2025-07-06 12:50:17,115:INFO:Visual Rendered Successfully
2025-07-06 12:50:17,201:INFO:plot_model() successfully completed......................................
2025-07-07 11:38:59,775:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 11:38:59,775:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 11:38:59,775:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 11:38:59,775:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 11:39:05,547:INFO:PyCaret ClassificationExperiment
2025-07-07 11:39:05,547:INFO:Logging name: clf-default-name
2025-07-07 11:39:05,547:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-07 11:39:05,547:INFO:version 3.3.2
2025-07-07 11:39:05,547:INFO:Initializing setup()
2025-07-07 11:39:05,547:INFO:self.USI: b2f4
2025-07-07 11:39:05,548:INFO:self._variable_keys: {'data', 'y_test', 'logging_param', 'exp_name_log', 'n_jobs_param', 'fold_groups_param', 'USI', 'target_param', 'X_test', 'X', 'fold_generator', '_ml_usecase', 'fold_shuffle_param', 'y_train', '_available_plots', 'idx', 'seed', 'memory', 'pipeline', 'y', 'html_param', 'fix_imbalance', 'X_train', 'exp_id', 'is_multiclass', 'gpu_n_jobs_param', 'gpu_param', 'log_plots_param'}
2025-07-07 11:39:05,548:INFO:Checking environment
2025-07-07 11:39:05,548:INFO:python_version: 3.10.18
2025-07-07 11:39:05,548:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-07-07 11:39:05,548:INFO:machine: AMD64
2025-07-07 11:39:05,548:INFO:platform: Windows-10-10.0.26100-SP0
2025-07-07 11:39:05,551:INFO:Memory: svmem(total=34083729408, available=17122406400, percent=49.8, used=16961323008, free=17122406400)
2025-07-07 11:39:05,551:INFO:Physical Core: 14
2025-07-07 11:39:05,553:INFO:Logical Core: 20
2025-07-07 11:39:05,553:INFO:Checking libraries
2025-07-07 11:39:05,553:INFO:System:
2025-07-07 11:39:05,553:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-07-07 11:39:05,553:INFO:executable: c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\python.exe
2025-07-07 11:39:05,553:INFO:   machine: Windows-10-10.0.26100-SP0
2025-07-07 11:39:05,553:INFO:PyCaret required dependencies:
2025-07-07 11:39:05,626:INFO:                 pip: 25.1
2025-07-07 11:39:05,626:INFO:          setuptools: 78.1.1
2025-07-07 11:39:05,626:INFO:             pycaret: 3.3.2
2025-07-07 11:39:05,626:INFO:             IPython: 8.37.0
2025-07-07 11:39:05,626:INFO:          ipywidgets: 8.1.7
2025-07-07 11:39:05,626:INFO:                tqdm: 4.67.1
2025-07-07 11:39:05,626:INFO:               numpy: 1.26.4
2025-07-07 11:39:05,626:INFO:              pandas: 2.1.4
2025-07-07 11:39:05,626:INFO:              jinja2: 3.1.6
2025-07-07 11:39:05,626:INFO:               scipy: 1.11.4
2025-07-07 11:39:05,626:INFO:              joblib: 1.3.2
2025-07-07 11:39:05,626:INFO:             sklearn: 1.4.2
2025-07-07 11:39:05,626:INFO:                pyod: 2.0.5
2025-07-07 11:39:05,626:INFO:            imblearn: 0.13.0
2025-07-07 11:39:05,626:INFO:   category_encoders: 2.7.0
2025-07-07 11:39:05,626:INFO:            lightgbm: 4.6.0
2025-07-07 11:39:05,626:INFO:               numba: 0.61.2
2025-07-07 11:39:05,626:INFO:            requests: 2.32.4
2025-07-07 11:39:05,626:INFO:          matplotlib: 3.7.5
2025-07-07 11:39:05,626:INFO:          scikitplot: 0.3.7
2025-07-07 11:39:05,626:INFO:         yellowbrick: 1.5
2025-07-07 11:39:05,626:INFO:              plotly: 5.24.1
2025-07-07 11:39:05,626:INFO:    plotly-resampler: Not installed
2025-07-07 11:39:05,626:INFO:             kaleido: 1.0.0
2025-07-07 11:39:05,626:INFO:           schemdraw: 0.15
2025-07-07 11:39:05,626:INFO:         statsmodels: 0.14.4
2025-07-07 11:39:05,626:INFO:              sktime: 0.26.0
2025-07-07 11:39:05,626:INFO:               tbats: 1.1.3
2025-07-07 11:39:05,626:INFO:            pmdarima: 2.0.4
2025-07-07 11:39:05,626:INFO:              psutil: 7.0.0
2025-07-07 11:39:05,626:INFO:          markupsafe: 3.0.2
2025-07-07 11:39:05,626:INFO:             pickle5: Not installed
2025-07-07 11:39:05,627:INFO:         cloudpickle: 3.1.1
2025-07-07 11:39:05,627:INFO:         deprecation: 2.1.0
2025-07-07 11:39:05,627:INFO:              xxhash: 3.5.0
2025-07-07 11:39:05,627:INFO:           wurlitzer: Not installed
2025-07-07 11:39:05,627:INFO:PyCaret optional dependencies:
2025-07-07 11:39:05,636:INFO:                shap: Not installed
2025-07-07 11:39:05,636:INFO:           interpret: Not installed
2025-07-07 11:39:05,636:INFO:                umap: Not installed
2025-07-07 11:39:05,636:INFO:     ydata_profiling: Not installed
2025-07-07 11:39:05,636:INFO:  explainerdashboard: Not installed
2025-07-07 11:39:05,636:INFO:             autoviz: Not installed
2025-07-07 11:39:05,636:INFO:           fairlearn: Not installed
2025-07-07 11:39:05,636:INFO:          deepchecks: Not installed
2025-07-07 11:39:05,636:INFO:             xgboost: Not installed
2025-07-07 11:39:05,636:INFO:            catboost: Not installed
2025-07-07 11:39:05,636:INFO:              kmodes: Not installed
2025-07-07 11:39:05,636:INFO:             mlxtend: Not installed
2025-07-07 11:39:05,636:INFO:       statsforecast: Not installed
2025-07-07 11:39:05,636:INFO:        tune_sklearn: Not installed
2025-07-07 11:39:05,636:INFO:                 ray: Not installed
2025-07-07 11:39:05,636:INFO:            hyperopt: Not installed
2025-07-07 11:39:05,636:INFO:              optuna: Not installed
2025-07-07 11:39:05,636:INFO:               skopt: Not installed
2025-07-07 11:39:05,636:INFO:              mlflow: Not installed
2025-07-07 11:39:05,636:INFO:              gradio: Not installed
2025-07-07 11:39:05,636:INFO:             fastapi: Not installed
2025-07-07 11:39:05,637:INFO:             uvicorn: Not installed
2025-07-07 11:39:05,637:INFO:              m2cgen: Not installed
2025-07-07 11:39:05,637:INFO:           evidently: Not installed
2025-07-07 11:39:05,637:INFO:               fugue: Not installed
2025-07-07 11:39:05,637:INFO:           streamlit: Not installed
2025-07-07 11:39:05,637:INFO:             prophet: Not installed
2025-07-07 11:39:05,637:INFO:None
2025-07-07 11:39:05,637:INFO:Set up data.
2025-07-07 11:39:05,681:INFO:Set up folding strategy.
2025-07-07 11:39:05,681:INFO:Set up train/test split.
2025-07-07 11:39:05,757:INFO:Set up index.
2025-07-07 11:39:05,758:INFO:Assigning column types.
2025-07-07 11:39:05,764:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-07 11:39:05,797:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-07 11:39:05,805:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-07 11:39:05,848:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:05,849:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:05,882:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-07 11:39:05,883:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-07 11:39:05,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:05,905:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:05,905:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-07 11:39:05,939:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-07 11:39:05,960:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:05,960:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:05,995:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-07 11:39:06,016:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:06,016:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:06,016:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-07 11:39:06,072:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:06,072:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:06,128:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:06,128:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:06,133:INFO:Preparing preprocessing pipeline...
2025-07-07 11:39:06,134:INFO:Set up simple imputation.
2025-07-07 11:39:06,144:INFO:Set up encoding of ordinal features.
2025-07-07 11:39:06,154:INFO:Set up encoding of categorical features.
2025-07-07 11:39:06,552:INFO:Finished creating preprocessing pipeline.
2025-07-07 11:39:06,582:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-07 11:39:06,582:INFO:Creating final display dataframe.
2025-07-07 11:39:07,401:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             y_bin
2                   Target type            Binary
3           Original data shape       (41976, 18)
4        Transformed data shape       (41976, 50)
5   Transformed train set shape       (29383, 50)
6    Transformed test set shape       (12593, 50)
7              Numeric features                 7
8          Categorical features                10
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              b2f4
2025-07-07 11:39:07,464:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:07,464:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:07,520:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:07,522:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 11:39:07,523:INFO:setup() successfully completed in 2.06s...............
2025-07-07 11:39:36,754:INFO:Initializing compare_models()
2025-07-07 11:39:36,754:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-07 11:39:36,755:INFO:Checking exceptions
2025-07-07 11:39:36,766:INFO:Preparing display monitor
2025-07-07 11:39:36,788:INFO:Initializing Logistic Regression
2025-07-07 11:39:36,789:INFO:Total runtime is 1.6617774963378907e-05 minutes
2025-07-07 11:39:36,792:INFO:SubProcess create_model() called ==================================
2025-07-07 11:39:36,793:INFO:Initializing create_model()
2025-07-07 11:39:36,793:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:39:36,793:INFO:Checking exceptions
2025-07-07 11:39:36,793:INFO:Importing libraries
2025-07-07 11:39:36,794:INFO:Copying training dataset
2025-07-07 11:39:36,807:INFO:Defining folds
2025-07-07 11:39:36,807:INFO:Declaring metric variables
2025-07-07 11:39:36,811:INFO:Importing untrained model
2025-07-07 11:39:36,815:INFO:Logistic Regression Imported successfully
2025-07-07 11:39:36,825:INFO:Starting cross validation
2025-07-07 11:39:36,831:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:39:47,938:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,032:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,035:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,037:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,047:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,149:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,162:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,168:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,197:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,227:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 11:39:48,309:INFO:Calculating mean and std
2025-07-07 11:39:48,311:INFO:Creating metrics dataframe
2025-07-07 11:39:48,312:INFO:Uploading results into container
2025-07-07 11:39:48,313:INFO:Uploading model into container now
2025-07-07 11:39:48,313:INFO:_master_model_container: 1
2025-07-07 11:39:48,313:INFO:_display_container: 2
2025-07-07 11:39:48,314:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-07 11:39:48,314:INFO:create_model() successfully completed......................................
2025-07-07 11:39:48,383:INFO:SubProcess create_model() end ==================================
2025-07-07 11:39:48,384:INFO:Creating metrics dataframe
2025-07-07 11:39:48,389:INFO:Initializing K Neighbors Classifier
2025-07-07 11:39:48,389:INFO:Total runtime is 0.19334125121434528 minutes
2025-07-07 11:39:48,391:INFO:SubProcess create_model() called ==================================
2025-07-07 11:39:48,391:INFO:Initializing create_model()
2025-07-07 11:39:48,391:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:39:48,391:INFO:Checking exceptions
2025-07-07 11:39:48,391:INFO:Importing libraries
2025-07-07 11:39:48,391:INFO:Copying training dataset
2025-07-07 11:39:48,403:INFO:Defining folds
2025-07-07 11:39:48,404:INFO:Declaring metric variables
2025-07-07 11:39:48,406:INFO:Importing untrained model
2025-07-07 11:39:48,409:INFO:K Neighbors Classifier Imported successfully
2025-07-07 11:39:48,413:INFO:Starting cross validation
2025-07-07 11:39:48,416:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:39:53,141:INFO:Calculating mean and std
2025-07-07 11:39:53,142:INFO:Creating metrics dataframe
2025-07-07 11:39:53,144:INFO:Uploading results into container
2025-07-07 11:39:53,144:INFO:Uploading model into container now
2025-07-07 11:39:53,145:INFO:_master_model_container: 2
2025-07-07 11:39:53,145:INFO:_display_container: 2
2025-07-07 11:39:53,145:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-07 11:39:53,145:INFO:create_model() successfully completed......................................
2025-07-07 11:39:53,215:INFO:SubProcess create_model() end ==================================
2025-07-07 11:39:53,215:INFO:Creating metrics dataframe
2025-07-07 11:39:53,222:INFO:Initializing Naive Bayes
2025-07-07 11:39:53,222:INFO:Total runtime is 0.2738912661870321 minutes
2025-07-07 11:39:53,224:INFO:SubProcess create_model() called ==================================
2025-07-07 11:39:53,224:INFO:Initializing create_model()
2025-07-07 11:39:53,225:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:39:53,225:INFO:Checking exceptions
2025-07-07 11:39:53,225:INFO:Importing libraries
2025-07-07 11:39:53,225:INFO:Copying training dataset
2025-07-07 11:39:53,235:INFO:Defining folds
2025-07-07 11:39:53,235:INFO:Declaring metric variables
2025-07-07 11:39:53,238:INFO:Importing untrained model
2025-07-07 11:39:53,242:INFO:Naive Bayes Imported successfully
2025-07-07 11:39:53,248:INFO:Starting cross validation
2025-07-07 11:39:53,249:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:39:54,123:INFO:Calculating mean and std
2025-07-07 11:39:54,123:INFO:Creating metrics dataframe
2025-07-07 11:39:54,126:INFO:Uploading results into container
2025-07-07 11:39:54,126:INFO:Uploading model into container now
2025-07-07 11:39:54,127:INFO:_master_model_container: 3
2025-07-07 11:39:54,127:INFO:_display_container: 2
2025-07-07 11:39:54,127:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-07 11:39:54,127:INFO:create_model() successfully completed......................................
2025-07-07 11:39:54,196:INFO:SubProcess create_model() end ==================================
2025-07-07 11:39:54,196:INFO:Creating metrics dataframe
2025-07-07 11:39:54,203:INFO:Initializing Decision Tree Classifier
2025-07-07 11:39:54,203:INFO:Total runtime is 0.2902378439903259 minutes
2025-07-07 11:39:54,206:INFO:SubProcess create_model() called ==================================
2025-07-07 11:39:54,207:INFO:Initializing create_model()
2025-07-07 11:39:54,207:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:39:54,207:INFO:Checking exceptions
2025-07-07 11:39:54,207:INFO:Importing libraries
2025-07-07 11:39:54,207:INFO:Copying training dataset
2025-07-07 11:39:54,218:INFO:Defining folds
2025-07-07 11:39:54,218:INFO:Declaring metric variables
2025-07-07 11:39:54,221:INFO:Importing untrained model
2025-07-07 11:39:54,225:INFO:Decision Tree Classifier Imported successfully
2025-07-07 11:39:54,230:INFO:Starting cross validation
2025-07-07 11:39:54,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:39:55,347:INFO:Calculating mean and std
2025-07-07 11:39:55,348:INFO:Creating metrics dataframe
2025-07-07 11:39:55,350:INFO:Uploading results into container
2025-07-07 11:39:55,350:INFO:Uploading model into container now
2025-07-07 11:39:55,350:INFO:_master_model_container: 4
2025-07-07 11:39:55,350:INFO:_display_container: 2
2025-07-07 11:39:55,351:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-07-07 11:39:55,351:INFO:create_model() successfully completed......................................
2025-07-07 11:39:55,415:INFO:SubProcess create_model() end ==================================
2025-07-07 11:39:55,415:INFO:Creating metrics dataframe
2025-07-07 11:39:55,422:INFO:Initializing SVM - Linear Kernel
2025-07-07 11:39:55,422:INFO:Total runtime is 0.31056187947591146 minutes
2025-07-07 11:39:55,425:INFO:SubProcess create_model() called ==================================
2025-07-07 11:39:55,425:INFO:Initializing create_model()
2025-07-07 11:39:55,425:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:39:55,425:INFO:Checking exceptions
2025-07-07 11:39:55,425:INFO:Importing libraries
2025-07-07 11:39:55,426:INFO:Copying training dataset
2025-07-07 11:39:55,437:INFO:Defining folds
2025-07-07 11:39:55,437:INFO:Declaring metric variables
2025-07-07 11:39:55,440:INFO:Importing untrained model
2025-07-07 11:39:55,443:INFO:SVM - Linear Kernel Imported successfully
2025-07-07 11:39:55,448:INFO:Starting cross validation
2025-07-07 11:39:55,450:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:39:56,635:INFO:Calculating mean and std
2025-07-07 11:39:56,636:INFO:Creating metrics dataframe
2025-07-07 11:39:56,638:INFO:Uploading results into container
2025-07-07 11:39:56,639:INFO:Uploading model into container now
2025-07-07 11:39:56,639:INFO:_master_model_container: 5
2025-07-07 11:39:56,639:INFO:_display_container: 2
2025-07-07 11:39:56,640:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-07 11:39:56,640:INFO:create_model() successfully completed......................................
2025-07-07 11:39:56,704:INFO:SubProcess create_model() end ==================================
2025-07-07 11:39:56,705:INFO:Creating metrics dataframe
2025-07-07 11:39:56,711:INFO:Initializing Ridge Classifier
2025-07-07 11:39:56,711:INFO:Total runtime is 0.33204585313796997 minutes
2025-07-07 11:39:56,714:INFO:SubProcess create_model() called ==================================
2025-07-07 11:39:56,714:INFO:Initializing create_model()
2025-07-07 11:39:56,714:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:39:56,714:INFO:Checking exceptions
2025-07-07 11:39:56,714:INFO:Importing libraries
2025-07-07 11:39:56,714:INFO:Copying training dataset
2025-07-07 11:39:56,724:INFO:Defining folds
2025-07-07 11:39:56,724:INFO:Declaring metric variables
2025-07-07 11:39:56,726:INFO:Importing untrained model
2025-07-07 11:39:56,729:INFO:Ridge Classifier Imported successfully
2025-07-07 11:39:56,736:INFO:Starting cross validation
2025-07-07 11:39:56,739:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:39:57,590:INFO:Calculating mean and std
2025-07-07 11:39:57,592:INFO:Creating metrics dataframe
2025-07-07 11:39:57,594:INFO:Uploading results into container
2025-07-07 11:39:57,594:INFO:Uploading model into container now
2025-07-07 11:39:57,595:INFO:_master_model_container: 6
2025-07-07 11:39:57,595:INFO:_display_container: 2
2025-07-07 11:39:57,595:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-07-07 11:39:57,595:INFO:create_model() successfully completed......................................
2025-07-07 11:39:57,661:INFO:SubProcess create_model() end ==================================
2025-07-07 11:39:57,661:INFO:Creating metrics dataframe
2025-07-07 11:39:57,668:INFO:Initializing Random Forest Classifier
2025-07-07 11:39:57,668:INFO:Total runtime is 0.34799299637476605 minutes
2025-07-07 11:39:57,671:INFO:SubProcess create_model() called ==================================
2025-07-07 11:39:57,671:INFO:Initializing create_model()
2025-07-07 11:39:57,671:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:39:57,671:INFO:Checking exceptions
2025-07-07 11:39:57,672:INFO:Importing libraries
2025-07-07 11:39:57,672:INFO:Copying training dataset
2025-07-07 11:39:57,682:INFO:Defining folds
2025-07-07 11:39:57,682:INFO:Declaring metric variables
2025-07-07 11:39:57,685:INFO:Importing untrained model
2025-07-07 11:39:57,688:INFO:Random Forest Classifier Imported successfully
2025-07-07 11:39:57,694:INFO:Starting cross validation
2025-07-07 11:39:57,696:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:40:01,356:INFO:Calculating mean and std
2025-07-07 11:40:01,357:INFO:Creating metrics dataframe
2025-07-07 11:40:01,359:INFO:Uploading results into container
2025-07-07 11:40:01,359:INFO:Uploading model into container now
2025-07-07 11:40:01,359:INFO:_master_model_container: 7
2025-07-07 11:40:01,359:INFO:_display_container: 2
2025-07-07 11:40:01,361:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-07-07 11:40:01,361:INFO:create_model() successfully completed......................................
2025-07-07 11:40:01,429:INFO:SubProcess create_model() end ==================================
2025-07-07 11:40:01,429:INFO:Creating metrics dataframe
2025-07-07 11:40:01,436:INFO:Initializing Quadratic Discriminant Analysis
2025-07-07 11:40:01,436:INFO:Total runtime is 0.41080400943756107 minutes
2025-07-07 11:40:01,440:INFO:SubProcess create_model() called ==================================
2025-07-07 11:40:01,440:INFO:Initializing create_model()
2025-07-07 11:40:01,440:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:40:01,440:INFO:Checking exceptions
2025-07-07 11:40:01,440:INFO:Importing libraries
2025-07-07 11:40:01,440:INFO:Copying training dataset
2025-07-07 11:40:01,451:INFO:Defining folds
2025-07-07 11:40:01,451:INFO:Declaring metric variables
2025-07-07 11:40:01,454:INFO:Importing untrained model
2025-07-07 11:40:01,457:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-07 11:40:01,464:INFO:Starting cross validation
2025-07-07 11:40:01,466:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:40:02,394:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,400:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,409:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,454:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,464:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,471:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,491:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,502:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,502:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,514:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 11:40:02,621:INFO:Calculating mean and std
2025-07-07 11:40:02,621:INFO:Creating metrics dataframe
2025-07-07 11:40:02,623:INFO:Uploading results into container
2025-07-07 11:40:02,624:INFO:Uploading model into container now
2025-07-07 11:40:02,625:INFO:_master_model_container: 8
2025-07-07 11:40:02,625:INFO:_display_container: 2
2025-07-07 11:40:02,625:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-07 11:40:02,625:INFO:create_model() successfully completed......................................
2025-07-07 11:40:02,689:INFO:SubProcess create_model() end ==================================
2025-07-07 11:40:02,689:INFO:Creating metrics dataframe
2025-07-07 11:40:02,697:INFO:Initializing Ada Boost Classifier
2025-07-07 11:40:02,697:INFO:Total runtime is 0.4318052132924398 minutes
2025-07-07 11:40:02,699:INFO:SubProcess create_model() called ==================================
2025-07-07 11:40:02,700:INFO:Initializing create_model()
2025-07-07 11:40:02,700:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:40:02,700:INFO:Checking exceptions
2025-07-07 11:40:02,700:INFO:Importing libraries
2025-07-07 11:40:02,700:INFO:Copying training dataset
2025-07-07 11:40:02,711:INFO:Defining folds
2025-07-07 11:40:02,711:INFO:Declaring metric variables
2025-07-07 11:40:02,714:INFO:Importing untrained model
2025-07-07 11:40:02,718:INFO:Ada Boost Classifier Imported successfully
2025-07-07 11:40:02,723:INFO:Starting cross validation
2025-07-07 11:40:02,726:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:40:03,333:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,371:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,379:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,389:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,399:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,410:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,416:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,429:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,431:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:03,433:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 11:40:05,320:INFO:Calculating mean and std
2025-07-07 11:40:05,321:INFO:Creating metrics dataframe
2025-07-07 11:40:05,323:INFO:Uploading results into container
2025-07-07 11:40:05,323:INFO:Uploading model into container now
2025-07-07 11:40:05,323:INFO:_master_model_container: 9
2025-07-07 11:40:05,324:INFO:_display_container: 2
2025-07-07 11:40:05,324:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-07-07 11:40:05,324:INFO:create_model() successfully completed......................................
2025-07-07 11:40:05,391:INFO:SubProcess create_model() end ==================================
2025-07-07 11:40:05,391:INFO:Creating metrics dataframe
2025-07-07 11:40:05,400:INFO:Initializing Gradient Boosting Classifier
2025-07-07 11:40:05,400:INFO:Total runtime is 0.47685477733612064 minutes
2025-07-07 11:40:05,403:INFO:SubProcess create_model() called ==================================
2025-07-07 11:40:05,403:INFO:Initializing create_model()
2025-07-07 11:40:05,403:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:40:05,403:INFO:Checking exceptions
2025-07-07 11:40:05,403:INFO:Importing libraries
2025-07-07 11:40:05,403:INFO:Copying training dataset
2025-07-07 11:40:05,414:INFO:Defining folds
2025-07-07 11:40:05,414:INFO:Declaring metric variables
2025-07-07 11:40:05,416:INFO:Importing untrained model
2025-07-07 11:40:05,420:INFO:Gradient Boosting Classifier Imported successfully
2025-07-07 11:40:05,433:INFO:Starting cross validation
2025-07-07 11:40:05,435:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:40:11,903:INFO:Calculating mean and std
2025-07-07 11:40:11,903:INFO:Creating metrics dataframe
2025-07-07 11:40:11,906:INFO:Uploading results into container
2025-07-07 11:40:11,906:INFO:Uploading model into container now
2025-07-07 11:40:11,907:INFO:_master_model_container: 10
2025-07-07 11:40:11,907:INFO:_display_container: 2
2025-07-07 11:40:11,907:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-07 11:40:11,907:INFO:create_model() successfully completed......................................
2025-07-07 11:40:11,971:INFO:SubProcess create_model() end ==================================
2025-07-07 11:40:11,971:INFO:Creating metrics dataframe
2025-07-07 11:40:11,980:INFO:Initializing Linear Discriminant Analysis
2025-07-07 11:40:11,980:INFO:Total runtime is 0.5865217844645183 minutes
2025-07-07 11:40:11,983:INFO:SubProcess create_model() called ==================================
2025-07-07 11:40:11,983:INFO:Initializing create_model()
2025-07-07 11:40:11,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:40:11,983:INFO:Checking exceptions
2025-07-07 11:40:11,983:INFO:Importing libraries
2025-07-07 11:40:11,984:INFO:Copying training dataset
2025-07-07 11:40:11,994:INFO:Defining folds
2025-07-07 11:40:11,995:INFO:Declaring metric variables
2025-07-07 11:40:11,997:INFO:Importing untrained model
2025-07-07 11:40:12,000:INFO:Linear Discriminant Analysis Imported successfully
2025-07-07 11:40:12,006:INFO:Starting cross validation
2025-07-07 11:40:12,010:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:40:13,226:INFO:Calculating mean and std
2025-07-07 11:40:13,227:INFO:Creating metrics dataframe
2025-07-07 11:40:13,229:INFO:Uploading results into container
2025-07-07 11:40:13,229:INFO:Uploading model into container now
2025-07-07 11:40:13,230:INFO:_master_model_container: 11
2025-07-07 11:40:13,230:INFO:_display_container: 2
2025-07-07 11:40:13,230:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-07 11:40:13,230:INFO:create_model() successfully completed......................................
2025-07-07 11:40:13,296:INFO:SubProcess create_model() end ==================================
2025-07-07 11:40:13,296:INFO:Creating metrics dataframe
2025-07-07 11:40:13,304:INFO:Initializing Extra Trees Classifier
2025-07-07 11:40:13,304:INFO:Total runtime is 0.6085996389389039 minutes
2025-07-07 11:40:13,307:INFO:SubProcess create_model() called ==================================
2025-07-07 11:40:13,307:INFO:Initializing create_model()
2025-07-07 11:40:13,307:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:40:13,308:INFO:Checking exceptions
2025-07-07 11:40:13,308:INFO:Importing libraries
2025-07-07 11:40:13,308:INFO:Copying training dataset
2025-07-07 11:40:13,319:INFO:Defining folds
2025-07-07 11:40:13,319:INFO:Declaring metric variables
2025-07-07 11:40:13,323:INFO:Importing untrained model
2025-07-07 11:40:13,326:INFO:Extra Trees Classifier Imported successfully
2025-07-07 11:40:13,331:INFO:Starting cross validation
2025-07-07 11:40:13,334:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:40:16,898:INFO:Calculating mean and std
2025-07-07 11:40:16,899:INFO:Creating metrics dataframe
2025-07-07 11:40:16,901:INFO:Uploading results into container
2025-07-07 11:40:16,901:INFO:Uploading model into container now
2025-07-07 11:40:16,902:INFO:_master_model_container: 12
2025-07-07 11:40:16,902:INFO:_display_container: 2
2025-07-07 11:40:16,903:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-07-07 11:40:16,903:INFO:create_model() successfully completed......................................
2025-07-07 11:40:16,979:INFO:SubProcess create_model() end ==================================
2025-07-07 11:40:16,979:INFO:Creating metrics dataframe
2025-07-07 11:40:16,988:INFO:Initializing Light Gradient Boosting Machine
2025-07-07 11:40:16,988:INFO:Total runtime is 0.6699963251749675 minutes
2025-07-07 11:40:16,991:INFO:SubProcess create_model() called ==================================
2025-07-07 11:40:16,991:INFO:Initializing create_model()
2025-07-07 11:40:16,991:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:40:16,991:INFO:Checking exceptions
2025-07-07 11:40:16,992:INFO:Importing libraries
2025-07-07 11:40:16,992:INFO:Copying training dataset
2025-07-07 11:40:17,003:INFO:Defining folds
2025-07-07 11:40:17,003:INFO:Declaring metric variables
2025-07-07 11:40:17,006:INFO:Importing untrained model
2025-07-07 11:40:17,010:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 11:40:17,015:INFO:Starting cross validation
2025-07-07 11:40:17,018:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:40:20,579:INFO:Calculating mean and std
2025-07-07 11:40:20,580:INFO:Creating metrics dataframe
2025-07-07 11:40:20,583:INFO:Uploading results into container
2025-07-07 11:40:20,583:INFO:Uploading model into container now
2025-07-07 11:40:20,584:INFO:_master_model_container: 13
2025-07-07 11:40:20,584:INFO:_display_container: 2
2025-07-07 11:40:20,585:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 11:40:20,585:INFO:create_model() successfully completed......................................
2025-07-07 11:40:20,664:INFO:SubProcess create_model() end ==================================
2025-07-07 11:40:20,665:INFO:Creating metrics dataframe
2025-07-07 11:40:20,674:INFO:Initializing Dummy Classifier
2025-07-07 11:40:20,674:INFO:Total runtime is 0.7314304033915203 minutes
2025-07-07 11:40:20,677:INFO:SubProcess create_model() called ==================================
2025-07-07 11:40:20,677:INFO:Initializing create_model()
2025-07-07 11:40:20,677:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028CFFD95720>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:40:20,677:INFO:Checking exceptions
2025-07-07 11:40:20,677:INFO:Importing libraries
2025-07-07 11:40:20,677:INFO:Copying training dataset
2025-07-07 11:40:20,689:INFO:Defining folds
2025-07-07 11:40:20,689:INFO:Declaring metric variables
2025-07-07 11:40:20,692:INFO:Importing untrained model
2025-07-07 11:40:20,695:INFO:Dummy Classifier Imported successfully
2025-07-07 11:40:20,701:INFO:Starting cross validation
2025-07-07 11:40:20,703:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:40:21,405:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,417:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,450:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,450:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,451:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,469:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,477:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,479:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,485:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,505:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 11:40:21,518:INFO:Calculating mean and std
2025-07-07 11:40:21,519:INFO:Creating metrics dataframe
2025-07-07 11:40:21,521:INFO:Uploading results into container
2025-07-07 11:40:21,522:INFO:Uploading model into container now
2025-07-07 11:40:21,522:INFO:_master_model_container: 14
2025-07-07 11:40:21,522:INFO:_display_container: 2
2025-07-07 11:40:21,523:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-07-07 11:40:21,523:INFO:create_model() successfully completed......................................
2025-07-07 11:40:21,591:INFO:SubProcess create_model() end ==================================
2025-07-07 11:40:21,591:INFO:Creating metrics dataframe
2025-07-07 11:40:21,609:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-07 11:40:21,616:INFO:Initializing create_model()
2025-07-07 11:40:21,616:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:40:21,616:INFO:Checking exceptions
2025-07-07 11:40:21,618:INFO:Importing libraries
2025-07-07 11:40:21,618:INFO:Copying training dataset
2025-07-07 11:40:21,630:INFO:Defining folds
2025-07-07 11:40:21,630:INFO:Declaring metric variables
2025-07-07 11:40:21,630:INFO:Importing untrained model
2025-07-07 11:40:21,630:INFO:Declaring custom model
2025-07-07 11:40:21,631:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 11:40:21,633:INFO:Cross validation set to False
2025-07-07 11:40:21,633:INFO:Fitting Model
2025-07-07 11:40:22,016:INFO:[LightGBM] [Info] Number of positive: 2547, number of negative: 26836
2025-07-07 11:40:22,020:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001160 seconds.
2025-07-07 11:40:22,020:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-07 11:40:22,020:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-07 11:40:22,022:INFO:[LightGBM] [Info] Total Bins 1024
2025-07-07 11:40:22,022:INFO:[LightGBM] [Info] Number of data points in the train set: 29383, number of used features: 49
2025-07-07 11:40:22,023:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.086683 -> initscore=-2.354828
2025-07-07 11:40:22,023:INFO:[LightGBM] [Info] Start training from score -2.354828
2025-07-07 11:40:22,260:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 11:40:22,260:INFO:create_model() successfully completed......................................
2025-07-07 11:40:22,376:INFO:_master_model_container: 14
2025-07-07 11:40:22,376:INFO:_display_container: 2
2025-07-07 11:40:22,377:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 11:40:22,377:INFO:compare_models() successfully completed......................................
2025-07-07 11:40:52,512:INFO:Initializing tune_model()
2025-07-07 11:40:52,513:INFO:tune_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>)
2025-07-07 11:40:52,513:INFO:Checking exceptions
2025-07-07 11:40:52,536:INFO:Copying training dataset
2025-07-07 11:40:52,548:INFO:Checking base model
2025-07-07 11:40:52,548:INFO:Base model : Light Gradient Boosting Machine
2025-07-07 11:40:52,551:INFO:Declaring metric variables
2025-07-07 11:40:52,554:INFO:Defining Hyperparameters
2025-07-07 11:40:52,632:INFO:Tuning with n_jobs=-1
2025-07-07 11:40:52,632:INFO:Initializing RandomizedSearchCV
2025-07-07 11:41:41,281:INFO:best_params: {'actual_estimator__reg_lambda': 0.1, 'actual_estimator__reg_alpha': 0.0001, 'actual_estimator__num_leaves': 10, 'actual_estimator__n_estimators': 180, 'actual_estimator__min_split_gain': 0.7, 'actual_estimator__min_child_samples': 96, 'actual_estimator__learning_rate': 0.05, 'actual_estimator__feature_fraction': 0.9, 'actual_estimator__bagging_freq': 4, 'actual_estimator__bagging_fraction': 0.6}
2025-07-07 11:41:41,282:INFO:Hyperparameter search completed
2025-07-07 11:41:41,283:INFO:SubProcess create_model() called ==================================
2025-07-07 11:41:41,284:INFO:Initializing create_model()
2025-07-07 11:41:41,284:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000028C9B791780>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_lambda': 0.1, 'reg_alpha': 0.0001, 'num_leaves': 10, 'n_estimators': 180, 'min_split_gain': 0.7, 'min_child_samples': 96, 'learning_rate': 0.05, 'feature_fraction': 0.9, 'bagging_freq': 4, 'bagging_fraction': 0.6})
2025-07-07 11:41:41,284:INFO:Checking exceptions
2025-07-07 11:41:41,284:INFO:Importing libraries
2025-07-07 11:41:41,284:INFO:Copying training dataset
2025-07-07 11:41:41,307:INFO:Defining folds
2025-07-07 11:41:41,308:INFO:Declaring metric variables
2025-07-07 11:41:41,312:INFO:Importing untrained model
2025-07-07 11:41:41,313:INFO:Declaring custom model
2025-07-07 11:41:41,318:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 11:41:41,326:INFO:Starting cross validation
2025-07-07 11:41:41,330:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:41:44,110:INFO:Calculating mean and std
2025-07-07 11:41:44,111:INFO:Creating metrics dataframe
2025-07-07 11:41:44,119:INFO:Finalizing model
2025-07-07 11:41:44,522:INFO:[LightGBM] [Warning] feature_fraction is set=0.9, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.9
2025-07-07 11:41:44,522:INFO:[LightGBM] [Warning] bagging_fraction is set=0.6, subsample=1.0 will be ignored. Current value: bagging_fraction=0.6
2025-07-07 11:41:44,522:INFO:[LightGBM] [Warning] bagging_freq is set=4, subsample_freq=0 will be ignored. Current value: bagging_freq=4
2025-07-07 11:41:44,542:INFO:[LightGBM] [Warning] feature_fraction is set=0.9, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.9
2025-07-07 11:41:44,543:INFO:[LightGBM] [Warning] bagging_fraction is set=0.6, subsample=1.0 will be ignored. Current value: bagging_fraction=0.6
2025-07-07 11:41:44,543:INFO:[LightGBM] [Warning] bagging_freq is set=4, subsample_freq=0 will be ignored. Current value: bagging_freq=4
2025-07-07 11:41:44,543:INFO:[LightGBM] [Info] Number of positive: 2547, number of negative: 26836
2025-07-07 11:41:44,547:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001322 seconds.
2025-07-07 11:41:44,547:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-07 11:41:44,547:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-07 11:41:44,547:INFO:[LightGBM] [Info] Total Bins 1024
2025-07-07 11:41:44,547:INFO:[LightGBM] [Info] Number of data points in the train set: 29383, number of used features: 49
2025-07-07 11:41:44,548:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.086683 -> initscore=-2.354828
2025-07-07 11:41:44,548:INFO:[LightGBM] [Info] Start training from score -2.354828
2025-07-07 11:41:44,726:INFO:Uploading results into container
2025-07-07 11:41:44,727:INFO:Uploading model into container now
2025-07-07 11:41:44,728:INFO:_master_model_container: 15
2025-07-07 11:41:44,728:INFO:_display_container: 3
2025-07-07 11:41:44,729:INFO:LGBMClassifier(bagging_fraction=0.6, bagging_freq=4, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,
               importance_type='split', learning_rate=0.05, max_depth=-1,
               min_child_samples=96, min_child_weight=0.001, min_split_gain=0.7,
               n_estimators=180, n_jobs=-1, num_leaves=10, objective=None,
               random_state=123, reg_alpha=0.0001, reg_lambda=0.1,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2025-07-07 11:41:44,729:INFO:create_model() successfully completed......................................
2025-07-07 11:41:44,817:INFO:SubProcess create_model() end ==================================
2025-07-07 11:41:44,817:INFO:choose_better activated
2025-07-07 11:41:44,821:INFO:SubProcess create_model() called ==================================
2025-07-07 11:41:44,822:INFO:Initializing create_model()
2025-07-07 11:41:44,822:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:41:44,822:INFO:Checking exceptions
2025-07-07 11:41:44,825:INFO:Importing libraries
2025-07-07 11:41:44,825:INFO:Copying training dataset
2025-07-07 11:41:44,835:INFO:Defining folds
2025-07-07 11:41:44,836:INFO:Declaring metric variables
2025-07-07 11:41:44,836:INFO:Importing untrained model
2025-07-07 11:41:44,836:INFO:Declaring custom model
2025-07-07 11:41:44,837:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 11:41:44,837:INFO:Starting cross validation
2025-07-07 11:41:44,839:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 11:41:48,498:INFO:Calculating mean and std
2025-07-07 11:41:48,499:INFO:Creating metrics dataframe
2025-07-07 11:41:48,502:INFO:Finalizing model
2025-07-07 11:41:48,920:INFO:[LightGBM] [Info] Number of positive: 2547, number of negative: 26836
2025-07-07 11:41:48,924:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001308 seconds.
2025-07-07 11:41:48,924:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-07 11:41:48,924:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-07 11:41:48,924:INFO:[LightGBM] [Info] Total Bins 1024
2025-07-07 11:41:48,924:INFO:[LightGBM] [Info] Number of data points in the train set: 29383, number of used features: 49
2025-07-07 11:41:48,926:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.086683 -> initscore=-2.354828
2025-07-07 11:41:48,926:INFO:[LightGBM] [Info] Start training from score -2.354828
2025-07-07 11:41:49,087:INFO:Uploading results into container
2025-07-07 11:41:49,088:INFO:Uploading model into container now
2025-07-07 11:41:49,089:INFO:_master_model_container: 16
2025-07-07 11:41:49,089:INFO:_display_container: 4
2025-07-07 11:41:49,090:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 11:41:49,090:INFO:create_model() successfully completed......................................
2025-07-07 11:41:49,171:INFO:SubProcess create_model() end ==================================
2025-07-07 11:41:49,172:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9317
2025-07-07 11:41:49,173:INFO:LGBMClassifier(bagging_fraction=0.6, bagging_freq=4, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,
               importance_type='split', learning_rate=0.05, max_depth=-1,
               min_child_samples=96, min_child_weight=0.001, min_split_gain=0.7,
               n_estimators=180, n_jobs=-1, num_leaves=10, objective=None,
               random_state=123, reg_alpha=0.0001, reg_lambda=0.1,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9309
2025-07-07 11:41:49,174:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) is best model
2025-07-07 11:41:49,174:INFO:choose_better completed
2025-07-07 11:41:49,174:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-07-07 11:41:49,188:INFO:_master_model_container: 16
2025-07-07 11:41:49,188:INFO:_display_container: 3
2025-07-07 11:41:49,189:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 11:41:49,189:INFO:tune_model() successfully completed......................................
2025-07-07 11:41:49,276:INFO:Initializing finalize_model()
2025-07-07 11:41:49,276:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-07 11:41:49,277:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 11:41:49,283:INFO:Initializing create_model()
2025-07-07 11:41:49,283:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 11:41:49,283:INFO:Checking exceptions
2025-07-07 11:41:49,285:INFO:Importing libraries
2025-07-07 11:41:49,285:INFO:Copying training dataset
2025-07-07 11:41:49,286:INFO:Defining folds
2025-07-07 11:41:49,286:INFO:Declaring metric variables
2025-07-07 11:41:49,286:INFO:Importing untrained model
2025-07-07 11:41:49,286:INFO:Declaring custom model
2025-07-07 11:41:49,287:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 11:41:49,289:INFO:Cross validation set to False
2025-07-07 11:41:49,289:INFO:Fitting Model
2025-07-07 11:41:49,807:INFO:[LightGBM] [Info] Number of positive: 3638, number of negative: 38338
2025-07-07 11:41:49,813:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.002095 seconds.
2025-07-07 11:41:49,814:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-07 11:41:49,814:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-07 11:41:49,814:INFO:[LightGBM] [Info] Total Bins 1030
2025-07-07 11:41:49,814:INFO:[LightGBM] [Info] Number of data points in the train set: 41976, number of used features: 49
2025-07-07 11:41:49,814:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.086669 -> initscore=-2.355007
2025-07-07 11:41:49,815:INFO:[LightGBM] [Info] Start training from score -2.355007
2025-07-07 11:41:50,063:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 11:41:50,063:INFO:create_model() successfully completed......................................
2025-07-07 11:41:50,142:INFO:_master_model_container: 16
2025-07-07 11:41:50,142:INFO:_display_container: 3
2025-07-07 11:41:50,174:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 11:41:50,174:INFO:finalize_model() successfully completed......................................
2025-07-07 11:42:22,533:INFO:Initializing plot_model()
2025-07-07 11:42:22,533:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, system=True)
2025-07-07 11:42:22,533:INFO:Checking exceptions
2025-07-07 11:42:22,542:INFO:Preloading libraries
2025-07-07 11:42:22,548:INFO:Copying training dataset
2025-07-07 11:42:22,548:INFO:Plot type: confusion_matrix
2025-07-07 11:42:22,743:INFO:Fitting Model
2025-07-07 11:42:22,744:INFO:Scoring test/hold-out set
2025-07-07 11:42:22,931:INFO:Visual Rendered Successfully
2025-07-07 11:42:23,003:INFO:plot_model() successfully completed......................................
2025-07-07 11:42:53,397:INFO:Initializing plot_model()
2025-07-07 11:42:53,398:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, system=True)
2025-07-07 11:42:53,398:INFO:Checking exceptions
2025-07-07 11:42:53,404:INFO:Preloading libraries
2025-07-07 11:42:53,411:INFO:Copying training dataset
2025-07-07 11:42:53,411:INFO:Plot type: feature
2025-07-07 11:42:53,411:WARNING:No coef_ found. Trying feature_importances_
2025-07-07 11:42:53,597:INFO:Visual Rendered Successfully
2025-07-07 11:42:53,665:INFO:plot_model() successfully completed......................................
2025-07-07 11:45:39,351:INFO:Initializing plot_model()
2025-07-07 11:45:39,352:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000028C9B7BCD30>, system=True)
2025-07-07 11:45:39,352:INFO:Checking exceptions
2025-07-07 11:45:39,357:INFO:Preloading libraries
2025-07-07 11:45:39,364:INFO:Copying training dataset
2025-07-07 11:45:39,364:INFO:Plot type: auc
2025-07-07 11:45:39,555:INFO:Fitting Model
2025-07-07 11:45:39,556:INFO:Scoring test/hold-out set
2025-07-07 11:45:39,757:INFO:Visual Rendered Successfully
2025-07-07 11:45:39,828:INFO:plot_model() successfully completed......................................
2025-07-07 12:04:19,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:04:19,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:04:19,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:04:19,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:05:18,891:INFO:Initializing save_model()
2025-07-07 12:05:18,892:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), model_name=bank_subscription_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-07-07 12:05:18,892:INFO:Adding model into prep_pipe
2025-07-07 12:05:18,892:WARNING:Only Model saved as it was a pipeline.
2025-07-07 12:05:18,908:INFO:bank_subscription_model.pkl saved in current working directory
2025-07-07 12:05:18,954:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 12:05:18,954:INFO:save_model() successfully completed......................................
2025-07-07 12:05:49,275:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:05:49,275:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:05:49,275:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:05:49,275:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:06:41,616:INFO:Initializing save_model()
2025-07-07 12:06:41,617:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), model_name=bank_subscription_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-07-07 12:06:41,617:INFO:Adding model into prep_pipe
2025-07-07 12:06:41,617:WARNING:Only Model saved as it was a pipeline.
2025-07-07 12:06:41,636:INFO:bank_subscription_model.pkl saved in current working directory
2025-07-07 12:06:41,692:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 12:06:41,692:INFO:save_model() successfully completed......................................
2025-07-07 12:10:03,582:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:10:03,582:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:10:03,582:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:10:03,583:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-07 12:10:43,950:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\1442553776.py:1: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.
  desc = df.describe().applymap(lambda x: f"{x:.0f}" if isinstance(x, (int,float)) else x)

2025-07-07 12:10:44,039:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\935217780.py:1: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.
  desc_clean = df.describe().applymap(lambda x: f"{x:.0f}")

2025-07-07 12:10:44,122:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\2277487270.py:2: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='y', data=df, palette="Set2")

2025-07-07 12:10:44,853:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\2607132662.py:3: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=job_conv.index, y=job_conv.values, palette="viridis")

2025-07-07 12:10:45,054:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\2023465073.py:3: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=marital_conv.index, y=marital_conv.values, palette="Blues")

2025-07-07 12:10:45,179:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\428000614.py:3: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=edu_conv.index, y=edu_conv.values, palette="Greens")

2025-07-07 12:10:45,319:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\2401827471.py:3: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=contact_conv.index, y=contact_conv.values, palette="Purples")

2025-07-07 12:10:45,464:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\703181163.py:3: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=month_conv.index, y=month_conv.values, palette="Oranges")

2025-07-07 12:10:45,780:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\1878512766.py:10: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.boxplot(x="y", y="campaign", data=df_clean, palette="Set2")

2025-07-07 12:10:46,018:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\2537661825.py:4: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.barplot(x=was_contacted_conv.index, y=was_contacted_conv.values, palette="coolwarm")

2025-07-07 12:10:46,172:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\4079721934.py:2: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.boxplot(x="y", y="previous", data=df, palette="Set2")

2025-07-07 12:10:46,592:WARNING:C:\Users\Dr. Redha C AGGOUN\AppData\Local\Temp\ipykernel_16972\265789870.py:2: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.boxplot(x="y", y="balance", data=df, palette="Set2")

2025-07-07 12:10:46,875:INFO:PyCaret ClassificationExperiment
2025-07-07 12:10:46,875:INFO:Logging name: clf-default-name
2025-07-07 12:10:46,875:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-07 12:10:46,875:INFO:version 3.3.2
2025-07-07 12:10:46,875:INFO:Initializing setup()
2025-07-07 12:10:46,875:INFO:self.USI: 1f44
2025-07-07 12:10:46,875:INFO:self._variable_keys: {'memory', 'USI', 'is_multiclass', '_ml_usecase', 'log_plots_param', 'data', 'exp_id', 'exp_name_log', '_available_plots', 'y', 'y_train', 'X_train', 'seed', 'X', 'target_param', 'pipeline', 'X_test', 'html_param', 'idx', 'y_test', 'fold_shuffle_param', 'n_jobs_param', 'gpu_n_jobs_param', 'gpu_param', 'fix_imbalance', 'fold_generator', 'fold_groups_param', 'logging_param'}
2025-07-07 12:10:46,875:INFO:Checking environment
2025-07-07 12:10:46,877:INFO:python_version: 3.10.18
2025-07-07 12:10:46,877:INFO:python_build: ('main', 'Jun  5 2025 13:08:55')
2025-07-07 12:10:46,877:INFO:machine: AMD64
2025-07-07 12:10:46,877:INFO:platform: Windows-10-10.0.26100-SP0
2025-07-07 12:10:46,879:INFO:Memory: svmem(total=34083729408, available=16217673728, percent=52.4, used=17866055680, free=16217673728)
2025-07-07 12:10:46,879:INFO:Physical Core: 14
2025-07-07 12:10:46,879:INFO:Logical Core: 20
2025-07-07 12:10:46,880:INFO:Checking libraries
2025-07-07 12:10:46,880:INFO:System:
2025-07-07 12:10:46,880:INFO:    python: 3.10.18 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:08:55) [MSC v.1929 64 bit (AMD64)]
2025-07-07 12:10:46,880:INFO:executable: c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\python.exe
2025-07-07 12:10:46,880:INFO:   machine: Windows-10-10.0.26100-SP0
2025-07-07 12:10:46,880:INFO:PyCaret required dependencies:
2025-07-07 12:10:46,906:INFO:                 pip: 25.1
2025-07-07 12:10:46,906:INFO:          setuptools: 78.1.1
2025-07-07 12:10:46,906:INFO:             pycaret: 3.3.2
2025-07-07 12:10:46,907:INFO:             IPython: 8.37.0
2025-07-07 12:10:46,907:INFO:          ipywidgets: 8.1.7
2025-07-07 12:10:46,907:INFO:                tqdm: 4.67.1
2025-07-07 12:10:46,907:INFO:               numpy: 1.26.4
2025-07-07 12:10:46,907:INFO:              pandas: 2.1.4
2025-07-07 12:10:46,907:INFO:              jinja2: 3.1.6
2025-07-07 12:10:46,907:INFO:               scipy: 1.11.4
2025-07-07 12:10:46,907:INFO:              joblib: 1.3.2
2025-07-07 12:10:46,907:INFO:             sklearn: 1.4.2
2025-07-07 12:10:46,907:INFO:                pyod: 2.0.5
2025-07-07 12:10:46,907:INFO:            imblearn: 0.13.0
2025-07-07 12:10:46,907:INFO:   category_encoders: 2.7.0
2025-07-07 12:10:46,907:INFO:            lightgbm: 4.6.0
2025-07-07 12:10:46,907:INFO:               numba: 0.61.2
2025-07-07 12:10:46,907:INFO:            requests: 2.32.4
2025-07-07 12:10:46,907:INFO:          matplotlib: 3.7.5
2025-07-07 12:10:46,907:INFO:          scikitplot: 0.3.7
2025-07-07 12:10:46,907:INFO:         yellowbrick: 1.5
2025-07-07 12:10:46,907:INFO:              plotly: 5.24.1
2025-07-07 12:10:46,907:INFO:    plotly-resampler: Not installed
2025-07-07 12:10:46,907:INFO:             kaleido: 1.0.0
2025-07-07 12:10:46,907:INFO:           schemdraw: 0.15
2025-07-07 12:10:46,907:INFO:         statsmodels: 0.14.4
2025-07-07 12:10:46,907:INFO:              sktime: 0.26.0
2025-07-07 12:10:46,907:INFO:               tbats: 1.1.3
2025-07-07 12:10:46,907:INFO:            pmdarima: 2.0.4
2025-07-07 12:10:46,907:INFO:              psutil: 7.0.0
2025-07-07 12:10:46,907:INFO:          markupsafe: 3.0.2
2025-07-07 12:10:46,907:INFO:             pickle5: Not installed
2025-07-07 12:10:46,907:INFO:         cloudpickle: 3.1.1
2025-07-07 12:10:46,907:INFO:         deprecation: 2.1.0
2025-07-07 12:10:46,907:INFO:              xxhash: 3.5.0
2025-07-07 12:10:46,907:INFO:           wurlitzer: Not installed
2025-07-07 12:10:46,907:INFO:PyCaret optional dependencies:
2025-07-07 12:10:46,918:INFO:                shap: Not installed
2025-07-07 12:10:46,919:INFO:           interpret: Not installed
2025-07-07 12:10:46,919:INFO:                umap: Not installed
2025-07-07 12:10:46,919:INFO:     ydata_profiling: Not installed
2025-07-07 12:10:46,919:INFO:  explainerdashboard: Not installed
2025-07-07 12:10:46,919:INFO:             autoviz: Not installed
2025-07-07 12:10:46,919:INFO:           fairlearn: Not installed
2025-07-07 12:10:46,919:INFO:          deepchecks: Not installed
2025-07-07 12:10:46,919:INFO:             xgboost: Not installed
2025-07-07 12:10:46,919:INFO:            catboost: Not installed
2025-07-07 12:10:46,919:INFO:              kmodes: Not installed
2025-07-07 12:10:46,919:INFO:             mlxtend: Not installed
2025-07-07 12:10:46,919:INFO:       statsforecast: Not installed
2025-07-07 12:10:46,919:INFO:        tune_sklearn: Not installed
2025-07-07 12:10:46,920:INFO:                 ray: Not installed
2025-07-07 12:10:46,920:INFO:            hyperopt: Not installed
2025-07-07 12:10:46,920:INFO:              optuna: Not installed
2025-07-07 12:10:46,920:INFO:               skopt: Not installed
2025-07-07 12:10:46,920:INFO:              mlflow: Not installed
2025-07-07 12:10:46,920:INFO:              gradio: Not installed
2025-07-07 12:10:46,920:INFO:             fastapi: Not installed
2025-07-07 12:10:46,920:INFO:             uvicorn: Not installed
2025-07-07 12:10:46,920:INFO:              m2cgen: Not installed
2025-07-07 12:10:46,920:INFO:           evidently: Not installed
2025-07-07 12:10:46,920:INFO:               fugue: Not installed
2025-07-07 12:10:46,920:INFO:           streamlit: 1.46.1
2025-07-07 12:10:46,920:INFO:             prophet: Not installed
2025-07-07 12:10:46,921:INFO:None
2025-07-07 12:10:46,921:INFO:Set up data.
2025-07-07 12:10:46,968:INFO:Set up folding strategy.
2025-07-07 12:10:46,968:INFO:Set up train/test split.
2025-07-07 12:10:46,987:INFO:Set up index.
2025-07-07 12:10:46,988:INFO:Assigning column types.
2025-07-07 12:10:46,993:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-07 12:10:47,024:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-07 12:10:47,028:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-07 12:10:47,054:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,054:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,088:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-07 12:10:47,088:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-07 12:10:47,110:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,111:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-07 12:10:47,145:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-07 12:10:47,166:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,166:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,200:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-07 12:10:47,222:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,222:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,222:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-07 12:10:47,278:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,279:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,333:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,334:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:47,335:INFO:Preparing preprocessing pipeline...
2025-07-07 12:10:47,337:INFO:Set up simple imputation.
2025-07-07 12:10:47,348:INFO:Set up encoding of ordinal features.
2025-07-07 12:10:47,356:INFO:Set up encoding of categorical features.
2025-07-07 12:10:47,579:INFO:Finished creating preprocessing pipeline.
2025-07-07 12:10:47,611:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-07 12:10:47,611:INFO:Creating final display dataframe.
2025-07-07 12:10:48,284:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             y_bin
2                   Target type            Binary
3           Original data shape       (41976, 18)
4        Transformed data shape       (41976, 50)
5   Transformed train set shape       (29383, 50)
6    Transformed test set shape       (12593, 50)
7              Numeric features                 7
8          Categorical features                10
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              1f44
2025-07-07 12:10:48,346:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:48,347:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:48,402:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:48,439:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-07 12:10:48,442:INFO:setup() successfully completed in 1.57s...............
2025-07-07 12:10:48,463:INFO:Initializing compare_models()
2025-07-07 12:10:48,463:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-07 12:10:48,464:INFO:Checking exceptions
2025-07-07 12:10:48,473:INFO:Preparing display monitor
2025-07-07 12:10:48,492:INFO:Initializing Logistic Regression
2025-07-07 12:10:48,492:INFO:Total runtime is 0.0 minutes
2025-07-07 12:10:48,496:INFO:SubProcess create_model() called ==================================
2025-07-07 12:10:48,496:INFO:Initializing create_model()
2025-07-07 12:10:48,496:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:10:48,497:INFO:Checking exceptions
2025-07-07 12:10:48,497:INFO:Importing libraries
2025-07-07 12:10:48,497:INFO:Copying training dataset
2025-07-07 12:10:48,507:INFO:Defining folds
2025-07-07 12:10:48,508:INFO:Declaring metric variables
2025-07-07 12:10:48,511:INFO:Importing untrained model
2025-07-07 12:10:48,514:INFO:Logistic Regression Imported successfully
2025-07-07 12:10:48,519:INFO:Starting cross validation
2025-07-07 12:10:48,522:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:10:59,595:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,648:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,686:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,715:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,732:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,765:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,805:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,811:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,885:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,922:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-07 12:10:59,999:INFO:Calculating mean and std
2025-07-07 12:11:00,000:INFO:Creating metrics dataframe
2025-07-07 12:11:00,002:INFO:Uploading results into container
2025-07-07 12:11:00,003:INFO:Uploading model into container now
2025-07-07 12:11:00,003:INFO:_master_model_container: 1
2025-07-07 12:11:00,003:INFO:_display_container: 2
2025-07-07 12:11:00,003:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-07 12:11:00,004:INFO:create_model() successfully completed......................................
2025-07-07 12:11:00,080:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:00,080:INFO:Creating metrics dataframe
2025-07-07 12:11:00,085:INFO:Initializing K Neighbors Classifier
2025-07-07 12:11:00,085:INFO:Total runtime is 0.1932190775871277 minutes
2025-07-07 12:11:00,087:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:00,088:INFO:Initializing create_model()
2025-07-07 12:11:00,088:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:00,088:INFO:Checking exceptions
2025-07-07 12:11:00,088:INFO:Importing libraries
2025-07-07 12:11:00,088:INFO:Copying training dataset
2025-07-07 12:11:00,100:INFO:Defining folds
2025-07-07 12:11:00,101:INFO:Declaring metric variables
2025-07-07 12:11:00,103:INFO:Importing untrained model
2025-07-07 12:11:00,106:INFO:K Neighbors Classifier Imported successfully
2025-07-07 12:11:00,111:INFO:Starting cross validation
2025-07-07 12:11:00,113:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:05,243:INFO:Calculating mean and std
2025-07-07 12:11:05,244:INFO:Creating metrics dataframe
2025-07-07 12:11:05,246:INFO:Uploading results into container
2025-07-07 12:11:05,246:INFO:Uploading model into container now
2025-07-07 12:11:05,247:INFO:_master_model_container: 2
2025-07-07 12:11:05,247:INFO:_display_container: 2
2025-07-07 12:11:05,247:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-07 12:11:05,248:INFO:create_model() successfully completed......................................
2025-07-07 12:11:05,311:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:05,311:INFO:Creating metrics dataframe
2025-07-07 12:11:05,318:INFO:Initializing Naive Bayes
2025-07-07 12:11:05,318:INFO:Total runtime is 0.2804247339566549 minutes
2025-07-07 12:11:05,321:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:05,321:INFO:Initializing create_model()
2025-07-07 12:11:05,321:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:05,321:INFO:Checking exceptions
2025-07-07 12:11:05,322:INFO:Importing libraries
2025-07-07 12:11:05,322:INFO:Copying training dataset
2025-07-07 12:11:05,332:INFO:Defining folds
2025-07-07 12:11:05,332:INFO:Declaring metric variables
2025-07-07 12:11:05,335:INFO:Importing untrained model
2025-07-07 12:11:05,337:INFO:Naive Bayes Imported successfully
2025-07-07 12:11:05,343:INFO:Starting cross validation
2025-07-07 12:11:05,345:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:06,194:INFO:Calculating mean and std
2025-07-07 12:11:06,195:INFO:Creating metrics dataframe
2025-07-07 12:11:06,197:INFO:Uploading results into container
2025-07-07 12:11:06,197:INFO:Uploading model into container now
2025-07-07 12:11:06,198:INFO:_master_model_container: 3
2025-07-07 12:11:06,198:INFO:_display_container: 2
2025-07-07 12:11:06,198:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-07 12:11:06,198:INFO:create_model() successfully completed......................................
2025-07-07 12:11:06,262:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:06,262:INFO:Creating metrics dataframe
2025-07-07 12:11:06,268:INFO:Initializing Decision Tree Classifier
2025-07-07 12:11:06,268:INFO:Total runtime is 0.29626273314158125 minutes
2025-07-07 12:11:06,270:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:06,270:INFO:Initializing create_model()
2025-07-07 12:11:06,270:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:06,271:INFO:Checking exceptions
2025-07-07 12:11:06,271:INFO:Importing libraries
2025-07-07 12:11:06,271:INFO:Copying training dataset
2025-07-07 12:11:06,281:INFO:Defining folds
2025-07-07 12:11:06,281:INFO:Declaring metric variables
2025-07-07 12:11:06,283:INFO:Importing untrained model
2025-07-07 12:11:06,286:INFO:Decision Tree Classifier Imported successfully
2025-07-07 12:11:06,291:INFO:Starting cross validation
2025-07-07 12:11:06,294:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:07,422:INFO:Calculating mean and std
2025-07-07 12:11:07,423:INFO:Creating metrics dataframe
2025-07-07 12:11:07,425:INFO:Uploading results into container
2025-07-07 12:11:07,425:INFO:Uploading model into container now
2025-07-07 12:11:07,426:INFO:_master_model_container: 4
2025-07-07 12:11:07,426:INFO:_display_container: 2
2025-07-07 12:11:07,426:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-07-07 12:11:07,426:INFO:create_model() successfully completed......................................
2025-07-07 12:11:07,493:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:07,519:INFO:Creating metrics dataframe
2025-07-07 12:11:07,526:INFO:Initializing SVM - Linear Kernel
2025-07-07 12:11:07,526:INFO:Total runtime is 0.31724076271057133 minutes
2025-07-07 12:11:07,529:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:07,529:INFO:Initializing create_model()
2025-07-07 12:11:07,529:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:07,530:INFO:Checking exceptions
2025-07-07 12:11:07,530:INFO:Importing libraries
2025-07-07 12:11:07,530:INFO:Copying training dataset
2025-07-07 12:11:07,540:INFO:Defining folds
2025-07-07 12:11:07,540:INFO:Declaring metric variables
2025-07-07 12:11:07,544:INFO:Importing untrained model
2025-07-07 12:11:07,551:INFO:SVM - Linear Kernel Imported successfully
2025-07-07 12:11:07,560:INFO:Starting cross validation
2025-07-07 12:11:07,564:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:08,777:INFO:Calculating mean and std
2025-07-07 12:11:08,778:INFO:Creating metrics dataframe
2025-07-07 12:11:08,780:INFO:Uploading results into container
2025-07-07 12:11:08,780:INFO:Uploading model into container now
2025-07-07 12:11:08,780:INFO:_master_model_container: 5
2025-07-07 12:11:08,781:INFO:_display_container: 2
2025-07-07 12:11:08,781:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-07 12:11:08,781:INFO:create_model() successfully completed......................................
2025-07-07 12:11:08,841:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:08,841:INFO:Creating metrics dataframe
2025-07-07 12:11:08,848:INFO:Initializing Ridge Classifier
2025-07-07 12:11:08,848:INFO:Total runtime is 0.33926195303599044 minutes
2025-07-07 12:11:08,850:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:08,851:INFO:Initializing create_model()
2025-07-07 12:11:08,851:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:08,851:INFO:Checking exceptions
2025-07-07 12:11:08,851:INFO:Importing libraries
2025-07-07 12:11:08,851:INFO:Copying training dataset
2025-07-07 12:11:08,861:INFO:Defining folds
2025-07-07 12:11:08,929:INFO:Declaring metric variables
2025-07-07 12:11:08,932:INFO:Importing untrained model
2025-07-07 12:11:08,935:INFO:Ridge Classifier Imported successfully
2025-07-07 12:11:08,941:INFO:Starting cross validation
2025-07-07 12:11:08,944:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:09,789:INFO:Calculating mean and std
2025-07-07 12:11:09,789:INFO:Creating metrics dataframe
2025-07-07 12:11:09,791:INFO:Uploading results into container
2025-07-07 12:11:09,792:INFO:Uploading model into container now
2025-07-07 12:11:09,792:INFO:_master_model_container: 6
2025-07-07 12:11:09,793:INFO:_display_container: 2
2025-07-07 12:11:09,793:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-07-07 12:11:09,793:INFO:create_model() successfully completed......................................
2025-07-07 12:11:09,855:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:09,856:INFO:Creating metrics dataframe
2025-07-07 12:11:09,862:INFO:Initializing Random Forest Classifier
2025-07-07 12:11:09,862:INFO:Total runtime is 0.3561592817306519 minutes
2025-07-07 12:11:09,865:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:09,865:INFO:Initializing create_model()
2025-07-07 12:11:09,865:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:09,865:INFO:Checking exceptions
2025-07-07 12:11:09,865:INFO:Importing libraries
2025-07-07 12:11:09,865:INFO:Copying training dataset
2025-07-07 12:11:09,875:INFO:Defining folds
2025-07-07 12:11:09,875:INFO:Declaring metric variables
2025-07-07 12:11:09,878:INFO:Importing untrained model
2025-07-07 12:11:09,880:INFO:Random Forest Classifier Imported successfully
2025-07-07 12:11:09,885:INFO:Starting cross validation
2025-07-07 12:11:09,888:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:13,530:INFO:Calculating mean and std
2025-07-07 12:11:13,531:INFO:Creating metrics dataframe
2025-07-07 12:11:13,533:INFO:Uploading results into container
2025-07-07 12:11:13,533:INFO:Uploading model into container now
2025-07-07 12:11:13,534:INFO:_master_model_container: 7
2025-07-07 12:11:13,534:INFO:_display_container: 2
2025-07-07 12:11:13,534:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-07-07 12:11:13,535:INFO:create_model() successfully completed......................................
2025-07-07 12:11:13,592:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:13,593:INFO:Creating metrics dataframe
2025-07-07 12:11:13,601:INFO:Initializing Quadratic Discriminant Analysis
2025-07-07 12:11:13,601:INFO:Total runtime is 0.4184861143430075 minutes
2025-07-07 12:11:13,603:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:13,604:INFO:Initializing create_model()
2025-07-07 12:11:13,604:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:13,604:INFO:Checking exceptions
2025-07-07 12:11:13,604:INFO:Importing libraries
2025-07-07 12:11:13,604:INFO:Copying training dataset
2025-07-07 12:11:13,617:INFO:Defining folds
2025-07-07 12:11:13,617:INFO:Declaring metric variables
2025-07-07 12:11:13,619:INFO:Importing untrained model
2025-07-07 12:11:13,622:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-07 12:11:13,627:INFO:Starting cross validation
2025-07-07 12:11:13,630:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:14,524:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,606:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,620:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,629:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,633:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,634:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,639:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,677:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,696:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-07 12:11:14,813:INFO:Calculating mean and std
2025-07-07 12:11:14,814:INFO:Creating metrics dataframe
2025-07-07 12:11:14,816:INFO:Uploading results into container
2025-07-07 12:11:14,816:INFO:Uploading model into container now
2025-07-07 12:11:14,817:INFO:_master_model_container: 8
2025-07-07 12:11:14,817:INFO:_display_container: 2
2025-07-07 12:11:14,817:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-07 12:11:14,817:INFO:create_model() successfully completed......................................
2025-07-07 12:11:14,880:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:14,880:INFO:Creating metrics dataframe
2025-07-07 12:11:14,887:INFO:Initializing Ada Boost Classifier
2025-07-07 12:11:14,887:INFO:Total runtime is 0.4399117310841879 minutes
2025-07-07 12:11:14,890:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:14,890:INFO:Initializing create_model()
2025-07-07 12:11:14,890:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:14,890:INFO:Checking exceptions
2025-07-07 12:11:14,890:INFO:Importing libraries
2025-07-07 12:11:14,891:INFO:Copying training dataset
2025-07-07 12:11:14,901:INFO:Defining folds
2025-07-07 12:11:14,901:INFO:Declaring metric variables
2025-07-07 12:11:14,904:INFO:Importing untrained model
2025-07-07 12:11:14,907:INFO:Ada Boost Classifier Imported successfully
2025-07-07 12:11:14,912:INFO:Starting cross validation
2025-07-07 12:11:14,915:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:15,514:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,562:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,574:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,587:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,606:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,606:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,609:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,622:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,627:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:15,628:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-07 12:11:17,604:INFO:Calculating mean and std
2025-07-07 12:11:17,605:INFO:Creating metrics dataframe
2025-07-07 12:11:17,607:INFO:Uploading results into container
2025-07-07 12:11:17,607:INFO:Uploading model into container now
2025-07-07 12:11:17,607:INFO:_master_model_container: 9
2025-07-07 12:11:17,608:INFO:_display_container: 2
2025-07-07 12:11:17,608:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-07-07 12:11:17,608:INFO:create_model() successfully completed......................................
2025-07-07 12:11:17,669:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:17,669:INFO:Creating metrics dataframe
2025-07-07 12:11:17,676:INFO:Initializing Gradient Boosting Classifier
2025-07-07 12:11:17,677:INFO:Total runtime is 0.4864083051681519 minutes
2025-07-07 12:11:17,679:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:17,679:INFO:Initializing create_model()
2025-07-07 12:11:17,680:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:17,680:INFO:Checking exceptions
2025-07-07 12:11:17,680:INFO:Importing libraries
2025-07-07 12:11:17,680:INFO:Copying training dataset
2025-07-07 12:11:17,690:INFO:Defining folds
2025-07-07 12:11:17,690:INFO:Declaring metric variables
2025-07-07 12:11:17,692:INFO:Importing untrained model
2025-07-07 12:11:17,695:INFO:Gradient Boosting Classifier Imported successfully
2025-07-07 12:11:17,700:INFO:Starting cross validation
2025-07-07 12:11:17,702:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:24,450:INFO:Calculating mean and std
2025-07-07 12:11:24,451:INFO:Creating metrics dataframe
2025-07-07 12:11:24,453:INFO:Uploading results into container
2025-07-07 12:11:24,453:INFO:Uploading model into container now
2025-07-07 12:11:24,454:INFO:_master_model_container: 10
2025-07-07 12:11:24,454:INFO:_display_container: 2
2025-07-07 12:11:24,454:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-07 12:11:24,454:INFO:create_model() successfully completed......................................
2025-07-07 12:11:24,519:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:24,519:INFO:Creating metrics dataframe
2025-07-07 12:11:24,527:INFO:Initializing Linear Discriminant Analysis
2025-07-07 12:11:24,527:INFO:Total runtime is 0.6005771398544312 minutes
2025-07-07 12:11:24,530:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:24,530:INFO:Initializing create_model()
2025-07-07 12:11:24,530:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:24,530:INFO:Checking exceptions
2025-07-07 12:11:24,531:INFO:Importing libraries
2025-07-07 12:11:24,531:INFO:Copying training dataset
2025-07-07 12:11:24,540:INFO:Defining folds
2025-07-07 12:11:24,540:INFO:Declaring metric variables
2025-07-07 12:11:24,543:INFO:Importing untrained model
2025-07-07 12:11:24,546:INFO:Linear Discriminant Analysis Imported successfully
2025-07-07 12:11:24,552:INFO:Starting cross validation
2025-07-07 12:11:24,554:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:25,829:INFO:Calculating mean and std
2025-07-07 12:11:25,830:INFO:Creating metrics dataframe
2025-07-07 12:11:25,832:INFO:Uploading results into container
2025-07-07 12:11:25,832:INFO:Uploading model into container now
2025-07-07 12:11:25,833:INFO:_master_model_container: 11
2025-07-07 12:11:25,833:INFO:_display_container: 2
2025-07-07 12:11:25,833:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-07 12:11:25,834:INFO:create_model() successfully completed......................................
2025-07-07 12:11:25,914:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:25,914:INFO:Creating metrics dataframe
2025-07-07 12:11:25,922:INFO:Initializing Extra Trees Classifier
2025-07-07 12:11:25,922:INFO:Total runtime is 0.6238389492034913 minutes
2025-07-07 12:11:25,926:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:25,926:INFO:Initializing create_model()
2025-07-07 12:11:25,926:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:25,927:INFO:Checking exceptions
2025-07-07 12:11:25,927:INFO:Importing libraries
2025-07-07 12:11:25,927:INFO:Copying training dataset
2025-07-07 12:11:25,938:INFO:Defining folds
2025-07-07 12:11:25,938:INFO:Declaring metric variables
2025-07-07 12:11:25,942:INFO:Importing untrained model
2025-07-07 12:11:25,945:INFO:Extra Trees Classifier Imported successfully
2025-07-07 12:11:25,951:INFO:Starting cross validation
2025-07-07 12:11:25,953:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:30,430:INFO:Calculating mean and std
2025-07-07 12:11:30,431:INFO:Creating metrics dataframe
2025-07-07 12:11:30,434:INFO:Uploading results into container
2025-07-07 12:11:30,435:INFO:Uploading model into container now
2025-07-07 12:11:30,435:INFO:_master_model_container: 12
2025-07-07 12:11:30,435:INFO:_display_container: 2
2025-07-07 12:11:30,436:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-07-07 12:11:30,436:INFO:create_model() successfully completed......................................
2025-07-07 12:11:30,513:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:30,513:INFO:Creating metrics dataframe
2025-07-07 12:11:30,522:INFO:Initializing Light Gradient Boosting Machine
2025-07-07 12:11:30,522:INFO:Total runtime is 0.7005029360453288 minutes
2025-07-07 12:11:30,525:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:30,526:INFO:Initializing create_model()
2025-07-07 12:11:30,526:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:30,526:INFO:Checking exceptions
2025-07-07 12:11:30,526:INFO:Importing libraries
2025-07-07 12:11:30,526:INFO:Copying training dataset
2025-07-07 12:11:30,539:INFO:Defining folds
2025-07-07 12:11:30,539:INFO:Declaring metric variables
2025-07-07 12:11:30,542:INFO:Importing untrained model
2025-07-07 12:11:30,545:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 12:11:30,555:INFO:Starting cross validation
2025-07-07 12:11:30,558:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:34,950:INFO:Calculating mean and std
2025-07-07 12:11:34,952:INFO:Creating metrics dataframe
2025-07-07 12:11:34,955:INFO:Uploading results into container
2025-07-07 12:11:34,956:INFO:Uploading model into container now
2025-07-07 12:11:34,957:INFO:_master_model_container: 13
2025-07-07 12:11:34,957:INFO:_display_container: 2
2025-07-07 12:11:34,958:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 12:11:34,958:INFO:create_model() successfully completed......................................
2025-07-07 12:11:35,045:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:35,045:INFO:Creating metrics dataframe
2025-07-07 12:11:35,055:INFO:Initializing Dummy Classifier
2025-07-07 12:11:35,055:INFO:Total runtime is 0.7760506510734558 minutes
2025-07-07 12:11:35,059:INFO:SubProcess create_model() called ==================================
2025-07-07 12:11:35,059:INFO:Initializing create_model()
2025-07-07 12:11:35,059:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB3D3B55A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:35,059:INFO:Checking exceptions
2025-07-07 12:11:35,060:INFO:Importing libraries
2025-07-07 12:11:35,060:INFO:Copying training dataset
2025-07-07 12:11:35,071:INFO:Defining folds
2025-07-07 12:11:35,072:INFO:Declaring metric variables
2025-07-07 12:11:35,076:INFO:Importing untrained model
2025-07-07 12:11:35,079:INFO:Dummy Classifier Imported successfully
2025-07-07 12:11:35,084:INFO:Starting cross validation
2025-07-07 12:11:35,087:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:11:35,906:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:35,907:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:35,952:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:35,954:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:35,955:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:35,959:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:35,965:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:35,985:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:35,993:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:36,000:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-07 12:11:36,010:INFO:Calculating mean and std
2025-07-07 12:11:36,011:INFO:Creating metrics dataframe
2025-07-07 12:11:36,014:INFO:Uploading results into container
2025-07-07 12:11:36,014:INFO:Uploading model into container now
2025-07-07 12:11:36,015:INFO:_master_model_container: 14
2025-07-07 12:11:36,015:INFO:_display_container: 2
2025-07-07 12:11:36,015:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-07-07 12:11:36,015:INFO:create_model() successfully completed......................................
2025-07-07 12:11:36,091:INFO:SubProcess create_model() end ==================================
2025-07-07 12:11:36,091:INFO:Creating metrics dataframe
2025-07-07 12:11:36,103:WARNING:c:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-07 12:11:36,111:INFO:Initializing create_model()
2025-07-07 12:11:36,111:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:11:36,111:INFO:Checking exceptions
2025-07-07 12:11:36,113:INFO:Importing libraries
2025-07-07 12:11:36,113:INFO:Copying training dataset
2025-07-07 12:11:36,125:INFO:Defining folds
2025-07-07 12:11:36,125:INFO:Declaring metric variables
2025-07-07 12:11:36,126:INFO:Importing untrained model
2025-07-07 12:11:36,126:INFO:Declaring custom model
2025-07-07 12:11:36,127:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 12:11:36,130:INFO:Cross validation set to False
2025-07-07 12:11:36,130:INFO:Fitting Model
2025-07-07 12:11:36,532:INFO:[LightGBM] [Info] Number of positive: 2547, number of negative: 26836
2025-07-07 12:11:36,537:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001698 seconds.
2025-07-07 12:11:36,538:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-07 12:11:36,538:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-07 12:11:36,538:INFO:[LightGBM] [Info] Total Bins 1024
2025-07-07 12:11:36,538:INFO:[LightGBM] [Info] Number of data points in the train set: 29383, number of used features: 49
2025-07-07 12:11:36,539:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.086683 -> initscore=-2.354828
2025-07-07 12:11:36,539:INFO:[LightGBM] [Info] Start training from score -2.354828
2025-07-07 12:11:36,733:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 12:11:36,733:INFO:create_model() successfully completed......................................
2025-07-07 12:11:36,859:INFO:_master_model_container: 14
2025-07-07 12:11:36,859:INFO:_display_container: 2
2025-07-07 12:11:36,860:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 12:11:36,861:INFO:compare_models() successfully completed......................................
2025-07-07 12:11:36,890:INFO:Initializing tune_model()
2025-07-07 12:11:36,890:INFO:tune_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>)
2025-07-07 12:11:36,890:INFO:Checking exceptions
2025-07-07 12:11:36,913:INFO:Copying training dataset
2025-07-07 12:11:36,924:INFO:Checking base model
2025-07-07 12:11:36,925:INFO:Base model : Light Gradient Boosting Machine
2025-07-07 12:11:36,929:INFO:Declaring metric variables
2025-07-07 12:11:36,933:INFO:Defining Hyperparameters
2025-07-07 12:11:37,020:INFO:Tuning with n_jobs=-1
2025-07-07 12:11:37,020:INFO:Initializing RandomizedSearchCV
2025-07-07 12:12:35,661:INFO:best_params: {'actual_estimator__reg_lambda': 0.1, 'actual_estimator__reg_alpha': 0.0001, 'actual_estimator__num_leaves': 10, 'actual_estimator__n_estimators': 180, 'actual_estimator__min_split_gain': 0.7, 'actual_estimator__min_child_samples': 96, 'actual_estimator__learning_rate': 0.05, 'actual_estimator__feature_fraction': 0.9, 'actual_estimator__bagging_freq': 4, 'actual_estimator__bagging_fraction': 0.6}
2025-07-07 12:12:35,662:INFO:Hyperparameter search completed
2025-07-07 12:12:35,663:INFO:SubProcess create_model() called ==================================
2025-07-07 12:12:35,664:INFO:Initializing create_model()
2025-07-07 12:12:35,664:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AB38511600>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'reg_lambda': 0.1, 'reg_alpha': 0.0001, 'num_leaves': 10, 'n_estimators': 180, 'min_split_gain': 0.7, 'min_child_samples': 96, 'learning_rate': 0.05, 'feature_fraction': 0.9, 'bagging_freq': 4, 'bagging_fraction': 0.6})
2025-07-07 12:12:35,665:INFO:Checking exceptions
2025-07-07 12:12:35,665:INFO:Importing libraries
2025-07-07 12:12:35,665:INFO:Copying training dataset
2025-07-07 12:12:35,685:INFO:Defining folds
2025-07-07 12:12:35,685:INFO:Declaring metric variables
2025-07-07 12:12:35,690:INFO:Importing untrained model
2025-07-07 12:12:35,690:INFO:Declaring custom model
2025-07-07 12:12:35,698:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 12:12:35,708:INFO:Starting cross validation
2025-07-07 12:12:35,713:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:12:39,125:INFO:Calculating mean and std
2025-07-07 12:12:39,127:INFO:Creating metrics dataframe
2025-07-07 12:12:39,135:INFO:Finalizing model
2025-07-07 12:12:39,584:INFO:[LightGBM] [Warning] feature_fraction is set=0.9, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.9
2025-07-07 12:12:39,584:INFO:[LightGBM] [Warning] bagging_fraction is set=0.6, subsample=1.0 will be ignored. Current value: bagging_fraction=0.6
2025-07-07 12:12:39,584:INFO:[LightGBM] [Warning] bagging_freq is set=4, subsample_freq=0 will be ignored. Current value: bagging_freq=4
2025-07-07 12:12:39,604:INFO:[LightGBM] [Warning] feature_fraction is set=0.9, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.9
2025-07-07 12:12:39,605:INFO:[LightGBM] [Warning] bagging_fraction is set=0.6, subsample=1.0 will be ignored. Current value: bagging_fraction=0.6
2025-07-07 12:12:39,605:INFO:[LightGBM] [Warning] bagging_freq is set=4, subsample_freq=0 will be ignored. Current value: bagging_freq=4
2025-07-07 12:12:39,605:INFO:[LightGBM] [Info] Number of positive: 2547, number of negative: 26836
2025-07-07 12:12:39,610:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003039 seconds.
2025-07-07 12:12:39,610:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-07-07 12:12:39,610:INFO:[LightGBM] [Info] Total Bins 1024
2025-07-07 12:12:39,610:INFO:[LightGBM] [Info] Number of data points in the train set: 29383, number of used features: 49
2025-07-07 12:12:39,611:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.086683 -> initscore=-2.354828
2025-07-07 12:12:39,611:INFO:[LightGBM] [Info] Start training from score -2.354828
2025-07-07 12:12:39,889:INFO:Uploading results into container
2025-07-07 12:12:39,890:INFO:Uploading model into container now
2025-07-07 12:12:39,891:INFO:_master_model_container: 15
2025-07-07 12:12:39,891:INFO:_display_container: 3
2025-07-07 12:12:39,893:INFO:LGBMClassifier(bagging_fraction=0.6, bagging_freq=4, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,
               importance_type='split', learning_rate=0.05, max_depth=-1,
               min_child_samples=96, min_child_weight=0.001, min_split_gain=0.7,
               n_estimators=180, n_jobs=-1, num_leaves=10, objective=None,
               random_state=123, reg_alpha=0.0001, reg_lambda=0.1,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2025-07-07 12:12:39,893:INFO:create_model() successfully completed......................................
2025-07-07 12:12:39,988:INFO:SubProcess create_model() end ==================================
2025-07-07 12:12:39,989:INFO:choose_better activated
2025-07-07 12:12:39,994:INFO:SubProcess create_model() called ==================================
2025-07-07 12:12:39,995:INFO:Initializing create_model()
2025-07-07 12:12:39,996:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:12:39,996:INFO:Checking exceptions
2025-07-07 12:12:40,000:INFO:Importing libraries
2025-07-07 12:12:40,000:INFO:Copying training dataset
2025-07-07 12:12:40,023:INFO:Defining folds
2025-07-07 12:12:40,023:INFO:Declaring metric variables
2025-07-07 12:12:40,023:INFO:Importing untrained model
2025-07-07 12:12:40,023:INFO:Declaring custom model
2025-07-07 12:12:40,025:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 12:12:40,025:INFO:Starting cross validation
2025-07-07 12:12:40,031:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-07 12:12:44,206:INFO:Calculating mean and std
2025-07-07 12:12:44,207:INFO:Creating metrics dataframe
2025-07-07 12:12:44,210:INFO:Finalizing model
2025-07-07 12:12:44,683:INFO:[LightGBM] [Info] Number of positive: 2547, number of negative: 26836
2025-07-07 12:12:44,688:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001671 seconds.
2025-07-07 12:12:44,688:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-07 12:12:44,689:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-07 12:12:44,689:INFO:[LightGBM] [Info] Total Bins 1024
2025-07-07 12:12:44,689:INFO:[LightGBM] [Info] Number of data points in the train set: 29383, number of used features: 49
2025-07-07 12:12:44,690:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.086683 -> initscore=-2.354828
2025-07-07 12:12:44,690:INFO:[LightGBM] [Info] Start training from score -2.354828
2025-07-07 12:12:45,026:INFO:Uploading results into container
2025-07-07 12:12:45,028:INFO:Uploading model into container now
2025-07-07 12:12:45,028:INFO:_master_model_container: 16
2025-07-07 12:12:45,028:INFO:_display_container: 4
2025-07-07 12:12:45,029:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 12:12:45,029:INFO:create_model() successfully completed......................................
2025-07-07 12:12:45,121:INFO:SubProcess create_model() end ==================================
2025-07-07 12:12:45,123:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9317
2025-07-07 12:12:45,124:INFO:LGBMClassifier(bagging_fraction=0.6, bagging_freq=4, boosting_type='gbdt',
               class_weight=None, colsample_bytree=1.0, feature_fraction=0.9,
               importance_type='split', learning_rate=0.05, max_depth=-1,
               min_child_samples=96, min_child_weight=0.001, min_split_gain=0.7,
               n_estimators=180, n_jobs=-1, num_leaves=10, objective=None,
               random_state=123, reg_alpha=0.0001, reg_lambda=0.1,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9309
2025-07-07 12:12:45,125:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) is best model
2025-07-07 12:12:45,125:INFO:choose_better completed
2025-07-07 12:12:45,126:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-07-07 12:12:45,138:INFO:_master_model_container: 16
2025-07-07 12:12:45,138:INFO:_display_container: 3
2025-07-07 12:12:45,139:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 12:12:45,139:INFO:tune_model() successfully completed......................................
2025-07-07 12:12:45,224:INFO:Initializing finalize_model()
2025-07-07 12:12:45,225:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-07 12:12:45,226:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-07 12:12:45,233:INFO:Initializing create_model()
2025-07-07 12:12:45,233:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-07 12:12:45,233:INFO:Checking exceptions
2025-07-07 12:12:45,235:INFO:Importing libraries
2025-07-07 12:12:45,235:INFO:Copying training dataset
2025-07-07 12:12:45,236:INFO:Defining folds
2025-07-07 12:12:45,236:INFO:Declaring metric variables
2025-07-07 12:12:45,237:INFO:Importing untrained model
2025-07-07 12:12:45,237:INFO:Declaring custom model
2025-07-07 12:12:45,238:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-07 12:12:45,240:INFO:Cross validation set to False
2025-07-07 12:12:45,240:INFO:Fitting Model
2025-07-07 12:12:45,769:INFO:[LightGBM] [Info] Number of positive: 3638, number of negative: 38338
2025-07-07 12:12:45,774:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001669 seconds.
2025-07-07 12:12:45,775:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-07-07 12:12:45,775:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-07-07 12:12:45,775:INFO:[LightGBM] [Info] Total Bins 1030
2025-07-07 12:12:45,775:INFO:[LightGBM] [Info] Number of data points in the train set: 41976, number of used features: 49
2025-07-07 12:12:45,776:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.086669 -> initscore=-2.355007
2025-07-07 12:12:45,776:INFO:[LightGBM] [Info] Start training from score -2.355007
2025-07-07 12:12:46,155:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 12:12:46,155:INFO:create_model() successfully completed......................................
2025-07-07 12:12:46,237:INFO:_master_model_container: 16
2025-07-07 12:12:46,237:INFO:_display_container: 3
2025-07-07 12:12:46,275:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 12:12:46,276:INFO:finalize_model() successfully completed......................................
2025-07-07 12:12:46,403:INFO:Initializing plot_model()
2025-07-07 12:12:46,403:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, system=True)
2025-07-07 12:12:46,403:INFO:Checking exceptions
2025-07-07 12:12:46,411:INFO:Preloading libraries
2025-07-07 12:12:46,417:INFO:Copying training dataset
2025-07-07 12:12:46,417:INFO:Plot type: confusion_matrix
2025-07-07 12:12:46,629:INFO:Fitting Model
2025-07-07 12:12:46,629:INFO:Scoring test/hold-out set
2025-07-07 12:12:46,777:INFO:Visual Rendered Successfully
2025-07-07 12:12:46,844:INFO:plot_model() successfully completed......................................
2025-07-07 12:12:46,900:INFO:Initializing plot_model()
2025-07-07 12:12:46,900:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, system=True)
2025-07-07 12:12:46,900:INFO:Checking exceptions
2025-07-07 12:12:46,907:INFO:Preloading libraries
2025-07-07 12:12:46,913:INFO:Copying training dataset
2025-07-07 12:12:46,913:INFO:Plot type: feature
2025-07-07 12:12:46,914:WARNING:No coef_ found. Trying feature_importances_
2025-07-07 12:12:47,140:INFO:Visual Rendered Successfully
2025-07-07 12:12:47,219:INFO:plot_model() successfully completed......................................
2025-07-07 12:12:47,276:INFO:Initializing plot_model()
2025-07-07 12:12:47,276:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AB3D0C0490>, system=True)
2025-07-07 12:12:47,276:INFO:Checking exceptions
2025-07-07 12:12:47,284:INFO:Preloading libraries
2025-07-07 12:12:47,289:INFO:Copying training dataset
2025-07-07 12:12:47,289:INFO:Plot type: auc
2025-07-07 12:12:47,518:INFO:Fitting Model
2025-07-07 12:12:47,519:INFO:Scoring test/hold-out set
2025-07-07 12:12:47,741:INFO:Visual Rendered Successfully
2025-07-07 12:12:47,813:INFO:plot_model() successfully completed......................................
2025-07-07 12:12:48,027:INFO:Initializing save_model()
2025-07-07 12:12:48,027:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), model_name=bank_subscription_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-07-07 12:12:48,028:INFO:Adding model into prep_pipe
2025-07-07 12:12:48,028:WARNING:Only Model saved as it was a pipeline.
2025-07-07 12:12:48,045:INFO:bank_subscription_model.pkl saved in current working directory
2025-07-07 12:12:48,110:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 12:12:48,110:INFO:save_model() successfully completed......................................
2025-07-07 12:12:48,333:INFO:Initializing save_model()
2025-07-07 12:12:48,333:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), model_name=bank_subscription_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-07-07 12:12:48,333:INFO:Adding model into prep_pipe
2025-07-07 12:12:48,333:WARNING:Only Model saved as it was a pipeline.
2025-07-07 12:12:48,354:INFO:bank_subscription_model.pkl saved in current working directory
2025-07-07 12:12:48,415:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 12:12:48,415:INFO:save_model() successfully completed......................................
2025-07-07 12:12:48,606:INFO:Initializing save_model()
2025-07-07 12:12:48,606:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), model_name=bank_subscription_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DR8E6B~1.RED\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'...
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'contact', 'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'contact',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-07-07 12:12:48,606:INFO:Adding model into prep_pipe
2025-07-07 12:12:48,606:WARNING:Only Model saved as it was a pipeline.
2025-07-07 12:12:48,630:INFO:bank_subscription_model.pkl saved in current working directory
2025-07-07 12:12:48,695:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(e...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-07-07 12:12:48,695:INFO:save_model() successfully completed......................................
2025-07-07 21:24:12,173:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:26:09,083:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:35:34,687:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:37:35,671:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:40:05,580:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:42:56,296:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:49:24,011:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:55:00,705:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:55:43,235:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:57:41,649:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 21:59:53,091:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-07 22:01:27,953:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 13:32:37,149:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 13:38:57,192:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 14:19:19,620:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 14:36:54,021:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 14:53:38,270:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 15:10:09,567:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 15:26:05,471:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 15:31:09,704:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 15:31:56,053:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 15:37:38,307:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

2025-07-08 15:39:43,953:WARNING:C:\Users\Dr. Redha C AGGOUN\.conda\envs\bankmarketing\lib\site-packages\pycaret\internal\pipeline.py:148: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '6.2.0', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '25.1', 'setuptools': '78.1.1', 'pycaret': '3.3.2', 'IPython': '8.37.0', 'ipywidgets': '8.1.7', 'tqdm': '4.67.1', 'numpy': '1.26.4', 'pandas': '2.1.4', 'jinja2': '3.1.6', 'scipy': '1.11.4', 'joblib': '1.3.2', 'sklearn': '1.4.2', 'pyod': '2.0.5', 'imblearn': '0.13.0', 'category_encoders': '2.7.0', 'lightgbm': '4.6.0', 'numba': '0.61.2', 'requests': '2.32.4', 'matplotlib': '3.7.5', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.24.1', 'plotly-resampler': 'Not installed', 'kaleido': '1.0.0', 'schemdraw': '0.15', 'statsmodels': '0.14.4', 'sktime': '0.26.0', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '7.0.0', 'markupsafe': '3.0.2', 'pickle5': 'Not installed', 'cloudpickle': '3.1.1', 'deprecation': '2.1.0', 'xxhash': '3.5.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.18', 'machine': 'AMD64'}}
  warnings.warn(

